(function($) { "use strict"; var bossInterval; var dpsInterval; var localSaveInterval; var cloudSaveInterval; var autoClickerDuration; var autoClickerInterval; var powerShotDuration; var specialForceDuration; var luckyCoinDuration; var grimReaperDuration; var grimReaperInterval; var skillCooldownInterval = []; var currentEnemyHP = new Decimal(0); var lastDateTimeClick = Date.now(); var availableArtifact = []; var activeTutorNumber = 1; var notifCanPrestige = true; var initGame = function() {showGameVersion();loadGame();if(hero.userName != ""){ if(!hero.lastPrestigeShow){let textOrbs = "Orb";if(hero.lastPrestigeOrbs > 1) textOrbs = "Orbs";componentAction ("prestige-text", "replaceText", numberFormat(hero.lastPrestigeOrbs)+" "+textOrbs);$("#modalPrestigeForm").modal('show');hero.lastPrestigeShow = true; } initDisplay(); insertAvailableArtifact(); calculateAllArtifactDamage(); saveGame(); currentEnemyHP = initDungeon();}else $("#user-name").focus(); }; var loadGame = function () {if(localStorage.getItem("hero")){ hero = JSON.parse(localStorage.getItem("hero")); calcOfflineTime();}else firstTimeVisit(); }; var saveGame = function () {if(hero.userID != "" && hero.userName != ""){ localSaveGame(); localSaveInterval = setInterval(function() { localSaveGame(); },setting.localSaveTimer*1000); } }; var localSaveGame = function () {let onlineDuration = 0;if(localStorage.getItem("hero"))localStorage.removeItem("hero");if(hero.gameVersion == '') hero.gameVersion = setting.gameVersion;if(hero.lastActiveDatetime > 0)onlineDuration = (Date.now() - hero.lastActiveDatetime) / 1000;hero.totalOnlineDuration = new Decimal(hero.totalOnlineDuration).plus(onlineDuration);hero.lastActiveDatetime = Date.now();localStorage.setItem("hero", JSON.stringify(hero)); }; var cloudSaveGame = function () { }; var resetGame = function (){hero.heroLevel = 1;hero.weaponLevel = 0;hero.dpc = 1; hero.dps = 0;hero.coin = 0;hero.weaponDpc = 0;hero.floor = 1;hero.maxFloor = 1;hero.countPartner = 0;hero.unlockPartner = [];hero.countSkill = 0;hero.unlockSkill = [];hero.weaponAreaShow = 0; }; var firstTimeVisit = function () {let currentDatetime = new Date();let date = currentDatetime.getDate();let month = currentDatetime.getMonth() + 1;let year = currentDatetime.getFullYear().toString().substr(-2);let hour = currentDatetime.getHours();let min = currentDatetime.getMinutes();let sec = currentDatetime.getSeconds(); let firstID = parseInt(year,10).toString(36)+month.toString(36)+date.toString(36)+hour.toString(36)+min.toString(36)+sec.toString(36);let userID = firstID.toUpperCase()+randomString(10-firstID.length);componentAction("user-id", "inputText", userID);$("#modalLoginForm").modal('show'); }; var randomString = function (len) {let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';let charactersLength = characters.length;let result = "";for ( var i = 0; i < len; i++ ) { result += characters.charAt(Math.floor(Math.random() * charactersLength));}return result; }; var initDungeon = function() {let enemyHP = initEnemy();let heroOrbs = new Decimal(hero.orbs);enemy.maxHp = enemyHP;showBodyArea();componentAction ("current-enemy-hp,max-enemy-hp", "replaceText", numberFormat(enemyHP)); updateHeroDpc();updateHeroCoin();updateHeroDps();updateWeaponDpc();showPrestigeArea();showFloorNumber();if(heroOrbs.greaterThan(0) || hero.unlockArtifact.length > 0){ componentAction ("hero-orbs-title", "replaceText", "Orbs : "); updateHeroOrbs();}return enemyHP; }; var initDisplay = function() {updateUpgradeLevelFeeHero();updateUpgradeLevelFeeWeapon();updateUpgradeLevelFeeAllPartner();updateUpgradeLevelFeeAllSkill();updateUserName();updateHeroCoin();updateHeroDpc();updateHeroDps();updateHeroLevel();updatePartner();updateSkill();updateWeaponDpc();updateWeaponLevel();showBodyArea();showWeaponArea();showPartnerArea(); showSkillArea();showAutoProgress();showFloorNumber();showPrestigeArea();if(new Decimal(hero.totalGainOrbs).greaterThan(0)) componentAction ("artifact", "removeClass", "d-none");if(!dpsInterval){ if(hero.dps > 0) startDpsInterval(); else dpsInterval = clearInterval(dpsInterval);} }; var initEnemy = function(){let baseEnemyHP = new Decimal(setting.enemyHPMultiplier).pow(hero.floor-1).mul(enemy.baseHp);let enemyHpPercentage = new Decimal(100).sub(hero.bonusEnemyHpPercentage).div(100);let enemyHP = baseEnemyHP.mul(enemyHpPercentage);if(bossInterval){ bossInterval = clearInterval(bossInterval);}if(hero.floor % enemy.bossFloor == 0){ let bossHpPercentage = new Decimal(100).sub(hero.bonusBossHpPercentage).div(100); componentAction ("current-enemy-name", "replaceText", enemy.listBoss[Math.floor(Math.random() * enemy.listBoss.length)]); $("#timer-bar").animate({width: "100%"},10); enemyHP = enemyHP.mul(2.5); enemyHP = enemyHP.mul(bossHpPercentage); componentAction ("timer-bar", "addClass", "timer-bar-bgcolor"); let maxBossTimer = new Decimal(setting.baseBossTimeLimit).plus(hero.bonusBossTimeLimit); let bossTimer = maxBossTimer; bossInterval = setInterval(function() { bossTimer = bossTimer.sub(1);let widthTimerBar = new Decimal(bossTimer).div(maxBossTimer).mul(100); $("#timer-bar").animate({width: (widthTimerBar)+"%"},10); if(bossTimer.equals(0)){ componentAction ("timer-bar", "removeClass", "timer-bar-bgcolor"); hero.floor--; enemyHP = initDungeon(); currentEnemyHP = enemyHP; componentAction ("progress-bar", "animate", 100); hero.autoProgressShow = 1; setting.autoProgress = false; showAutoProgress(); bossInterval = clearInterval(bossInterval); } },1000);}else{ componentAction ("current-enemy-name", "replaceText", enemy.listName[Math.floor(Math.random() * enemy.listName.length)]); componentAction ("timer-bar", "removeClass", "timer-bar-bgcolor");}return (enemyHP.ceil()); }; var checkAction = function() {if(currentEnemyHP.lessThanOrEqualTo(0)){ componentAction ("progress-bar", "animate", 100); let rewardCoin = calcTotalRewardCoin(); let heroCoin = new Decimal(hero.coin); let totalGainCoin = new Decimal(hero.totalGainCoin); let bossCoinPercentage = new Decimal(hero.bonusBossCoinPercentage).plus(100).div(100); if(hero.floor % enemy.bossFloor == 0) rewardCoin = rewardCoin.mul(bossCoinPercentage).mul(2); hero.coin = heroCoin.plus(rewardCoin).ceil(); hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(rewardCoin).ceil(); if(setting.autoProgress){if(hero.floor < setting.limitFloor) hero.floor++;if(hero.floor % enemy.bossFloor != 0){ let randomSkipFloorChance = Math.random()*100; if(randomSkipFloorChance <= hero.bonusChanceSkipFloorPercentage && hero.floor < setting.limitFloor) hero.floor++;}if(hero.maxFloor < hero.floor) hero.maxFloor = hero.floor;showSkillArea(); }else{if(hero.maxFloor < (hero.floor + 1) && hero.floor < setting.limitFloor){ hero.maxFloor = hero.floor + 1; if(hero.floor % enemy.bossFloor == 0){setting.autoProgress = true;showAutoProgress();hero.floor++; }} } if(hero.highestFloor < hero.maxFloor) hero.highestFloor = hero.floor; currentEnemyHP = initDungeon();}if(hero.maxFloor == setting.unlockReqFloorPrestige && hero.totalGainOrbs == 0 && notifCanPrestige == true) { updateTab('hero'); $("#modalNotifPrestige").modal('show'); notifCanPrestige = false;} }; var componentAction = function(componentId, action, actionValue){let arrayComponentId = componentId.split(','); for(let i=0; i<arrayComponentId.length; i++){ switch (action) {case 'addClass': $("#"+arrayComponentId[i]).addClass(actionValue); break;case 'removeClass': $("#"+arrayComponentId[i]).removeClass(actionValue); break;case 'updateClass': let arrayActionValue = actionValue.split(','); $("#"+arrayComponentId[i]).removeClass(arrayActionValue[0]).addClass(arrayActionValue[1]); break;case 'replaceText': if(!isNaN(actionValue)) actionValue = numberFormat(actionValue); $("#"+arrayComponentId[i]).text(actionValue); break;case 'inputText': if(!isNaN(actionValue)) actionValue = numberFormat(actionValue); $("#"+arrayComponentId[i]).val(actionValue); break;case 'clearText': $("#"+arrayComponentId[i]).empty(); break;case 'animate': let barPercentage = new Decimal(actionValue).toPrecision(5); $("#"+arrayComponentId[i]).animate({width: barPercentage+"%"},1); break; }} }; var calculateAllArtifactDamage = function(){let artifactDamage = new Decimal(0);let artifactDpc = new Decimal(0);let artifactDps = new Decimal(0);let artifactCoin = new Decimal(0);let artifactBossCoin = new Decimal(0);let artifactOrbs = new Decimal(0);let artifactBossTimeLimit = new Decimal(0);let artifactOfflineTimeLimit = new Decimal(0);let artifactOfflineDps = new Decimal(0);let artifactOfflineCoin = new Decimal(0);let artifactIntervalDps = new Decimal(0);let artifactIntervalGrimReaper = new Decimal(0);let artifactEnemyHp = new Decimal(0);let artifactBossHp = new Decimal(0);let artifactHeroUpgradeFee = new Decimal(0);let artifactWeaponUpgradeFee = new Decimal(0);let artifactPartnerUpgradeFee = new Decimal(0);let artifactSkillUpgradeFee = new Decimal(0);let artifactChanceSkipFloor = new Decimal(0);for(let i=0; i<hero.countArtifact; i++){ let unlockArtifact = hero.unlockArtifact[i]; let artifactData = artifact.find(item => item.id === unlockArtifact.id); let totalDamage = new Decimal(unlockArtifact.level * artifactData.baseDamage); artifactDamage = artifactDamage.plus(artifactData.tier * unlockArtifact.level * 5); unlockArtifact.damage = totalDamage; switch (unlockArtifact.id){case 0: artifactCoin = artifactCoin.plus(totalDamage); break;case 1: artifactBossCoin = artifactBossCoin.plus(totalDamage); break;case 2:case 3: artifactDpc = artifactDpc.plus(totalDamage); break;case 4: artifactDps = artifactDps.plus(totalDamage); break;case 5: artifactOfflineCoin = artifactOfflineCoin.plus(totalDamage); break;case 6: artifactOfflineDps = artifactOfflineDps.plus(totalDamage); break;case 7: artifactDamage = artifactDamage.plus(totalDamage); break;case 8: artifactOrbs = artifactOrbs.plus(totalDamage); break;case 9: artifactOfflineTimeLimit = artifactOfflineTimeLimit.plus(totalDamage); break;case 10: artifactIntervalDps = artifactIntervalDps.plus(totalDamage); break;case 11: artifactIntervalGrimReaper = artifactIntervalGrimReaper.plus(totalDamage); break;case 27: artifactBossTimeLimit = artifactBossTimeLimit.plus(totalDamage); break;case 28: artifactEnemyHp = artifactEnemyHp.plus(totalDamage); break;case 29: artifactBossHp = artifactBossHp.plus(totalDamage); break;case 30: artifactHeroUpgradeFee = artifactHeroUpgradeFee.plus(totalDamage); break;case 31: artifactWeaponUpgradeFee = artifactWeaponUpgradeFee.plus(totalDamage); break;case 32: artifactPartnerUpgradeFee = artifactPartnerUpgradeFee.plus(totalDamage); break;case 33: artifactSkillUpgradeFee = artifactSkillUpgradeFee.plus(totalDamage); break;case 34: artifactChanceSkipFloor = artifactChanceSkipFloor.plus(totalDamage); break;}}hero.artifactDamagePercentage = artifactDamage;hero.bonusDpcPercentage = artifactDpc;hero.bonusDpsPercentage = artifactDps;hero.bonusCoinPercentage = artifactCoin;hero.bonusBossCoinPercentage = artifactBossCoin;hero.bonusOrbsPercentage = artifactOrbs;hero.bonusBossTimeLimit = artifactBossTimeLimit;hero.bonusOfflineTimeLimit = artifactOfflineTimeLimit;hero.bonusOfflineDpsPercentage = artifactOfflineDps;hero.bonusOfflineCoinPercentage = artifactOfflineCoin;hero.bonusIntervalDps = artifactIntervalDps;hero.bonusIntervalGrimReaper = artifactIntervalGrimReaper;hero.bonusEnemyHpPercentage = artifactEnemyHp;hero.bonusBossHpPercentage = artifactBossHp;hero.bonusHeroUpgradeFeePercentage = artifactHeroUpgradeFee;hero.bonusWeaponUpgradeFeePercentage = artifactWeaponUpgradeFee;hero.bonusPartnerUpgradeFeePercentage = artifactPartnerUpgradeFee;hero.bonusSkillUpgradeFeePercentage = artifactSkillUpgradeFee;hero.bonusChanceSkipFloorPercentage = artifactChanceSkipFloor; }; var updateUserName = function () {if(hero.userName != "") componentAction ("view-username", "replaceText", hero.userName); }; var updateHeroCoin = function() {let heroCoin = new Decimal(hero.coin);componentAction ("hero-coin", "replaceText", heroCoin); }; var updateHeroDpc = function() {componentAction ("hero-dpc", "replaceText", calcTotalDpc());componentAction ("current-hero-dpc", "replaceText", hero.dpc);componentAction ("next-hero-dpc", "replaceText", calcNextHeroDpc()); }; var updateHeroDps = function() {componentAction ("hero-dps", "replaceText", numberFormat(calcTotalDps())); }; var updateHeroOrbs = function() {componentAction ("hero-orbs", "replaceText", hero.orbs); }; var updateHeroLevel = function() {componentAction ("hero-level", "replaceText", hero.heroLevel); }; var updateWeaponLevel = function() {componentAction ("weapon-level", "replaceText", hero.weaponLevel); }; var updateWeaponDpc = function() {if(hero.weaponLevel > 0){ componentAction ("upgrade-weapon-text", "replaceText", "Level Up x"); componentAction ("level-weapon-upgrade-multiplier", "replaceText", setting.levelUpgradeMultiplier);}componentAction ("current-weapon-dpc", "replaceText", hero.weaponDpc);componentAction ("next-weapon-dpc", "replaceText", calcNextWeaponDpc()); }; var updatePartner = function() {for(let i=0; i<hero.countPartner; i++){ let unlockPartner = hero.unlockPartner.find(item => item.id === i); if(unlockPartner && unlockPartner.level > 0){ componentAction ("upgrade-partner-text-"+i, "replaceText", "Level Up x"); componentAction ("level-partner-upgrade-multiplier-"+i, "replaceText", setting.levelUpgradeMultiplier);componentAction ("partner-level-"+i, "replaceText", unlockPartner.level);componentAction ("current-partner-dps-"+i, "replaceText", unlockPartner.dps); } componentAction ("next-partner-dps-"+i, "replaceText", calcNextPartnerDps(i));} }; var updateSkill = function () {for(let i=0; i<hero.countSkill; i++){ let unlockSkill = hero.unlockSkill.find(item => item.id === i); if(unlockSkill && unlockSkill.level > 0){ if(unlockSkill.level > 0){ let totalDamage = new Decimal(unlockSkill.damage).plus(artifactSkillDamage(i)); componentAction ("upgrade-skill-text-"+i, "replaceText", "Level Up x"); componentAction ("level-skill-upgrade-multiplier-"+i, "replaceText", setting.levelUpgradeMultiplier); componentAction ("skill-level-"+i, "replaceText", unlockSkill.level); componentAction ("current-skill-damage-"+i, "replaceText", numberFormat(totalDamage));}if(unlockSkill.level < 10) componentAction ("next-skill-damage-"+i, "replaceText", "(+"+(calcNextSkillDamage(i)-unlockSkill.damage)+")"); else componentAction ("next-skill-damage-"+i, "clearText", ""); }} }; var updateUpgradeLevelFeeHero = function() {let totalUpgradeFee = new Decimal(0);for(let a=0; a<setting.levelUpgradeMultiplier; a++){ let upgradeFee = new Decimal(setting.heroUpgradeCoinMultiplier).pow(hero.heroLevel + a - 1).mul(setting.baseHeroUpgradeCoin); let heroUpgradeFeePercentage = new Decimal(100).sub(hero.bonusHeroUpgradeFeePercentage).div(100); upgradeFee = upgradeFee.mul(heroUpgradeFeePercentage); totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);}componentAction ("upgrade-level-fee", "replaceText", numberFormat(totalUpgradeFee.ceil()));return totalUpgradeFee.ceil(); }; var updateUpgradeLevelFeeWeapon = function() {let totalUpgradeFee = new Decimal(0); let loopNextLevel = 0;if(hero.weaponLevel == 0) loopNextLevel = 1; else loopNextLevel = setting.levelUpgradeMultiplier;for(let a=0; a<loopNextLevel; a++){ let upgradeFee = new Decimal(setting.weaponUpgradeCoinMultiplier).pow(hero.weaponLevel + a).mul(setting.baseWeaponUpgradeCoin); let weaponUpgradeFeePercentage = new Decimal(100).sub(hero.bonusWeaponUpgradeFeePercentage).div(100); upgradeFee = upgradeFee.mul(weaponUpgradeFeePercentage); totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);}componentAction ("upgrade-weapon-fee", "replaceText", numberFormat(totalUpgradeFee.ceil()));return totalUpgradeFee.ceil(); }; var updateUpgradeLevelFeeAllPartner = function() { for(let i=0; i<hero.countPartner; i++){ updateUpgradeLevelFeePartner(i);} }; var updateUpgradeLevelFeePartner = function(partnerId) {if(partnerId >= 0){ let totalUpgradeFee = new Decimal(0); let loopNextLevel = 0; let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId); let partnerData = partner.find(item => item.id === partnerId); let partnerLevel = 0; if (unlockPartner) {loopNextLevel = setting.levelUpgradeMultiplier;partnerLevel = unlockPartner.level }else{loopNextLevel = 1; } for(let a=0; a<loopNextLevel; a++){let upgradeFee = new Decimal(setting.partnerUpgradeCoinMultiplier).pow(partnerLevel + a).mul(partnerData.basePrice);let partnerUpgradeFeePercentage = new Decimal(100).sub(hero.bonusPartnerUpgradeFeePercentage).div(100);upgradeFee = upgradeFee.mul(partnerUpgradeFeePercentage);totalUpgradeFee = totalUpgradeFee.plus(upgradeFee); } componentAction ("upgrade-partner-fee-"+partnerId, "replaceText", numberFormat(totalUpgradeFee.ceil())); return totalUpgradeFee.ceil();} }; var updateUpgradeLevelFeeAllSkill = function() { for(let i=0; i<hero.countSkill; i++){ updateUpgradeLevelFeeSkill(i);} }; var updateUpgradeLevelFeeSkill = function(skillId){if(skillId >= 0){ let totalUpgradeFee = new Decimal(0); let loopNextLevel = 0; let unlockSkill = hero.unlockSkill.find(item => item.id === skillId); let skillData = skill.find(item => item.id === skillId); let skillLevel = 0; if (unlockSkill) {loopNextLevel = setting.levelUpgradeMultiplier;skillLevel = unlockSkill.level;componentAction ("skill-use-div-"+skillId, "removeClass", "d-none");if(!unlockSkill.isCooldown){ $("#use-skill-button-"+skillId).prop('disabled', false); componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-active");} }else{loopNextLevel = 1; } if(skillLevel==skillData.maxLevel){ $("#upgrade-skill-button-"+skillId).remove(); }else{ for(let a=0; a<loopNextLevel; a++){ let upgradeFee = new Decimal(setting.skillUpgradeCoinMultiplier).pow(skillLevel + a).mul(skillData.basePrice); let skillUpgradeFeePercentage = new Decimal(100).sub(hero.bonusSkillUpgradeFeePercentage).div(100); upgradeFee = upgradeFee.mul(skillUpgradeFeePercentage); totalUpgradeFee = totalUpgradeFee.plus(upgradeFee); } componentAction ("upgrade-skill-fee-"+skillId, "replaceText", numberFormat(totalUpgradeFee.ceil())); } return totalUpgradeFee.ceil();} }; var clearBodyArea = function() {setting.heroAreaShow = 0; setting.partnerAreaShow = 0; setting.skillAreaShow = 0; setting.shopAreaShow = 0; }; var showGameVersion = function(){componentAction ("version", "replaceText", "["+setting.gameVersion+"]"); }; var showAutoProgress = function(){if(hero.autoProgressShow == 1) componentAction ("auto-progress-div", "removeClass", "d-none");$("#auto-progress-switch").prop("checked", setting.autoProgress); }; var showFloorNumber = function() {switch (hero.floor){ case 1:componentAction ("floor-number-div-1", "removeClass", "tab-button-unactive"); componentAction ("floor-number-text-1", "clearText", ""); componentAction ("floor-number-div-2", "removeClass", "tab-button-unactive"); componentAction ("floor-number-text-2", "clearText", ""); componentAction ("floor-number-text-3", "replaceText", hero.floor);componentAction ("floor-number-text-4", "replaceText", hero.floor+1);componentAction ("floor-number-text-5", "replaceText", hero.floor+2);break; case 2: componentAction ("floor-number-div-1", "removeClass", "tab-button-unactive"); componentAction ("floor-number-text-1", "clearText", "");componentAction ("floor-number-div-2", "removeClass", "d-none"); componentAction ("floor-number-div-2", "addClass", "tab-button-unactive"); componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));componentAction ("floor-number-text-3", "replaceText", hero.floor);componentAction ("floor-number-text-4", "replaceText", hero.floor+1);componentAction ("floor-number-text-5", "replaceText", hero.floor+2);break; case (setting.limitFloor-1):componentAction ("floor-number-div-4", "addClass", "tab-button-unactive");componentAction ("floor-number-text-4", "replaceText", (hero.floor+1));componentAction ("floor-number-div-5", "removeClass", "tab-button-unactive");componentAction ("floor-number-text-5", "clearText", "");componentAction ("floor-number-text-1", "replaceText", (hero.floor-2)); componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));componentAction ("floor-number-text-3", "replaceText", hero.floor);componentAction ("floor-number-text-4", "replaceText", hero.floor+1);break; case setting.limitFloor:componentAction ("floor-number-div-4", "removeClass", "tab-button-unactive");componentAction ("floor-number-text-4", "clearText", "");componentAction ("floor-number-div-5", "removeClass", "tab-button-unactive");componentAction ("floor-number-text-5", "clearText", "");componentAction ("floor-number-text-1", "replaceText", (hero.floor-2)); componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));componentAction ("floor-number-text-3", "replaceText", hero.floor);break; default:componentAction ("floor-number-div-1", "removeClass", "d-none"); componentAction ("floor-number-div-2", "removeClass", "d-none");componentAction ("floor-number-div-4", "removeClass", "d-none"); componentAction ("floor-number-div-5", "removeClass", "d-none"); componentAction ("floor-number-div-1", "addClass", "tab-button-unactive"); componentAction ("floor-number-div-2", "addClass", "tab-button-unactive");componentAction ("floor-number-div-4", "addClass", "tab-button-unactive"); componentAction ("floor-number-div-5", "addClass", "tab-button-unactive"); componentAction ("floor-number-text-1", "replaceText", (hero.floor-2)); componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));componentAction ("floor-number-text-3", "replaceText", hero.floor);componentAction ("floor-number-text-4", "replaceText", hero.floor+1);componentAction ("floor-number-text-5", "replaceText", hero.floor+2);break;} }; var showDungeonArea = function(){hideAllContent();componentAction ("dungeon-div", "removeClass", "d-none");componentAction ("dungeon", "updateClass", "cursor-button,active"); }; var showBodyArea = function(){if(setting.heroAreaShow == 1 || hero.coin >= setting.unlockRequirementCoinForHero || hero.heroLevel > 1){setting.heroAreaShow = 1;componentAction ("body-area-div", "removeClass", "d-none");updateHeroLevel();componentAction ("level-hero-upgrade-multiplier", "replaceText", setting.levelUpgradeMultiplier);componentAction ("unlock-weapon-requirement", "replaceText", setting.unlockRequirementLevelForWeapon);}componentAction ("unlock-partner-requirement", "replaceText", partner[0].unlockReq); }; var showWeaponArea = function(){if(hero.weaponAreaShow == 1 || hero.heroLevel >= setting.unlockRequirementLevelForWeapon){componentAction ("weapon-unlock-div", "removeClass", "d-none");componentAction ("weapon-area-div", "removeClass", "d-none");componentAction ("weapon-unlock-div", "addClass", "d-none");hero.weaponAreaShow = 1;} }; var showPartnerArea = function(){ let openNewPartner = 0;let countPartner = 0;let partnerData;let prevPartnerName = '';if($("#partner-unlock-div").length) $("#partner-unlock-div").remove();for(let i = 0; i<partner.length; i++){ let unlockReqLevel = 0; let partnerLevel = 0; let partnerDPS = 0; let nextPartnerDPS = 0; let upgradeFee = 0; let upgradeText = ''; let upgradeMultiplier = ''; if(i == 0){ unlockReqLevel = hero.heroLevel; prevPartnerName = 'Hero'; }else{let prevPartnerId = i - 1;let unlockPartner = hero.unlockPartner.find(item => item.id === prevPartnerId);if(unlockPartner){ unlockReqLevel = unlockPartner.level;}prevPartnerName = partner[prevPartnerId].name; } if(unlockReqLevel >= partner[i].unlockReq){countPartner++;if( !$( "#partner-area-" + i ).length){ partnerData = partner.find(item => item.id === i); let unlockPartner = hero.unlockPartner.find(item => item.id === i); if(unlockPartner){ partnerDPS = unlockPartner.dps; partnerLevel = unlockPartner.level; nextPartnerDPS = calcNextPartnerDps(i); upgradeFee = updateUpgradeLevelFeePartner(i);upgradeText = 'Level Up x';upgradeMultiplier = setting.levelUpgradeMultiplier; }else{ nextPartnerDPS = partnerData.baseDps; upgradeFee = partnerData.basePrice;upgradeText = 'Unlock'; } openNewPartner = 1; let appendPartnerDiv = '<div id="partner-area-' + i + '" class="row border-top rounded-card">'; appendPartnerDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6">'; appendPartnerDiv += partnerData.name + ' Lv <span id="partner-level-' + i + '">' + partnerLevel + '</span>'; appendPartnerDiv += '</div>'; appendPartnerDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6">'; appendPartnerDiv += 'DPS : <span id="current-partner-dps-' + i + '">' + partnerDPS + '</span> (+<span id="next-partner-dps-' + i + '">' + nextPartnerDPS + '</span>)'; appendPartnerDiv += '</div>'; appendPartnerDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">'; appendPartnerDiv += '<button id="upgrade-partner-button-' + i + '" class="upgrade-level-button" value="' + i + '"><span id="upgrade-partner-text-' + i + '">' + upgradeText + '</span><span id="level-partner-upgrade-multiplier-' + i + '">' + upgradeMultiplier + '</span> - <span id="upgrade-partner-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin</button>'; appendPartnerDiv += '</div>'; appendPartnerDiv += '</div>'; $("#partner-area-div").append(appendPartnerDiv).on('click','#upgrade-partner-button-'+i,function(){ upgradeLevelPartner(this); });} }else{let appendPartnerDiv = '<div id="partner-unlock-div" class="rounded-card middle-align unlock-info">Unlock Partner at ' + prevPartnerName + ' level ' + partner[i].unlockReq + '</div>';$("#partner-area-div").append(appendPartnerDiv);i = partner.length; }}hero.countPartner = countPartner;if(openNewPartner == 1) updateTab("partner");if(setting.partnerAreaShow == 1){ componentAction ("partner-area-div", "removeClass", "d-none"); setting.partnerAreaShow = 1;} }; var showSkillArea = function(){let openNewSkill = 0;let countSkill = 0;let skillData;for(let i=0; i<skill.length; i++){ let skillLevel = 0; let skillDamage = 0; let nextSkillDamage = 0; let upgradeFee = 0; let upgradeText = ''; let upgradeMultiplier = ''; let styleDivBtnUseSkill = 'd-none'; let styleBtnUseSkill = 'skill-disabled'; let propBtnUseSkill = 'disabled'; let textBtnUseSkill = 'Use Skill - Ready To Use'; let unlockReqFloor = hero.maxFloor; if($("#skill-unlock-div").length) $("#skill-unlock-div").remove(); if(unlockReqFloor >= skill[i].unlockReqFloor){countSkill++;if( !$( "#skill-area-" + i ).length){ skillData = skill.find(item => item.id === i); let unlockSkillData = hero.unlockSkill.find(item => item.id === i); if(unlockSkillData){let damageSkill = new Decimal(unlockSkillData.damage).plus(artifactSkillDamage(i));let durationSkill = new Decimal(unlockSkillData.duration).plus(artifactSkillDuration(i));let cooldownSkill = new Decimal(unlockSkillData.cooldown).sub(artifactSkillCooldown(i)); propBtnUseSkill = ''; styleDivBtnUseSkill = '';styleBtnUseSkill = 'skill-active';if(unlockSkillData.isActive){ let pastDurationSkill = new Decimal(Math.floor((Date.now() - unlockSkillData.lastStartDatetime) / 1000)); let restDurationSkill = new Decimal(durationSkill).sub(pastDurationSkill); if(pastDurationSkill.lessThan(durationSkill)){ styleBtnUseSkill = 'skill-running'; propBtnUseSkill = ''; textBtnUseSkill = "Click to Stop - "+offlineTimeText(restDurationSkill); useSkill(i); }else{ unlockSkillData.isCooldown = true;unlockSkillData.lastCooldownDatetime = new Decimal(1000).mul(durationSkill).plus(unlockSkillData.lastStartDatetime);unlockSkillData.isActive = false;unlockSkillData.lastStartDatetime = 0; }}if(unlockSkillData.isCooldown){ let pastCooldownSkill = new Decimal(Math.floor((Date.now() - unlockSkillData.lastCooldownDatetime) / 1000)); let restCooldownSkill = new Decimal(cooldownSkill).sub(pastCooldownSkill); if(pastCooldownSkill.lessThan(cooldownSkill)){propBtnUseSkill = 'disabled';styleBtnUseSkill = 'skill-disabled'; textBtnUseSkill = "Cooldown Timer - "+offlineTimeText(restCooldownSkill); startCooldownSkill(i); }}skillDamage = damageSkill;skillLevel = unlockSkillData.level;nextSkillDamage = calcNextSkillDamage(i)-unlockSkillData.damage;upgradeFee = updateUpgradeLevelFeeSkill(i);upgradeText = 'Level Up x';upgradeMultiplier = setting.levelUpgradeMultiplier; }else{nextSkillDamage = skillData.baseDamage;upgradeFee = skillData.basePrice;upgradeText = 'Unlock'; } openNewSkill = 1; let appendSkillDiv = '<div id="skill-area-' + i + '" class="row border-top rounded-card">'; appendSkillDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6">'; appendSkillDiv += skillData.name + ' Lv <span id="skill-level-' + i + '">' + skillLevel + '</span>'; appendSkillDiv += '</div>'; appendSkillDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6">'; appendSkillDiv += '<span id="current-skill-damage-' + i + '">' + numberFormat(skillDamage) + '</span> <span id="next-skill-damage-' + i + '">'; if(skillLevel < skillData.maxLevel) appendSkillDiv += '(+' + nextSkillDamage + ')'; appendSkillDiv += '</span> <span id ="skill-desc-' + i + '">' + skillData.description + '</span>'; appendSkillDiv += '</div>'; appendSkillDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">'; if(skillLevel < skillData.maxLevel)appendSkillDiv += '<button id="upgrade-skill-button-' + i + '" class="upgrade-level-button" value="' + i + '"><span id="upgrade-skill-text-' + i + '">' + upgradeText + '</span><span id="level-skill-upgrade-multiplier-' + i + '">' + upgradeMultiplier + '</span> - <span id="upgrade-skill-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin</button>'; appendSkillDiv += '</div>'; appendSkillDiv += '</div>'; $("#skill-area-div").append(appendSkillDiv).on('click','#upgrade-skill-button-'+i,function(){upgradeLevelSkill(this); }); appendSkillDiv = '<div id="skill-use-div-' + i + '" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mt-2 ' + styleDivBtnUseSkill + '">'; appendSkillDiv += '<button id="use-skill-button-' + i + '" class="use-skill-button ' + styleBtnUseSkill + '" value="' + i + '" ' + propBtnUseSkill + '><span id ="skill-timer-desc-' + i + '">' + textBtnUseSkill + '</span></button>'; appendSkillDiv += '</div>'; $("#skill-area-"+i).append(appendSkillDiv).on('click','#use-skill-button-'+i,function(){useSkill(i); }); } }else{if(i+1 < skill.length){ let appendSkillDiv = '<div id="skill-unlock-div" class="rounded-card middle-align unlock-info">Unlock Next Skill at Floor ' + skill[i].unlockReqFloor + '</div>'; $("#skill-area-div").append(appendSkillDiv); i = skill.length;} }}hero.countSkill = countSkill;if(openNewSkill == 1) updateTab("skill");if(setting.skillAreaShow == 1){ componentAction ("skill-area-div", "removeClass", "d-none"); setting.skillAreaShow = 1;} }; var showShopArea = function(){if(setting.shopAreaShow == 1){ componentAction ("shop-area-div", "removeClass", "d-none"); setting.shopAreaShow = 1;} }; var showPrestigeArea = function(){if(hero.maxFloor >= setting.unlockReqFloorPrestige){ if(!$("#prestige-area-div").length){ let appendPrestigeDiv = '<div id="prestige-area-div" class="row border-top rounded-card prestige-button text-center">';appendPrestigeDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Prestige</div>';appendPrestigeDiv += '</div>';$("#hero-area-div").append(appendPrestigeDiv).on('click','#prestige-area-div',function(){ startPrestige(); }); } } }; var showArtifactArea = function(){let totalGainOrbs = new Decimal(hero.totalGainOrbs);componentAction ("total-orbs", "replaceText", numberFormat(hero.orbs));componentAction ("total-artifact-damage", "replaceText", numberFormat(hero.artifactDamagePercentage));if(artifact.length > hero.countArtifact) componentAction ("unlock-artifact-fee", "replaceText", numberFormat(calcNextUnlockArtifactFee())+" Orbs");else{ componentAction ("total-orbs-div", "removeClass", "pt-3"); componentAction ("unlock-artifact-text", "replaceText", "Maxed"); componentAction ("unlock-artifact-button", "addClass", "skill-disabled"); componentAction ("unlock-artifact-fee", "clearText", ""); $("#unlock-artifact-button").prop('disabled', true);}componentAction ("artifact-div", "removeClass", "d-none");componentAction ("artifact", "addClass", "active");componentAction ("artifact", "removeClass", "cursor-button");for(let i=0; i<hero.countArtifact; i++){ let unlockArtifact = hero.unlockArtifact[i]; let unlockArtifactId = unlockArtifact.id; let artifactData = artifact.find(item => item.id === unlockArtifactId); if( !$( "#artifact-area-" + unlockArtifactId ).length){let appendArtifactDiv = '<div id="artifact-area-' + unlockArtifactId + '" class="row border-top rounded-card">';appendArtifactDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-7 col-7">';appendArtifactDiv += '<span id="artifact-name-' + unlockArtifactId + '">' + artifactData.name + '</span> Lv <span id="artifact-level-' + unlockArtifactId + '">' + unlockArtifact.level + '</span>';appendArtifactDiv += '</div>';appendArtifactDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-5 col-5">';appendArtifactDiv += '<span id="artifact-calc-damage-' + unlockArtifactId + '">' + artifactData.calcDamage + '</span> <span id="artifact-damage-' + unlockArtifactId + '">' + numberFormat(unlockArtifact.damage) + '</span> <span id="artifact-desc-damage-' + unlockArtifactId + '">' + artifactData.descDamage + '</span>';appendArtifactDiv += '</div>';appendArtifactDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';appendArtifactDiv += '<span id="artifact-desc-' + unlockArtifactId + '">' + artifactData.description + ' ' + artifactData.baseDamage + artifactData.descDamage + ' / level</span>';appendArtifactDiv += '</div>'; appendArtifactDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';if(unlockArtifact.level < artifactData.maxLevel || artifactData.maxLevel == 0) appendArtifactDiv += '<button id="upgrade-artifact-button-' + unlockArtifactId + '" class="upgrade-level-button" value="' + unlockArtifactId + '"><span id="upgrade-artifact-fee-' + unlockArtifactId + '">Upgrade - ' + numberFormat(calcNextUpgradeArtifactFee(unlockArtifactId)) + ' Orbs</span></button>';else appendArtifactDiv += '<button id="upgrade-artifact-button-' + unlockArtifactId + '" class="upgrade-level-button" disabled><span id="upgrade-artifact-fee-' + unlockArtifactId + '">Maxed</span></button>';appendArtifactDiv += '</div>';appendArtifactDiv += '</div>';$("#artifact-area-div").append(appendArtifactDiv).on('click','#upgrade-artifact-button-'+unlockArtifactId,function(){ upgradeLevelArtifact(this); }); }else{componentAction ("artifact-level-"+unlockArtifactId, "replaceText", unlockArtifact.level);componentAction ("artifact-damage-"+unlockArtifactId, "replaceText", unlockArtifact.damage);if(unlockArtifact.level < artifactData.maxLevel || artifactData.maxLevel == 0) componentAction ("upgrade-artifact-fee-"+unlockArtifactId, "replaceText", "Upgrade - "+numberFormat(calcNextUpgradeArtifactFee(unlockArtifactId))+" Orbs");else{ componentAction ("upgrade-artifact-fee-"+unlockArtifactId, "replaceText", "Maxed"); $("#upgrade-artifact-button-"+unlockArtifactId).prop('disabled', true);} } } }; var showStatisticArea = function(){componentAction ("stat-first-datetime", "replaceText", dateFormat(hero.firstPlayDateTime));componentAction ("stat-online-duration", "replaceText", offlineTimeText(hero.totalOnlineDuration));componentAction ("stat-offline-duration", "replaceText", offlineTimeText(hero.totalOfflineDuration));componentAction ("stat-online-gain-coin", "replaceText", numberFormat(hero.totalGainCoin));componentAction ("stat-offline-gain-coin", "replaceText", numberFormat(hero.totalOfflineCoin));componentAction ("stat-spent-coin", "replaceText", numberFormat(hero.totalSpentCoin));componentAction ("stat-total-click", "replaceText", numberFormat(hero.totalClick));componentAction ("stat-highest-dpc", "replaceText", numberFormat(hero.highestDpc));componentAction ("stat-highest-dps", "replaceText", numberFormat(hero.highestDps));componentAction ("stat-highest-floor", "replaceText", numberFormat(hero.highestFloor));componentAction ("stat-total-prestige", "replaceText", numberFormat(hero.totalCountPrestige));componentAction ("stat-total-gain-orbs", "replaceText", numberFormat(hero.totalGainOrbs));componentAction ("stat-total-spent-orbs", "replaceText", numberFormat(hero.totalSpentOrbs));componentAction ("stat-total-artifact-unlock", "replaceText", numberFormat(hero.totalArtifactUnlock));componentAction ("stat-highest-hero-level", "replaceText", numberFormat(hero.highestHeroLevel));componentAction ("stat-highest-weapon-level", "replaceText", numberFormat(hero.highestWeaponLevel));componentAction ("stat-highest-partner-count", "replaceText", numberFormat(hero.highestPartnerUnlock));componentAction ("stat-highest-partner-level", "replaceText", numberFormat(hero.highestPartnerLevel));componentAction ("stat-total-partner-level", "replaceText", numberFormat(hero.totalPartnerLevel)); }; var showTutorialArea = function(){hideAllContent();componentAction ("tutorial-div", "removeClass", "d-none");componentAction ("tutorial", "updateClass", "cursor-button,active");switchTutorPage(1); }; var startDpsInterval = function(){let newDpsInterval = new Decimal(1000).sub(hero.bonusIntervalDps);dpsInterval = setInterval(function() { let totalDps = new Decimal(calcTotalDps()); let maxHpEnemy = new Decimal(enemy.maxHp); currentEnemyHP = currentEnemyHP.sub(totalDps); let newHPBarWidth = new Decimal(currentEnemyHP).div(maxHpEnemy).mul(100); componentAction ("current-enemy-hp", "replaceText", numberFormat(currentEnemyHP)); componentAction ("progress-bar", "animate", newHPBarWidth); checkAction();},newDpsInterval); }; var startAutoClickerInterval = function (skillId){let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));let totalSkillDamage = new Decimal(unlockSkill.damage).plus(artifactSkillDamage(skillId));let intervalSkill = new Decimal(1000).div(totalSkillDamage).floor();if(autoClickerInterval || autoClickerDuration){ autoClickerInterval = clearInterval(autoClickerInterval); autoClickerDuration = clearInterval(autoClickerDuration); unlockSkill.lastStartDatetime = 0; unlockSkill.isActive = false; unlockSkill.lastCooldownDatetime = Date.now(); unlockSkill.isCooldown = true; startCooldownSkill(skillId);}else{ if(unlockSkill.lastStartDatetime == 0){ unlockSkill.lastStartDatetime = Date.now();unlockSkill.isActive = true; }else{totalDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000)); } componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running"); componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill)); totalDurationSkill = totalDurationSkill.sub(1); hitDPC(); autoClickerDuration = setInterval (function (){componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill));totalDurationSkill = totalDurationSkill.sub(1); if(totalDurationSkill.lessThan(0)){ autoClickerDuration = clearInterval(autoClickerDuration); autoClickerInterval = clearInterval(autoClickerInterval); startCooldownSkill(skillId);} },1000); autoClickerInterval = setInterval(function() {hitDPC(); },intervalSkill);} }; var startPowerShotInterval = function (skillId) {let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));if(powerShotDuration){ powerShotDuration = clearInterval(powerShotDuration); unlockSkill.lastStartDatetime = 0; unlockSkill.isActive = false; unlockSkill.lastCooldownDatetime = Date.now(); unlockSkill.isCooldown = true; startCooldownSkill(skillId);}else{ if(unlockSkill.lastStartDatetime == 0){ unlockSkill.lastStartDatetime = Date.now();unlockSkill.isActive = true; }else{totalDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000)); } componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running"); componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill)); totalDurationSkill = totalDurationSkill.sub(1); powerShotDuration = setInterval (function (){ componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill));totalDurationSkill = totalDurationSkill.sub(1); if(totalDurationSkill.lessThan(0)){ powerShotDuration = clearInterval(powerShotDuration); startCooldownSkill(skillId); initDisplay();} },1000); initDisplay();} }; var startSpecialForceInterval = function (skillId) {let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));if(specialForceDuration){ specialForceDuration = clearInterval(specialForceDuration); unlockSkill.lastStartDatetime = 0; unlockSkill.isActive = false; unlockSkill.lastCooldownDatetime = Date.now(); unlockSkill.isCooldown = true; startCooldownSkill(skillId);}else{ if(unlockSkill.lastStartDatetime == 0){ unlockSkill.lastStartDatetime = Date.now();unlockSkill.isActive = true; }else{totalDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000)); } componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running"); componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill)); totalDurationSkill = totalDurationSkill.sub(1); specialForceDuration = setInterval (function (){ componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill));totalDurationSkill = totalDurationSkill.sub(1); if(totalDurationSkill.lessThan(0)){ specialForceDuration = clearInterval(specialForceDuration); startCooldownSkill(skillId); initDisplay();} },1000); initDisplay();} }; var startLuckyCoinInterval = function (skillId) {let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));let totalCooldownSkill = unlockSkill.cooldown;let skillTimer = 0;if(luckyCoinDuration){ luckyCoinDuration = clearInterval(luckyCoinDuration); unlockSkill.lastStartDatetime = 0; unlockSkill.isActive = false; unlockSkill.lastCooldownDatetime = Date.now(); unlockSkill.isCooldown = true; startCooldownSkill(skillId);}else{ if(unlockSkill.lastStartDatetime == 0){ unlockSkill.lastStartDatetime = Date.now();unlockSkill.isActive = true; }else{totalDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000)); } componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running"); componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill)); totalDurationSkill = totalDurationSkill.sub(1); luckyCoinDuration = setInterval (function (){ componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill));totalDurationSkill = totalDurationSkill.sub(1); if(totalDurationSkill.lessThan(0)){ luckyCoinDuration = clearInterval(luckyCoinDuration); startCooldownSkill(skillId); initDisplay();} },1000);} }; var startGrimReaperInterval = function (skillId){let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));let totalCooldownSkill = unlockSkill.cooldown;let newGrimReaperInterval = new Decimal(2000).sub(hero.bonusIntervalGrimReaper);if(grimReaperInterval || grimReaperDuration){ grimReaperInterval = clearInterval(grimReaperInterval); grimReaperDuration = clearInterval(grimReaperDuration); unlockSkill.lastStartDatetime = 0; unlockSkill.isActive = false; unlockSkill.lastCooldownDatetime = Date.now(); unlockSkill.isCooldown = true; startCooldownSkill(skillId);}else{ if(unlockSkill.lastStartDatetime == 0){ unlockSkill.lastStartDatetime = Date.now();unlockSkill.isActive = true; }else{totalDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000)); } componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running"); componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill)); totalDurationSkill = totalDurationSkill.sub(1); runGrimReaper(skillId); grimReaperDuration = setInterval (function (){ componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(totalDurationSkill));totalDurationSkill = totalDurationSkill.sub(1); if(totalDurationSkill.lessThan(0)){ grimReaperDuration = clearInterval(grimReaperDuration); grimReaperInterval = clearInterval(grimReaperInterval); startCooldownSkill(skillId);} },1000); grimReaperInterval = setInterval(function() {runGrimReaper(skillId); },newGrimReaperInterval);} }; var startCooldownSkill = function (skillId) {let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let totalCooldownSkill = new Decimal(unlockSkill.cooldown).sub(artifactSkillCooldown(skillId));let cooldownTimer = 0;unlockSkill.lastStartDatetime = 0;unlockSkill.isActive = false;if(unlockSkill.lastCooldownDatetime == 0){ unlockSkill.lastCooldownDatetime = Date.now(); unlockSkill.isCooldown = true; cooldownTimer = new Decimal(totalCooldownSkill);}else{ cooldownTimer = new Decimal(totalCooldownSkill).sub(Math.floor((Date.now()-unlockSkill.lastCooldownDatetime) / 1000));}$("#use-skill-button-"+skillId).prop('disabled', true);componentAction ("skill-timer-desc-"+skillId, "replaceText", "Cooldown Timer - "+offlineTimeText(cooldownTimer));componentAction ("use-skill-button-"+skillId, "updateClass", "skill-running,skill-disabled");cooldownTimer = cooldownTimer.sub(1);let skillCooldown = setInterval(function() { componentAction ("skill-timer-desc-"+skillId, "replaceText", "Cooldown Timer - "+offlineTimeText(cooldownTimer)); cooldownTimer = cooldownTimer.sub(1); if(cooldownTimer.lessThan(0)){let removeIndex = skillCooldownInterval.map(function(item) { return item.id; }).indexOf(skillId);skillCooldownInterval.splice(removeIndex, 1);skillCooldown = clearInterval(skillCooldown);unlockSkill.lastCooldownDatetime = 0;unlockSkill.isCooldown = false;$("#use-skill-button-"+skillId).prop('disabled', false);componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-active");componentAction ("skill-timer-desc-"+skillId, "replaceText", "Use Skill - Ready To Use"); } },1000);let newObjInterval = { id: skillId, lastUse: Date.now(), cooldown: unlockSkill.cooldown, interval: skillCooldown};skillCooldownInterval.push(newObjInterval); }; var artifactSkillDamage = function(skillId){let bonusArtifactSkillDamage;switch(skillId){ case 0:bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 12);break; case 1:bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 15);break; case 2:bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 18);break; case 3:bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 21);break; case 4:bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 24);break;}if(bonusArtifactSkillDamage) return new Decimal(bonusArtifactSkillDamage.damage);else return new Decimal(0); }; var artifactSkillDuration = function(skillId){let bonusArtifactSkillDuration;switch(skillId){ case 0:bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 13);break; case 1:bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 16);break; case 2:bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 19);break; case 3:bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 22);break; case 4:bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 25);break;}if(bonusArtifactSkillDuration) return new Decimal(bonusArtifactSkillDuration.damage);else return new Decimal(0); }; var artifactSkillCooldown = function(skillId){let bonusArtifactSkillCooldown;switch(skillId){ case 0:bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 14);break; case 1:bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 17);break; case 2:bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 20);break; case 3:bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 23);break; case 4:bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 26);break;}if(bonusArtifactSkillCooldown) return new Decimal(bonusArtifactSkillCooldown.damage);else return new Decimal(0); }; var startPrestige = function(){if(hero.maxFloor >= setting.unlockReqFloorPrestige){ let totalOrbs = new Decimal(calcTotalOrbs()); let textOrbs = "Orb"; if(totalOrbs > 1) textOrbs = "Orbs"; componentAction ("prestige-text-confirm", "replaceText", numberFormat(totalOrbs)+" "+textOrbs); $("#modalPrestigeConfirm").modal('show');} }; var runPrestige = function(){if(hero.maxFloor >= setting.unlockReqFloorPrestige){ let totalOrbs = new Decimal(calcTotalOrbs()); let textOrbs = "Orb"; let totalGainOrbs = new Decimal(hero.totalGainOrbs); hero.orbs = new Decimal(hero.orbs).plus(totalOrbs); hero.lastPrestigeDatetime = Date.now(); hero.lastPrestigeOrbs = totalOrbs; hero.lastPrestigeShow = false; totalGainOrbs = totalGainOrbs.plus(totalOrbs); hero.totalGainOrbs = totalGainOrbs; resetGame(); saveGame(); location.reload();} }; var upgradeLevelHero = function (){let upgradeFee = updateUpgradeLevelFeeHero();let heroCoin = new Decimal(hero.coin);if(heroCoin.greaterThanOrEqualTo(upgradeFee)){ let heroDPC = new Decimal(hero.dpc); let totalSpentCoin = new Decimal(hero.totalSpentCoin); heroCoin = heroCoin.sub(upgradeFee); hero.coin = heroCoin; totalSpentCoin = totalSpentCoin.plus(upgradeFee); hero.totalSpentCoin = totalSpentCoin; heroDPC = heroDPC.plus(calcNextHeroDpc()); hero.dpc = heroDPC; hero.heroLevel += setting.levelUpgradeMultiplier; if(hero.highestHeroLevel < hero.heroLevel) hero.highestHeroLevel = hero.heroLevel; initDisplay();} }; var upgradeLevelWeapon = function (){let upgradeFee = updateUpgradeLevelFeeWeapon();let heroCoin = new Decimal(hero.coin); if(heroCoin.greaterThanOrEqualTo(upgradeFee)){ let weaponDpc = new Decimal(hero.weaponDpc); let totalSpentCoin = new Decimal(hero.totalSpentCoin); heroCoin = heroCoin.sub(upgradeFee); hero.coin = heroCoin; totalSpentCoin = totalSpentCoin.plus(upgradeFee); hero.totalSpentCoin = totalSpentCoin; weaponDpc = weaponDpc.plus(calcNextWeaponDpc()); hero.weaponDpc = weaponDpc; if(hero.weaponLevel == 0) hero.weaponLevel += 1; else hero.weaponLevel += setting.levelUpgradeMultiplier; if(hero.highestWeaponLevel < hero.weaponLevel) hero.highestWeaponLevel = hero.weaponLevel; initDisplay();} }; var upgradeLevelPartner = function(e){if(e){ let partnerId = parseInt(e.value,10); let upgradeFee = updateUpgradeLevelFeePartner(partnerId); let heroCoin = new Decimal(hero.coin); if(heroCoin.greaterThanOrEqualTo(upgradeFee)){let partnerDps = new Decimal(hero.dps);let nextDps = new Decimal(calcNextPartnerDps(partnerId));let totalSpentCoin = new Decimal(hero.totalSpentCoin);heroCoin = heroCoin.sub(upgradeFee); hero.coin = heroCoin;totalSpentCoin = totalSpentCoin.plus(upgradeFee); hero.totalSpentCoin = totalSpentCoin; partnerDps = partnerDps.plus(nextDps); hero.dps = partnerDps; let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);let partnerData = partner.find(item => item.id === partnerId);if(unlockPartner){ let unlockPartnerDps = new Decimal(unlockPartner.dps); unlockPartner.level += setting.levelUpgradeMultiplier; if(hero.highestPartnerLevel < unlockPartner.level) hero.highestPartnerLevel = unlockPartner.level; unlockPartnerDps = unlockPartnerDps.plus(nextDps); unlockPartner.dps = unlockPartnerDps;}else{ let newObjPartner = {id: partnerId,level: 1,dps: nextDps }; hero.unlockPartner.push(newObjPartner);} initDisplay(); }} }; var upgradeLevelSkill = function (e) {if(e){ let skillId = parseInt(e.value,10); let currentSkillLevel = 0; let unlockSkill = hero.unlockSkill.find(item => item.id === skillId); if(unlockSkill){currentSkillLevel = unlockSkill.level; } if(currentSkillLevel < 10){let upgradeFee = updateUpgradeLevelFeeSkill(skillId); let heroCoin = new Decimal(hero.coin);let skillDamage = 0; if(heroCoin.greaterThanOrEqualTo(upgradeFee)){ let nextDamage = calcNextSkillDamage(skillId); let skillData = skill.find(item => item.id === skillId); let totalSpentCoin = new Decimal(hero.totalSpentCoin); heroCoin = heroCoin.sub(upgradeFee); hero.coin = heroCoin; totalSpentCoin = totalSpentCoin.plus(upgradeFee); hero.totalSpentCoin = totalSpentCoin; if(unlockSkill){let unlockSkillDamage = new Decimal(unlockSkill.damage);unlockSkill.level += setting.levelUpgradeMultiplier; unlockSkill.damage = nextDamage; }else{let newObjSkill = { id: skillId, level: 1, damage: nextDamage, duration: skillData.baseDuration, cooldown: skillData.baseCooldown, isActive: false, lastStartDatetime: 0, isCooldown: false, lastCooldownDatetime: 0};hero.unlockSkill.push(newObjSkill); } initDisplay(); } }} }; var upgradeLevelArtifact = function (e){if(e){ let artifactId = parseInt(e.value,10); let upgradeFee = new Decimal(calcNextUpgradeArtifactFee(artifactId)); let heroOrbs = new Decimal(hero.orbs); let weaponDpc = new Decimal(hero.weaponDpc); if(heroOrbs.greaterThanOrEqualTo(upgradeFee)){let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId);let artifactData = artifact.find(item => item.id === artifactId);let artifactDamage = new Decimal(hero.artifactDamagePercentage);if(unlockArtifact){ if(unlockArtifact.level < artifactData.maxLevel || artifactData.maxLevel == 0){let totalSpentOrbs = new Decimal(hero.totalSpentOrbs); heroOrbs = heroOrbs.sub(upgradeFee); hero.orbs = heroOrbs;totalSpentOrbs = totalSpentOrbs.plus(upgradeFee);hero.totalSpentOrbs = totalSpentOrbs; unlockArtifact.level++; unlockArtifact.damage = new Decimal(unlockArtifact.level).mul(artifactData.baseDamage); hero.artifactDamagePercentage = artifactDamage.plus(artifactData.tier*5);calculateAllArtifactDamage(); saveGame(); initDisplay(); showArtifactArea(); }} }} }; var calcTotalDpc = function () {let unlockSkill = hero.unlockSkill.find(item => item.id === 1); let baseDpc = new Decimal(hero.dpc).plus(hero.weaponDpc);let subTotalPercentage = new Decimal(100).plus(hero.bonusDpcPercentage).plus(hero.artifactDamagePercentage);let totalPercentage = new Decimal(100).plus(hero.bonusShopDpcPercentage).mul(subTotalPercentage).div(10000);let totalDpc = new Decimal(baseDpc).mul(totalPercentage);if(unlockSkill){ if(unlockSkill.isActive){let totalDurationSkill = Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000);if(totalDurationSkill < unlockSkill.duration){ totalDpc = totalDpc.mul(100+unlockSkill.damage).div(100).round();}else{ unlockSkill.isCooldown = true; unlockSkill.lastCooldownDatetime = unlockSkill.lastStartDatetime + (unlockSkill.duration * 1000); unlockSkill.isActive = false; unlockSkill.lastStartDatetime = 0;} }}return totalDpc.round(); }; var calcTotalDps = function () {let skillId = 2;let unlockSkill = hero.unlockSkill.find(item => item.id === skillId); let baseDps = new Decimal(hero.dps);let subTotalPercentage = new Decimal(100).plus(hero.bonusDpsPercentage).plus(hero.artifactDamagePercentage);let totalPercentage = new Decimal(100).plus(hero.bonusShopDpsPercentage).mul(subTotalPercentage).div(10000);let totalDps = new Decimal(baseDps).mul(totalPercentage);if(unlockSkill){ if(unlockSkill.isActive){let totalDurationSkill = new Decimal(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));let totalDuration = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));if(totalDurationSkill.lessThan(totalDuration)){ let totalDamagePercentage = new Decimal(100).plus(unlockSkill.damage).plus(artifactSkillDamage(skillId)).div(100); totalDps = totalDps.mul(totalDamagePercentage).round(); }else{ unlockSkill.isCooldown = true; unlockSkill.lastCooldownDatetime = unlockSkill.lastStartDatetime + (totalDuration * 1000); unlockSkill.isActive = false; unlockSkill.lastStartDatetime = 0;} }}return totalDps.round(); }; var calcTotalRewardCoin = function (isOnline=true) {let subTotalPercentage;let rewardCoin = new Decimal(hero.floor).div(3).mul(enemy.baseCoin);let unlockSkill = hero.unlockSkill.find(item => item.id === 3); if(isOnline) subTotalPercentage = new Decimal(100).plus(hero.bonusCoinPercentage).plus(hero.artifactDamagePercentage);else subTotalPercentage = new Decimal(100).plus(hero.bonusOfflineCoinPercentage).plus(hero.artifactDamagePercentage);let totalPercentage = new Decimal(100).plus(hero.bonusShopCoinPercentage).mul(subTotalPercentage).div(10000);let totalRewardCoin = new Decimal(rewardCoin).mul(totalPercentage);if(unlockSkill){ if(unlockSkill.isActive){let totalDurationSkill = Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000);if(totalDurationSkill < unlockSkill.duration){ totalRewardCoin = totalRewardCoin.mul(100+unlockSkill.damage).div(100).round();}else{ unlockSkill.isCooldown = true; unlockSkill.lastCooldownDatetime = unlockSkill.lastStartDatetime + (unlockSkill.duration * 1000); unlockSkill.isActive = false; unlockSkill.lastStartDatetime = 0;} }}return totalRewardCoin.ceil(); }; var calcTotalOrbs = function (){let baseOrbs = new Decimal(((hero.maxFloor - setting.unlockReqFloorPrestige)/setting.prestigeFloorBonus)+(setting.baseGainOrbsCalculation)).pow(setting.orbsMultiplier);let partnerOrbs = new Decimal(calcTotalPartnerLevel()).div(setting.prestigePartnerLevelBonus);let subTotalPercentage = new Decimal(100).plus(hero.bonusOrbsPercentage);let totalPercentage = new Decimal(100).plus(hero.bonusShopOrbsPercentage).mul(subTotalPercentage).div(10000);let totalOrbs = baseOrbs.plus(partnerOrbs).mul(totalPercentage);return totalOrbs.floor(); }; var calcTotalPartnerLevel = function (){let totalLevel = 0;for(let i=0;i<hero.unlockPartner.length;i++){ totalLevel += hero.unlockPartner[i].level;}return totalLevel; }; var calcNextUnlockArtifactFee = function(){let unlockFee = new Decimal(hero.countArtifact+1).mul(Math.pow(setting.unlockArtifactMultiplier,(hero.countArtifact+1))).floor();return unlockFee; }; var calcNextUpgradeArtifactFee = function(artifactId){let upgradeArtifact = hero.unlockArtifact.find(item => item.id === artifactId);let artifactData = artifact.find(item => item.id === artifactId);let upgradeFee = 0;if(upgradeArtifact){ upgradeFee = new Decimal(setting.upgradeArtifactBaseTier + (artifactData.tier*setting.upgradeArtifactTierMultiplier)).mul(Math.pow((setting.upgradeArtifactMultiplier*artifactData.upgradeMultiplier),(upgradeArtifact.level+1))).round();}return upgradeFee; }; var calcOfflineTime = function () {let onDateTime = Date.now();let offlineTime = new Decimal(onDateTime).sub(hero.lastActiveDatetime).div(1000).floor();let offlineDpsPercentage = new Decimal(hero.bonusOfflineDpsPercentage).plus(100).div(100);let offlineCoinPercentage = new Decimal(hero.bonusOfflineCoinPercentage).plus(100).div(100);let heroDps = new Decimal(hero.dps).mul(offlineDpsPercentage);let totalOfflineTimeLimit = new Decimal(setting.baseOfflineTimeLimit).plus(hero.bonusOfflineTimeLimit).mul(60);let offlineTimeReward = offlineTime;if(offlineTime.greaterThan(totalOfflineTimeLimit)) offlineTimeReward = totalOfflineTimeLimit;if(heroDps.greaterThan(0)){ if(hero.floor % enemy.bossFloor == 0) hero.floor--; hero.totalOfflineDuration = new Decimal(hero.totalOfflineDuration).plus(offlineTimeReward); let enemyHP = initEnemy(); let rewardCoin = new Decimal(calcTotalRewardCoin(false)).mul(offlineCoinPercentage).ceil(); let killingTime = new Decimal(enemyHP).div(heroDps).ceil(); let killingCount = new Decimal(offlineTimeReward).div(killingTime).floor(); let totalRewardCoin = new Decimal(rewardCoin).mul(killingCount); hero.coin = new Decimal(hero.coin).plus(totalRewardCoin); hero.totalOfflineCoin = new Decimal(hero.totalOfflineCoin).plus(totalRewardCoin); let enemyText = (killingCount > 1? " Enemies": " Enemy"); let totalRewardCoinText = (totalRewardCoin.greaterThan(1)? " Coins": " Coin"); let offlineText = "Welcome Back "+hero.userName+"\n"; offlineText += "You are offline for "+offlineTimeText(offlineTime)+"\n"; if(offlineTimeReward.lessThan(offlineTime)) offlineText += "Max offline reward "+offlineTimeText(offlineTimeReward)+"\n"; offlineText += "You are killing "+killingCount+enemyText+"\n"; offlineText += "And you got "+numberFormat(totalRewardCoin)+totalRewardCoinText+"\n"; componentAction ("offline-text", "replaceText", offlineText); $("#modalOfflineForm").modal('show');} }; var offlineTimeText = function (offlineSecond) {let offlineYear = Math.floor(offlineSecond / 31104000);let offlineMonth = Math.floor((offlineSecond - (offlineYear*31104000)) / 2592000);let offlineDay = Math.floor((offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000)) / 86400);let offlineHour = Math.floor((offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000) - (offlineDay*86400)) / 3600);let offlineMin = Math.floor((offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000) - (offlineDay*86400) - (offlineHour*3600)) / 60);let offlineSec = Math.floor(offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000) - (offlineDay*86400) - (offlineHour*3600) - (offlineMin * 60));let timerText = "";if(offlineSecond >= 31104000) timerText += offlineYear+" Year ";if(offlineSecond >= 2592000) timerText += offlineMonth+" Month ";if(offlineSecond >= 86400 && offlineYear == 0) timerText += offlineDay+" Day ";if(offlineSecond >= 3600 && offlineMonth == 0) timerText += offlineHour+" Hour ";if(offlineSecond >= 60 && offlineDay == 0) timerText += offlineMin+" Min ";if(offlineHour == 0)timerText += offlineSec+" Sec";return timerText; }; var calcNextHeroDpc = function (){let totalNextHeroDpc = new Decimal(0);for(let a=0; a<setting.levelUpgradeMultiplier; a++){ let nextHeroDpc = new Decimal(hero.heroLevel + a + 1).div(setting.heroDpcMultiplier).ceil(); totalNextHeroDpc = totalNextHeroDpc.plus(nextHeroDpc); if((hero.heroLevel + a + 1) / 10 == 1 || (hero.heroLevel + a + 1) % 25 == 0){totalNextHeroDpc = totalNextHeroDpc.plus(hero.heroLevel + a + 1); }}return totalNextHeroDpc.ceil(); }; var calcNextWeaponDpc = function (){let totalNextWeaponDpc = new Decimal(0);let loopNextLevel = 0;if(hero.weaponLevel == 0) loopNextLevel = 1; else loopNextLevel = setting.levelUpgradeMultiplier;for(let a=0; a<loopNextLevel; a++){ let nextWeaponDpc = new Decimal(hero.weaponLevel + a + 1).div(setting.weaponDpcMultiplier).ceil().mul(setting.baseWeaponDpc); totalNextWeaponDpc = totalNextWeaponDpc.plus(nextWeaponDpc); if((hero.weaponLevel + a + 1) / 10 == 1 || (hero.weaponLevel + a + 1) % 25 == 0){totalNextWeaponDpc = totalNextWeaponDpc.plus(hero.weaponLevel + a + 1).mul(1.5); }}return totalNextWeaponDpc.ceil(); }; var calcNextPartnerDps = function (partnerId){let totalNextPartnerDps = new Decimal(0);let loopNextLevel = 0;let currentPartnerLevel = 0;let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);let partnerData = partner.find(item => item.id === partnerId);if(unlockPartner){loopNextLevel = setting.levelUpgradeMultiplier;currentPartnerLevel = unlockPartner.level; }else loopNextLevel = 1;for(let a=0; a<loopNextLevel; a++){ let nextPartnerDps = new Decimal(currentPartnerLevel + a + 1).div(setting.partnerDpsMultiplier).ceil().mul(partnerData.baseDps); totalNextPartnerDps = totalNextPartnerDps.plus(nextPartnerDps); if((currentPartnerLevel + a + 1) / 10 == 1 || (currentPartnerLevel + a + 1) % 25 == 0){totalNextPartnerDps = totalNextPartnerDps.plus(currentPartnerLevel + a + 1).mul(1.5); }}return totalNextPartnerDps.ceil(); }; var calcNextSkillDamage = function (skillId){let nextSkillDamage = new Decimal(0);let loopNextLevel = 0;let currentSkillLevel = 0;let nextSkillLevel = 0;let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let skillData = skill.find(item => item.id === skillId);if(unlockSkill){loopNextLevel = setting.levelUpgradeMultiplier;currentSkillLevel = unlockSkill.level; }else loopNextLevel = 1;nextSkillLevel = currentSkillLevel + loopNextLevel;if(nextSkillLevel >= 10) nextSkillDamage = (10 * skillData.damageMultiplier) + skillData.baseDamage;else nextSkillDamage = ((nextSkillLevel-1) * skillData.damageMultiplier) + skillData.baseDamage;return nextSkillDamage; }; var updateTab = function(menuName){let tabName = '';componentAction ("hero-tab-button", "updateClass", "tab-button-active,tab-button-unactive");componentAction ("partner-tab-button", "updateClass", "tab-button-active,tab-button-unactive");componentAction ("skill-tab-button", "updateClass", "tab-button-active,tab-button-unactive");componentAction ("shop-tab-button", "updateClass", "tab-button-active,tab-button-unactive");componentAction ("hero-area-div", "addClass", "d-none");componentAction ("partner-area-div", "addClass", "d-none");componentAction ("skill-area-div", "addClass", "d-none");componentAction ("shop-area-div", "addClass", "d-none");switch (menuName) { case 'hero': tabName = "hero-tab-button";break; case 'partner': tabName = "partner-tab-button";break; case 'skill': tabName = "skill-tab-button";break; case 'shop': tabName = "shop-tab-button";break;};componentAction (tabName, "updateClass", "tab-button-unactive,tab-button-active");componentAction (menuName+"-area-div", "removeClass", "d-none"); }; var clickDPC = function() {let start = Date.now();let diffMiliSec = start - lastDateTimeClick;if(diffMiliSec > 70){ lastDateTimeClick = start; hero.totalClick = new Decimal(hero.totalClick).plus(1); if(hero.fastestClickInterval > diffMiliSec) hero.fastestClickInterval = diffMiliSec; hitDPC();}; }; var hitDPC = function (){let maxHpEnemy = new Decimal(enemy.maxHp);if(setting.cheat == 1) currentEnemyHP = new Decimal(0);else{let totalDPC = new Decimal(calcTotalDpc());currentEnemyHP = currentEnemyHP.sub(totalDPC);}let newHPBarWidth = new Decimal(currentEnemyHP).div(maxHpEnemy).mul(100);componentAction ("current-enemy-hp", "replaceText", numberFormat(currentEnemyHP));componentAction ("progress-bar", "animate", newHPBarWidth);checkAction(); }; var runGrimReaper = function (skillId) {let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);let maxHpEnemy = new Decimal(enemy.maxHp);let skillDamage = unlockSkill.damage;let randomPercentage = Math.random()*100;if(hero.floor % enemy.bossFloor == 0){ skillDamage -= 10;}if(randomPercentage <= skillDamage){ currentEnemyHP = new Decimal(0);}else{ let totalDamage = new Decimal(calcTotalDpc()).plus(calcTotalDps()).mul(2).floor(); currentEnemyHP = currentEnemyHP.sub(totalDamage);}let newHPBarWidth = new Decimal(currentEnemyHP).div(maxHpEnemy).mul(100);componentAction ("current-enemy-hp", "replaceText", numberFormat(currentEnemyHP));componentAction ("progress-bar", "animate", newHPBarWidth);checkAction(); }; var useSkill = function (skillId){switch(skillId){ case 0: startAutoClickerInterval(skillId);break; case 1: startPowerShotInterval(skillId);break; case 2: startSpecialForceInterval(skillId);break; case 3: startLuckyCoinInterval(skillId);break; case 4: startGrimReaperInterval(skillId);break;}; }; var insertAvailableArtifact = function(){if(availableArtifact.length > 0) availableArtifact = [];for(let i=0;i < artifact.length; i++){ let artifactId = artifact[i].id; let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId); if(!unlockArtifact){let artifactChance = 5 - artifact[i].tier;for(let j=0; j<artifactChance; j++){ availableArtifact.push(artifactId);} }} }; var insertAvailableArtifactForDebug = function(artifactArray){let artifactArrayId = artifactArray.split(",");if(availableArtifact.length > 0) availableArtifact = [];for(let i=0; i<artifactArrayId.length; i++){ let artifactId = parseInt(artifactArrayId[i],10); let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId); if(!unlockArtifact){let artifactChance = 5 - artifact[i].tier;for(let j=0; j<artifactChance; j++){ availableArtifact.push(artifactId);} }} }; var unlockNewArtifact = function(){let unlockFee = new Decimal(calcNextUnlockArtifactFee());let heroOrbs = new Decimal(hero.orbs);let artifactDamage = new Decimal(hero.artifactDamagePercentage);if(heroOrbs.greaterThanOrEqualTo(unlockFee)){ if(availableArtifact.length > 0){ let unlockArtifactId = availableArtifact[Math.floor(Math.random() * availableArtifact.length)]; let artifactData = artifact.find(item => item.id === unlockArtifactId); let newObjArtifact = { id: unlockArtifactId, level: 1, grade: 0, damage: artifactData.baseDamage }; hero.unlockArtifact.push(newObjArtifact); hero.countArtifact++;hero.artifactDamagePercentage = artifactDamage.plus(artifactData.tier*5); removeArtifactId(unlockArtifactId);hero.orbs = heroOrbs.sub(unlockFee);calculateAllArtifactDamage();saveGame();initDisplay(); showArtifactArea(); }} }; var removeArtifactId = function(unlockArtifactId){let unlockIndex = availableArtifact.indexOf(unlockArtifactId);if (unlockIndex > -1) { availableArtifact.splice(unlockIndex, 1); removeArtifactId(unlockArtifactId);} }; var hideAllContent = function(){componentAction ("profile-div", "addClass", "d-none");componentAction ("statistic-div", "addClass", "d-none");componentAction ("dungeon-div", "addClass", "d-none");componentAction ("artifact-div", "addClass", "d-none");componentAction ("tutorial-div", "addClass", "d-none");componentAction ("profile", "updateClass", "active,cursor-button");componentAction ("statistic", "updateClass", "active,cursor-button");componentAction ("dungeon", "updateClass", "active,cursor-button");componentAction ("artifact", "updateClass", "active,cursor-button");componentAction ("tutorial", "updateClass", "active,cursor-button"); }; var switchTutorPage = function(tutorNumber){componentAction ("tutor-content-div-"+tutorNumber, "removeClass", "d-none");if(activeTutorNumber != tutorNumber) componentAction ("tutor-content-div-"+activeTutorNumber, "addClass", "d-none");componentAction ("tutor-div-"+activeTutorNumber, "updateClass", "tab-button-active,tab-button-unactive");componentAction ("tutor-div-"+tutorNumber, "updateClass", "tab-button-unactive,tab-button-active");activeTutorNumber = tutorNumber; }; var numberFormat = function(x) {let value = new Decimal(x);if(value.greaterThan(9999)) return value.toPrecision(3).toString();else return roundFormat(value,2); }; var roundFormat = function(value, decimals) {return Number(Math.round(value+'e'+decimals)+'e-'+decimals).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","); }; var alphaNumericSpaceFormat = function(value){var reg_exp = /^[A-Za-z0-9 ]+$/;var is_valid = reg_exp.test(String.fromCharCode(value));return is_valid; }; var dateFormat = function(milliseconds){let dateObject = new Date(milliseconds);let humanDateFormat = dateObject.toLocaleString();return humanDateFormat; }; initGame(); $("#dpc-button").on('click', function(e) {clickDPC(); }); $("#auto-progress-switch").on('click', function() { setting.autoProgress = $("#auto-progress-switch").prop("checked"); }); $("#play-button").on('click', function() { let userID = $("#user-id").val();let userName = $("#user-name").val();if(userName != ""){ hero.userId = userID; hero.userName = userName; hero.firstPlayDateTime = Date.now(), hero.firstGameVersion = setting.gameVersion, initGame(); $("#modalLoginForm").modal('toggle'); $("#modalNewPlayer").modal('show');} }); $("#new-player-button").on('click', function() {$("#modalNewPlayer").modal('toggle');showTutorialArea(); }); $("#continue-button").on('click', function() {$("#modalOfflineForm").modal('toggle'); }); $("#continue-prestige-ok-button").on('click', function() {$("#modalPrestigeForm").modal('toggle');hideAllContent();showArtifactArea(); }); $("#continue-prestige-no-button").on('click', function() {$("#modalPrestigeForm").modal('toggle'); }); $("#upgrade-level-button").on('click', function() { upgradeLevelHero(); }); $("#hero-tab-button").on('click', function() { updateTab("hero"); }); $("#partner-tab-button").on('click', function() { updateTab("partner"); }); $("#skill-tab-button").on('click', function(e) { updateTab("skill"); }); $("#shop-tab-button").on('click', function() { updateTab("shop"); }); $("[id^=floor-number-div-]").on("click", function() {let floorNumber = parseInt($(this).text(),10);if(floorNumber <= hero.maxFloor && floorNumber <= setting.limitFloor){ hero.floor = floorNumber; componentAction ("progress-bar", "animate", 100); currentEnemyHP = initDungeon();} }); $("#upgrade-weapon-button").on('click', function() { upgradeLevelWeapon(); }); $("#prestige-ok-button").on('click', function() {runPrestige(); }); $("#prestige-no-button").on('click', function() {$("#modalPrestigeConfirm").modal('toggle'); }); $("#clear-ok-button").on('click', function() {$("#modalClearConfirm").modal('toggle');$("#modalAnotherClearConfirm").modal('show'); }); $("#clear-no-button").on('click', function() {$("#modalClearConfirm").modal('toggle'); }); $("#another-clear-ok-button").on('click', function() { localStorage.removeItem("hero");location.reload(); }); $("#another-clear-no-button").on('click', function() {$("#modalAnotherClearConfirm").modal('toggle'); }); $("#notif-prestige-ok-button").on('click', function() {$("#modalNotifPrestige").modal('toggle');startPrestige(); }); $("#notif-prestige-no-button").on('click', function() {$("#modalNotifPrestige").modal('toggle'); }); $("#user-name").keypress(function (e) {var value = e.keyCode || e.which; return alphaNumericSpaceFormat(value); }); $("#profile").on('click', function() {hideAllContent();componentAction ("profile-div", "removeClass", "d-none");componentAction ("profile", "updateClass", "cursor-button,active");componentAction ("profile-user-id", "inputText", hero.userId);componentAction ("profile-user-name", "inputText", hero.userName); }); $("#profile-user-name").keypress(function (e) {var value = e.keyCode || e.which; return alphaNumericSpaceFormat(value); }); $("#update-profile-button").on('click', function() {let userName = $("#profile-user-name").val();if(userName != ""){ hero.userName = userName; componentAction ("view-username", "replaceText", hero.userName); saveGame(); $("#modalSaveForm").modal('show'); componentAction("save-text", "replaceText", "Update Profile Success"); let intervalModalSaveFOrm = setTimeout (function() { $("#modalSaveForm").modal('toggle'); },2000); } }); $("#statistic").on('click', function() {hideAllContent();componentAction ("statistic-div", "removeClass", "d-none");componentAction ("statistic", "updateClass", "cursor-button,active");showStatisticArea(); }); $("#dungeon").on('click', function() {showDungeonArea(); }); $("#artifact").on('click', function() {hideAllContent();showArtifactArea(); }); $("#tutorial").on('click', function() {showTutorialArea(); }); $("[id^=tutor-div-]").on("click", function() {let tutorNumber = parseInt($(this).text(),10);switchTutorPage(tutorNumber); }); $("[id^=tutor-button-prev-]").on("click", function() {let tutorNumber = activeTutorNumber - 1;if(tutorNumber < 1) tutorNumber = 1;switchTutorPage(tutorNumber); }); $("[id^=tutor-button-next-]").on("click", function() {let tutorNumber = activeTutorNumber + 1;if(tutorNumber > 8) tutorNumber = 8;switchTutorPage(tutorNumber); }); $("[id^=tutor-div-]").on("click", function() {let tutorNumber = parseInt($(this).text(),10);switchTutorPage(tutorNumber); }); $("#tutor-button-finish").on("click",function (){showDungeonArea(); }); $("#unlock-artifact-button").on('click', function() {let unlockFee = new Decimal(calcNextUnlockArtifactFee());let heroOrbs = new Decimal(hero.orbs);if(heroOrbs.greaterThanOrEqualTo(unlockFee)){ $("#modalUnlockArtifactConfirm").modal('show'); componentAction ("unlock-artifact-confirm", "replaceText", numberFormat(calcNextUnlockArtifactFee())+" Orbs");}else $("#modalUnlockArtifactFailed").modal('show'); }); $("#unlock-artifact-ok-button").on('click', function() {unlockNewArtifact();$("#modalUnlockArtifactConfirm").modal('toggle');showArtifactArea(); }); $("#unlock-artifact-no-button").on('click', function() {$("#modalUnlockArtifactConfirm").modal('toggle'); }); $("#continue-failed-unlock-artifact-button").on('click', function() {$("#modalUnlockArtifactFailed").modal('toggle'); }); $("#save-game").on('click', function() { saveGame();componentAction ("save-text", "replaceText", "Save Data Success");$("#modalSaveForm").modal('show');let intervalModalSaveFOrm = setTimeout (function() { $("#modalSaveForm").modal('toggle');},2000); }); $("#clear-game").on('click', function() {$("#modalClearConfirm").modal('show'); }); $("#contact-dev").on('click', function() {let bodyEmail = 'Endless Dungeon v'+setting.gameVersion+'\r\n';bodyEmail += 'UserID : '+hero.userId+'\r\n';bodyEmail += 'UserName : '+hero.userName;window.open('mailto:kuropone.solodev@gmail.com?subject=Endless Dungeon Contact Dev&body='+encodeURIComponent(bodyEmail)); });})(jQuery);