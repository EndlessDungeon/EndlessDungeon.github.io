(function($) {
  "use strict";
  var dpsTimeout;
  var lastDpsHit;
  var lastBossTimer;
  var restBossTimer;
  var bossTimeout;
  
  var towerDpsTimeout;
  var lastTowerDpsHit;
  var lastTowerBossTimer;
  var restTowerBossTimer;
  var towerBossTimeout;
  var currentTowerManagerHp = new Decimal(0);
  var towerEquipmentDropRate = [];
  var selectedTowerId = -1;
  var selectedTowerFloor = -1;
  
  var everySecTimeout;
  var loopsEverySec = 0;
  var lastEverySecRun;
  
  var autoClickerDuration;
  var autoClickerInterval;
  var powerShotInterval;
  var specialForceInterval;
  var luckyCoinInterval;
  var billionaireTimeout;
  var lastBillionaireHit;
  var grimReaperDuration;
  var grimReaperTimeout;
  var lastGrimReaperHit;
  
  
  var stealCoinInterval;
  var stealCoinTimer = new Decimal(0);
  var dpcToCoinInterval;
  var dpcToCoinTimer = new Decimal(0);
  var dpsToCoinInterval;
  var dpsToCoinTimer = new Decimal(0);
   
  var skillCooldownInterval = [];
  var adventureTimerInterval = [];
  var currentEnemyHP = new Decimal(0);
  var lastDateTimeClick = Date.now();
  
  var availableArtifact = [];
  var availableGods = [];
  var availableCompanion = [];
  var activeTutorNumber = 1;
  var notifCanPrestige = true;
  
  var maxHeroLevelBuy = 0;
  var maxWeaponLevelBuy = 0;
  var maxPartnerLevelBuy = [];
  var roundedPartnerLevelBuy = [];
  var maxSkillLevelBuy = [];
  var maxLaborLevelBuy = [];
  
  var countHitHighestDpc = 0;
  var countHitHighestDps = 0;
  var countHitCurrentSlash = 0;
  var countHitCurrentDpc = 0;
  var countHitCurrentDps = 0;
  var critDps = false;
  var critDpc = false;
  var intervalCritDpc;
  var intervalRecentCoin;
  var addedCoin = false;
  
  var lastActiveMenu = '';
  var lastActiveStory = 0;
  var activeScreen = true;
  var lastActiveScreen = true;
  var tempAutoProgress;
  
  var tempPartnerAbility = [];
  var abilityChanges = false;
  
  var newDwellersRole = true;
  
  var tempUnlockArmy = [];
  var questTimerInterval = [];
  
  var compareDivId;
  var partnerDivId;
  var combineDivId;
  var selectedCombineId;
  var defaultModalWidth = 0;
  var dungeonBattleLog;
  var countDungeonBattleLog = 0;
  
  var isMultiplierChange = true;
  
  var multiplierArtifact = 1;
  var arrayArtifactLevel = [];
  
  var tutorialAnimation = "";
  var currentTutorialStep = 0;
  var firstStoryState = false;
  
  var buyTowerKeyId;
  var nextActiveDate;
  var nextUnlockFeature = "";
  var cancelQuest;
  
  const constNoteCancelAdventure = "* Click button again to cancel adventure";

  var initGame = function() {
	let backDateStatus = true;
	hideAllContent();
	showGameVersion();
	backDateStatus = loadGame();
	updateDataAfterLoad();
	setActiveDate();
	if(backDateStatus == "story"){
	  showFirstTimeStory();
	  firstStoryState = true;
	}else if(backDateStatus == false){
	  checkCssSetting();
	  if(hero.userName != ""){
		showHeaderBar();
		showSideMenu();
		updateUserName();
		updateInGameDateTime();
		insertAchievement();
		calculateAllAchievement();
		insertTask();
		addTowerKey();
		if(checkCollectDailyCheckIn())showDailyCheckInArea();
		insertAvailableArtifact();
		checkDuplicateArtifact();
		calculateAllArtifactDamage(true);
		if(hero.highestFloor >= unlockNewFeatureFloor("house")){
		  checkDwellersAvailability();
		  calculateGenerateTokenInBank();
		}
		if(hero.highestFloor >= unlockNewFeatureFloor("barracks")){
		  calculateAllPartnerAbility();
		}
		if(hero.highestFloor >= unlockNewFeatureFloor("companion")){
		  insertAvailableCompanion();
		  calculateAllCompanionDamage();
		}
		if(hero.highestFloor >= unlockNewFeatureFloor("equipment")){
		  insertAutoSellEquipment();
		  calculateAllItemBenefit();
		}
		if(hero.highestFloor >= unlockNewFeatureFloor("cave")){
		  checkCooldownQuestTimer(true);
		}
		if(hero.highestFloor >= unlockNewFeatureFloor("gods")){
		  insertAvailableGods();
		  calculateAllActiveGods(true);
		}
		if(hero.highestFloor >= unlockNewFeatureFloor("cage")){
		  updateAdventureStatus();
		  checkCooldownAdventureTimer();
		}
		currentEnemyHP = initDungeon();
		showDungeonArea();
		initDisplay();
		checkUnlockNewFeature();
		showMenu("gameplay");
	    saveGame();
		startDpsInterval();
		startEverySecInterval();
		checkCssSetting();
		showBodyArea();
		updateHeroDpc();
		saveGame();
	  }else $("#user-name").focus();
	}else $("#modalBackDateConfirm").modal('toggle');
  };
  
  var parseData = function(value){
	let usedKeyLen = value.slice(-2);
	
	let isDelimiter = value.slice(-3).slice(0,-2);
	let compareFlag = isDelimiter.localeCompare("|");
	if(compareFlag != 0) usedKeyLen = fromHexa(usedKeyLen);
	
	let usedKeyData = value.slice(0,usedKeyLen);
	let data = [];
	data.push(usedKeyData);
	if(usedKeyData != ""){
	  if(compareFlag == 0) data.push(value.slice(usedKeyLen).slice(0,-3));
	  else data.push(value.slice(usedKeyLen).slice(0,-2));
	}
	else data.push(value);
	return data;
  };
  
  var loadGame = function () {
	let backDateStatus = true;
	if((setting.devPage && localStorage.getItem("hero-dev")) || (!setting.devPage && localStorage.getItem("hero"))){
	  if(setting.devPage && localStorage.getItem("hero-dev")){
		let data = parseData(localStorage.getItem("hero-dev"));
		hero = JSON.parse(decryptData(data[1],data[0]));
	  }else{
		let data = parseData(localStorage.getItem("hero"));
	    hero = JSON.parse(decryptData(data[1],data[0]));
	  }
	  setting.autoProgress = hero.settingOnlineProgress;
	  if(hero.kingdomName == "" && hero.userName == ""){
		firstTimeVisit();
		backDateStatus = "story";
	  }else{
	    updateData();
		backDateStatus = calcOfflineTime();
	  }
	}else{
	  firstTimeVisit();
	  backDateStatus = false;
	}
	return backDateStatus;
  };
  
  var saveGame = function (){
	if(hero.userID != "" && hero.userName != "" && hero.kingdomName != "" && firstStoryState == false) localSaveGame();
	else if(hero.kingdomName == "" && !firstStoryState){
	  if(!($("#modalOfflineForm").data('bs.modal') || {})._isShown && !($("#modalRewardAdventureConfirm").data('bs.modal') || {})._isShown && !($("#modalListRewardAdventureConfirm").data('bs.modal') || {})._isShown && !($("#modalDailyCheckIn").data('bs.modal') || {})._isShown && !($("#modalNotification").data('bs.modal') || {})._isShown) $("#modalKingdomName").modal('show');
	}
  };
  
  var setActiveDate = function(){
    let date = new Date();
	nextActiveDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()+1);
  };
  
  var encryptData = function(value=""){
	if(value != "") return CryptoJS.AES.encrypt(value, keyData).toString();
	else return "";
  };
  
  var toHexa = function(value){
	return parseInt(value, 10).toString(16);
  };
  
  var checkJsonFormat = function(value){
	try {
      JSON.parse(value);
    } catch (e) {
      return false;
    }
    return true;  
  };
  
  var decryptData = function(value="",key=""){
	if(value != ""){
	  if(checkJsonFormat(value)){
		return value;  
	  }else{
	    if(key == "") key=keyData;
	    let data = CryptoJS.AES.decrypt(value, key);
	    return data.toString(CryptoJS.enc.Utf8);
	  }
	}
  };
  
  var fromHexa = function(value){
	return parseInt(value, 16);  
  };
  
  var exportData = function (isDownload=false){
	let exportSaveData = '';
	if(setting.devPage) exportSaveData = localStorage.getItem("hero-dev");
	else exportSaveData = localStorage.getItem("hero");
	
	if(isDownload){
	  let date = new Date();
	  let currentDate = ('0'+date.getFullYear()).slice(-2)+('0'+(date.getMonth()+1)).slice(-2)+('0'+date.getDate()).slice(-2);
	  let currentTime = ('0' + date.getHours()).slice(-2)+('0'+date.getMinutes()).slice(-2)+('0'+date.getSeconds()).slice(-2);
	  let timestamp = currentDate+currentTime;
	  let fileName = "KID-"+hero.userId+"-"+(hero.userName).replace(" ","_")+"-"+timestamp;
	  let file = new Blob([exportSaveData], {type: "text/plain;charset=utf-8"});
	  if (window.navigator.msSaveOrOpenBlob){
	    window.navigator.msSaveOrOpenBlob(file, fileName+'.txt');
      }else {
        var a = document.createElement('a'),
        url = URL.createObjectURL(file);
        a.href = url;
        a.download = fileName+'.txt';
        document.body.appendChild(a);
        a.click();
        setTimeout(function() {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 0);
      }
	}else componentAction ("export-data", "replaceText", exportSaveData);  
  };
  
  var importData = function (){
	let importData = $("#import-data").val().trim();
	let decryptSaveData;
	try {
	  stopAllTimer();
	  localStorage.removeItem("hero");
	  decryptSaveData = JSON.parse(decryptData(importData,setting.keyGame));
    }catch (e) {
	  try{
		let data = parseData(importData);
	    decryptSaveData = JSON.parse(decryptData(data[1],data[0]));
	  }catch(e){
		decryptSaveData = "";
		currentEnemyHP = initDungeon();
		startAllTimer();
		$("#modalNotification").modal("show");
		componentAction ("notification-text", "replaceText", "Wrong Import Data");
		$('#notification-ok-button').val(false);  
	  }
    }
	if(decryptSaveData != ""){
	  let tempHero = JSON.stringify(decryptSaveData);
	  hero = JSON.parse(tempHero);
	  saveGame();
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "Import Data Success");
	  componentAction ("import-data", "clearArea", "");
	  $('#notification-ok-button').val(true);
	}
  };
  
  var localSaveGame = function () {
	let onlineDuration = 0;
	if(hero.gameVersion.localeCompare('0.8.1-alpha') < 0) hero.showDevLog = false;
	if(hero.showDevLog == false){
	  if(!($("#modalOfflineForm").data('bs.modal') || {})._isShown && !($("#modalRewardAdventureConfirm").data('bs.modal') || {})._isShown && !($("#modalListRewardAdventureConfirm").data('bs.modal') || {})._isShown && !($("#modalDailyCheckIn").data('bs.modal') || {})._isShown && !($("#modalNotification").data('bs.modal') || {})._isShown){
		hero.showDevLog = true;
		$("#modalDevLog").modal("show");
		if(hero.tutorialGroupId == 0) componentAction("show-tutorial-button","replaceText","Start Tutorial");
		else if(hero.tutorialGroupId > 0) componentAction("show-tutorial-button","replaceText","Continue Tutorial");
		else componentAction("show-tutorial-button","replaceText","Read Tutorial");
		calcHeightScrollDiv("modal");
		componentAction("gameVersion", "replaceText", setting.gameVersion);
	  }
	}
	if(hero.gameVersion.localeCompare(setting.gameVersion) != 0) updateData();
	hero.gameVersion = setting.gameVersion;
	if(hero.lastActiveDatetime > 0)	onlineDuration = ((Date.now() - hero.lastActiveDatetime) / 1000);
	if(setting.devPage) onlineDuration *= setting.gameSpeed;
	updateTask(11, onlineDuration);
	hero.totalOnlineDuration = new Decimal(hero.totalOnlineDuration).plus(onlineDuration);
	hero.lastActiveDatetime = Date.now();
	if(!$("#statistic-div").hasClass("d-none")){
	  componentAction ("stat-online-duration", "replaceText", offlineTimeText(hero.totalOnlineDuration));
	}
	let heroData = keyData+encryptData(JSON.stringify(hero))+toHexa(keyLen);
	if(setting.devPage) localStorage.setItem("hero-dev", heroData);
	else localStorage.setItem("hero", heroData);
  };
  
  var cloudSaveGame = function () {
	
  };
  
  var startGame = function(){
	if(hero == undefined || (hero.userId == "" || hero.userName == "" || hero.kingdomName == "")){
	  partner=masterPartner.map(a=>({...a})),abilityType=masterAbilityType.map(a=>({...a})),partnerAbility=masterPartnerAbility.map(a=>({...a})),skill=masterSkill.map(a=>({...a})),tower=masterTower.map(a=>({...a})),pet=masterPet.map(a=>({...a})),zone=masterZone.map(a=>({...a})),artifact=masterArtifact.map(a=>({...a})),dailyTask=masterDailyTask.map(a=>({...a})),dailyCheckIn=masterDailyCheckIn.map(a=>({...a})),achievement=masterAchievement.map(a=>({...a})),companion=masterCompanion.map(a=>({...a})),gods=masterGods.map(a=>({...a}));
	  enemy={...masterEnemy},dwellers={...masterDwellers},labor=[...masterLabor],army={...masterArmy},hero={...masterHero},tutorialFunction = {...masterTutorialFunction},setting={...masterSetting};initKey();
	  gradeDwellers=masterGradeDwellers.map(e=>({...e})),levelDwellers=masterLevelDwellers.map(e=>({...e})),treasureDropRate=masterTreasureDropRate.map(e=>({...e})),material=masterMaterial.map(e=>({...e})),shop=masterShop.map(e=>({...e})),villages=masterVillages.map(e=>({...e})),gradeEquipment=masterGradeEquipment.map(e=>({...e})),benefitPartner=masterBenefitPartner.map(e=>({...e})),enhanceLevelPartner=masterEnhanceLevelPartner.map(e=>({...e})),enhanceLevelEquipment=masterEnhanceLevelEquipment.map(e=>({...e})),equipmentDropRate=masterEquipmentDropRate.map(e=>({...e})),unlockNewFeature=masterUnlockNewFeature.map(e=>({...e})),story=masterStory.map(e=>({...e})),bartenderStory=masterBartenderStory.map(e=>({...e})),tavernStory=masterTavernStory.map(e=>({...e})),tutorialGroup=masterTutorialGroup.map(e=>({...e})),tutorialStep=masterTutorialStep.map(e=>({...e})),equipment=masterEquipment.map(e=>({...e})),requirementUnlock=masterRequirementUnlock.map(e=>({...e})),people=masterPeople.map(e=>({...e})),peopleDialog=masterPeopleDialog.map(e=>({...e})),armyType=masterArmyType.map(e=>({...e})),cave=masterCave.map(e=>({...e})),peopleDialog=masterPeopleDialog.map(e=>({...e}));
	}
  };
  
  var showEquipmentIcon = function(equipmentName,showColor=true){
	return equipmentName.split(" ").join("-").toLowerCase()+".svg";
  };
  
  var checkCssSetting = function(){
	if(hero.settingShowIcon) {
	  $('.image-size').css({"display":""});
	  $('.image-size-2').css({"display":""});
	}else{
	  $('.image-size').css({"display":"none"});
	  $('.image-size-2').css({"display":"none"});
	}
	
	switch(hero.settingBackground){
	  case "light":
	    $('body').css({"color":"#000000", "background-color":"#FFFFFF"});
		$('.card,.drop-down-list').css({"color":"#000000", "background-color":"#FFFFFF"});
		$('.card-header').css({"color":"#000000", "background-color":"#f8f9fc"});
		$('.gods,.goddess,.achievement-bg-bw,.achievement-bg-color,.show-menu,.hide-menu,.generate-icon').css({"filter":""});
		$('.progress-bar-div').css({"color":"#000000"});
		$('.tab-active,.tab-unactive,.active-bg-color').css({"color":"#000000"});
		$('.active-bg-color').css({"background-color":"#00FFFF"});
		$('.tutor-info').css({"color":"#0000FF"});
		$('.unactive-bg-color').css({"background-color":"#FFFFFF", "color":"#000000"});
		$('.active-bg-color .progress-bar-div').css({"color":"#000000"});
		$('.tab-button-active').css({"border":"1px solid #CCCCCC","background-color":"#00ffff"});
		$('.tab-button-unactive').css({"border":"1px solid #CCCCCC","background-color":"#FFFFFF"});
		$('.upgrade-level-button,.shop-button-class,.dpc-button').css({"color":"#000000", "background-color":"#FFFFFF"});
		$('.modal-content,.form-control').css({"background-color":"#FFFFFF", "color":"#000000"});
		$('.unlock-info').css({"color": "#FF0000"});
		$('#content-wrapper').css({"background-color":"#f8f9fc"});
		$('#icon-menu').css({"filter":""});
		componentAction("sticky-topbar,sticky-footbar", "updateClass", "bg-dark,bg-white");
		break;
	  case "dark":
	    $('body').css({"color":"#FFFFFF", "background-color":"#222222"});
		$('.card,.drop-down-list').css({"color":"#FFFFFF", "background-color":"#222222"});
		$('.card-header').css({"color":"#FFFFFF", "background-color":"#444444"});
		$('.unactive-bg-color').css({"background-color":"#222222", "color":"#FFFFFF"});
		$('.active-bg-color').css({"background-color":"#003171", "color":"#FFFFFF"});
		$('.gods,.goddess,.achievement-bg-bw,.show-menu,.hide-menu,.generate-icon').css({"filter":"invert(100%) sepia(0%) saturate(7476%) hue-rotate(110deg) brightness(98%) contrast(108%)"});
		$('.progress-bar-div,.tab-unactive').css({"color":"#FFFFFF"});
		$('.tab-active').css({"color":"#000000"});		
		$('.tab-button-active').css({"border":"1px solid #FFFFFF","background-color":"#00ffff"});
		$('.tab-button-unactive').css({"border":"1px solid #FFFFFF","background-color":"#666666"});
		$('.upgrade-level-button,.shop-button-class,.dpc-button').css({"color":"#FFFFFF", "background-color":"#666666"});
		$('.modal-content,.form-control').css({"background-color":"#222222", "color":"#FFFFFF"});
		$('.unlock-info,.tutor-info').css({"color": "#FFB3A7"});
		$('#content-wrapper').css({"background-color":"#222222"});
		$('#icon-menu').css({"filter":"invert(100%) sepia(0%) saturate(7476%) hue-rotate(110deg) brightness(98%) contrast(108%)"});
		componentAction("sticky-topbar,sticky-footbar", "updateClass", "bg-white,bg-dark");
		break;	
	};
  };
  
  var resetGame = function (isPrestige=false,callback){
	let lastCoin = new Decimal(hero.coin);
	hero.heroLevel = 1;
	hero.weaponLevel = 0;
	hero.dps = 0;
	hero.dpc = 1;
	hero.weaponDpc = 0;
	hero.floor = 1;
	hero.maxFloor = 1;
	hero.coin = 0;
	hero.countSkill = 0;
	hero.unlockSkill = [];
	hero.weaponAreaShow = 0;
	
	if(isPrestige){
	  let totalPartnerDps = new Decimal(0);
	  let lastUnlockPartner = hero.unlockPartner;
	  hero.coin = runCarriedCoin(lastCoin);
	  hero.countPartner = 0;
	  hero.unlockPartner = [];
	  for(let i=0;i<hero.unlockPet.length;i++){
		let unlockPet = hero.unlockPet[i];
		unlockPet.currBonus = unlockPet.currBonus * 1;
		
		switch(unlockPet.id){
		  case 0:
		    let heroDpc = calcNextHeroDpc(unlockPet.currBonus);
			hero.heroLevel = unlockPet.currBonus;
			hero.dpc = heroDpc;
			break;
		  case 1:
		    let weaponDpc = calcNextWeaponDpc(unlockPet.currBonus);
			hero.weaponLevel = unlockPet.currBonus;
			hero.weaponDpc = weaponDpc;
			break;
		  case 2:
			hero.floor = unlockPet.currBonus + 1;
			hero.maxFloor = hero.floor;
			break;
		  default:
		    let partnerId = unlockPet.id - 3;
			let selectedLastUnlockPartner = lastUnlockPartner.find(item => item.id === partnerId);
			if(selectedLastUnlockPartner.status == 'Resting') selectedLastUnlockPartner.status = 'Battling';
		    let newObjPartner = {
			  id: partnerId,
			  level: 0,
			  dps: 0,
			  critHit: false,
			  totalDps: 0,
			  dpsMultiplier: 0,
			  critMultiplier: 0,
			  status: selectedLastUnlockPartner.status,
			  abilityId: -1,
			  abilityCounter: 0,
			  weaponId: selectedLastUnlockPartner.weaponId,
		    };
		    hero.unlockPartner.push(newObjPartner);
			let nextDps = new Decimal(calcNextPartnerDps(partnerId,unlockPet.currBonus));
			let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
			unlockPartner.dps = 0;
			unlockPartner.bonusDps = nextDps;
			totalPartnerDps = totalPartnerDps.plus(nextDps).floor();
			hero.dps = totalPartnerDps;
			hero.countPartner++;
			calculateAllPartnerAbility(partnerId);
			break;
		}
	  }
	  let restingPartner = hero.highestUnlockPartner.filter(item => item.status === 'Resting');
	  for(let i=0;i<restingPartner.length;i++){
		restingPartner[i].status = 'Battling';
	  }
	  recalculateAllUnlockLabor();
	  for(let i=0;i<hero.countLabor;i++){
		let unlockLabor = hero.unlockLabor[i];
		if(unlockLabor.level > 0){
		  unlockLabor.level = 1;
		  unlockLabor.currentPrize = unlockLabor.basePrize;
		}
	  }
	  calcTotalDps(true,"dungeon",true);
	  startDpsInterval(true);
	}
	callback();
  };
  
  var lastFunctionTimer = 0;
  var calcFunctionTimer = function(funcName,showConsole=true){
	if(showConsole) console.log(funcName+":"+(Date.now()-lastFunctionTimer));
	lastFunctionTimer = Date.now();
  };
  
  var filterArray = function(array,filterPercentage,requestDropQty=null){
	let predicate = (x) => x >= filterPercentage;
	let result = array.dropPercentage.filter(predicate);
	/*let unmatch = equipmentSphere[14].dropPercentage.filter(x => !predicate(x));*/
	
	let gradeResult = array.grade.slice(0,result.length);
	let tempTotalQty = array.dropQty;

	if(requestDropQty == 1){
	  return gradeResult.slice((gradeResult.length-requestDropQty),gradeResult.length);
	}else{
	  for(let i=result.length-1;i>=0;i--){
	    let dropQty = Math.ceil(result[i] * array.dropQty / 100);
	  
	    if(dropQty >= tempTotalQty) dropQty = tempTotalQty;
	    tempTotalQty -= dropQty;
	  }
	}
  };
  
  var clearItem = function(){
	hero.unlockItem = [];
	hero.countItem = 0;
	hero.countBackpack = 0;
	hero.countWarehouse = 0;
	for(let i=0;i<hero.unlockPartner.length;i++){
	  hero.unlockPartner[i].weaponId = -1;
	  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === hero.unlockPartner[i].id);
	  if(highestUnlockPartner) highestUnlockPartner.weaponId = -1;
	}
  };
  
  var updateDataAfterLoad = function(){
	//hero.orbs = 1e100;
	//hero.clover = 50;
	console.log(hero);
	//hero.token = new Decimal(hero.token).plus(500);
	/*let healMaterial = material.filter(item => item.refillHP > 0);
	if(healMaterial.length == 0){
	  console.log(hero.clover);
	}else{
	  healMaterial.sort((a, b) => (a.clover > b.clover) ? 1 : -1);
	}*/
	/*for(let i=0;i<hero.unlockArmy.length;i++){
	  hero.unlockArmy[i].status = "Resting";
	}*/
  };

  var updateData = function (){
	if(!hero.userGender)hero.userGender = "male";
	if(!hero.kingdomName) hero.kingdomName = "";
	if(!hero.type) hero.type = "free";
	if(!hero.clover) hero.clover = 0;
	if(!hero.activeGodsSlot) hero.activeGodsSlot = 0;
	if(!hero.activeTrainingSlot) hero.activeTrainingSlot = 0;
	if(!hero.activeCompanionSlot) hero.activeCompanionSlot = 0;
	if(!hero.activeEquipmentSlot) hero.activeEquipmentSlot = 0;
	if(!hero.maxBackpack < 10) hero.maxBackpack = 10;
	if(!hero.maxWarehouse < 10) hero.maxWarehouse = 25;
	if(hero.activeGodsSlot == 0 && hero.highestFloor >= unlockNewFeatureFloor("gods")) hero.activeGodsSlot = 1;
	if(hero.activeTrainingSlot == 0 && hero.highestFloor >= unlockNewFeatureFloor("barracks")) hero.activeTrainingSlot = 1;
	if(hero.activeCompanionSlot == 0 && hero.highestFloor >= unlockNewFeatureFloor("companion")) hero.activeCompanionSlot = 1;
	if(hero.activeEquipmentSlot == 0 && hero.highestFloor >= unlockNewFeatureFloor("equipment")) hero.activeEquipmentSlot = 1;
	if(!hero.activeAbilityPartner) hero.activeAbilityPartner = 1;
	if(hero.highestPartnerLevel) delete hero.highestPartnerLevel;
	if(hero.totalPartnerLevel) delete hero.totalPartnerLevel;
	if(hero.highestUnlockPet) delete hero.highestUnlockPet;
	if(hero.barracks) delete(hero.barracks);
	if(hero.coinInBank) delete(hero.coinInBank);
	if(hero.coinInBankLastGenerate) delete(hero.coinInBankLastGenerate);
	if(!hero.tutorialGroupId) hero.tutorialGroupId = 0;
	if(hero.totalArtifactUnlock == 0) hero.totalArtifactUnlock = hero.countArtifact;
	if(!hero.tokenInBank) hero.tokenInBank = 0;
	if(!hero.tokenInBankLastGenerate) hero.tokenInBankLastGenerate = 0;
	if(!hero.countArmy) hero.countArmy = 0;
	if(!hero.unlockArmy) hero.unlockArmy = [];
	if(!hero.countZone) hero.countZone = 0;
	if(!hero.unlockZone) hero.unlockZone = [];
	if(!hero.countGods) hero.countGods = 0;
	if(!hero.unlockGods) hero.unlockGods = [];
	if(!hero.settingAutoSellEquipment) hero.settingAutoSellEquipment = [];
	if(!hero.unlockFragment) hero.unlockFragment = [];
	if(!hero.checkInLevel) hero.checkInLevel = 0;
	if(!hero.checkInLevelDetail) hero.checkInLevelDetail = [];
	if(!hero.currentCheckInLevel) hero.currentCheckInLevel = 0;
	if(!hero.lastCheckInDateTime) hero.lastCheckInDateTime = 0;
	if(!hero.countCompleteCheckIn) hero.countCompleteCheckIn = 0;
	if(setting.devPage && !hero.prestigeDateTime) hero.prestigeDateTime = [];
	if(!hero.dailyCheckIn) hero.dailyCheckIn = [];
	if(!hero.dailyTask) hero.dailyTask = [];
	if(!hero.weeklyTask) hero.weeklyTask = [];
	if(!hero.monthlyTask) hero.monthlyTask = [];
	if(!hero.achievement) hero.achievement = [];
	if(!hero.unlockLabor) hero.unlockLabor = [];
	if(!hero.countLabor) hero.countLabor = 0;
	if(!hero.randomArtifactId) hero.randomArtifactId = [];
	if(!hero.highestUnlockPartner) hero.highestUnlockPartner = [];
	if(!hero.totalSkillUsed) hero.totalSkillUsed = [];
	if(!hero.countCompanion) hero.countCompanion = 0;
	if(!hero.unlockCompanion) hero.unlockCompanion = [];
	if(!hero.countDwellers) hero.countDwellers = 0;
	if(!hero.unlockDwellers) hero.unlockDwellers = [];
	if(!hero.tavernPeople) hero.tavernPeople = [];
	if(!hero.partnerFragment) hero.partnerFragment = 0;
	if(!hero.generatedCompanionSlot) hero.generatedCompanionSlot = 2;
	if(!hero.filledCompanionSlot) hero.filledCompanionSlot = 0;
	if(!hero.startGenerateCompanion) hero.startGenerateCompanion = 0;
	if(!hero.generatedEquipmentSlot) hero.generatedEquipmentSlot = 2;
	if(!hero.filledEquipmentSlot) hero.filledEquipmentSlot = 0;
	if(!hero.startGenerateEquipment) hero.startGenerateEquipment = 0;
	if(!hero.soul) hero.soul = 0;
	if(!hero.spiritStone) hero.spiritStone = 0;
	if(!hero.percentageBonusDpc) hero.percentageBonusDpc = 0;
	if(!hero.bonusCritChancePercentage) hero.bonusCritChancePercentage = 0;
	if(!hero.percentageBonusDps) hero.percentageBonusDps = 0;
	if(!hero.percentageBonusAbility) hero.percentageBonusAbility = 0;
	if(!hero.percentageBonusCoin) hero.percentageBonusCoin = 0;
	if(!hero.percentageBonusOrbs) hero.percentageBonusOrbs = 0;
	if(!hero.tempBonusShopDpcTime) hero.tempBonusShopDpcTime = 0;
	if(!hero.shopDpcLevel) hero.shopDpcLevel = 0;
	if(!hero.tempBonusShopDpsTime) hero.tempBonusShopDpsTime = 0;
	if(!hero.shopDpsLevel) hero.shopDpsLevel = 0;
	if(!hero.tempBonusShopCoinTime) hero.tempBonusShopCoinTime = 0;
	if(!hero.shopCoinLevel) hero.shopCoinLevel = 0;
	if(!hero.tempBonusShopOrbsTime) hero.tempBonusShopOrbsTime = 0;
	if(!hero.shopOrbsLevel) hero.shopOrbsLevel = 0;
	if(!hero.bonusAdventureExpPercentage) hero.bonusAdventureExpPercentage = 0;
	if(!hero.bonusAdventureCoinPercentage) hero.bonusAdventureCoinPercentage = 0;
	if(!hero.bonusAdventureTimePercentage) hero.bonusAdventureTimePercentage = 0;
	if(!hero.bonusDoubleAdventurePercentage) hero.bonusDoubleAdventurePercentage = 0;
	if(!hero.bonusArtifactRerollFeePercentage) hero.bonusArtifactRerollFeePercentage = 0;
	if(!hero.bonusArtifactUnlockFeePercentage) hero.bonusArtifactUnlockFeePercentage = 0;
	if(!hero.bonusArtifactUpgradeFeePercentage) hero.bonusArtifactUpgradeFeePercentage = 0;
	if(!hero.bonusChanceStealCoinPercentage) hero.bonusChanceStealCoinPercentage = 0;
	if(!hero.bonusChanceDpcToCoinPercentage) hero.bonusChanceDpcToCoinPercentage = 0;
	if(!hero.bonusChanceDpsToCoinPercentage) hero.bonusChanceDpsToCoinPercentage = 0;
	if(!hero.bonusChanceExtraCoinPercentage) hero.bonusChanceExtraCoinPercentage = 0;
	if(!hero.bonusChanceAddOrbsPrestigePercentage) hero.bonusChanceAddOrbsPrestigePercentage = 0;
	if(!hero.bonusChanceAddOrbsFloorPercentage) hero.bonusChanceAddOrbsFloorPercentage = 0;
	if(!hero.bonusChanceCarriedCoinPercentage) hero.bonusChanceCarriedCoinPercentage = 0;
	if(!hero.bonusChanceUpgradeDiscountPercentage) hero.bonusChanceUpgradeDiscountPercentage = 0;
	if(!hero.bonusGodsDpsPercentage) hero.bonusGodsDpsPercentage = 0;
	if(!hero.bonusGodsDpcPercentage) hero.bonusGodsDpcPercentage = 0;
	if(!hero.bonusChanceHitHighestDpcPercentage) hero.bonusChanceHitHighestDpcPercentage = 0;
	if(!hero.bonusChanceHitHighestDpsPercentage) hero.bonusChanceHitHighestDpsPercentage = 0;
	if(!hero.bonusChanceHitCurrentSlashPercentage) hero.bonusChanceHitCurrentSlashPercentage = 0;
	if(!hero.bonusChanceHitCurrentDpcPercentage) hero.bonusChanceHitCurrentDpcPercentage = 0;
	if(!hero.bonusChanceHitCurrentDpsPercentage) hero.bonusChanceHitCurrentDpsPercentage = 0;
	if(!hero.bonusMeleeDpsPercentage) hero.bonusMeleeDpsPercentage = 0;
	if(!hero.bonusStealthDpsPercentage) hero.bonusStealthDpsPercentage = 0;
	if(!hero.bonusSwordDpsPercentage) hero.bonusSwordDpsPercentage = 0;
	if(!hero.bonusRangedDpsPercentage) hero.bonusRangedDpsPercentage = 0;
	if(!hero.bonusMagicDpsPercentage) hero.bonusMagicDpsPercentage = 0;
	if(!hero.bonusFirearmDpsPercentage) hero.bonusFirearmDpsPercentage = 0;
	if(!hero.bonusRuneDpsPercentage) hero.bonusRuneDpsPercentage = 0;
	if(!hero.bonusAllDamagePercentage) hero.bonusAllDamagePercentage = 0;
	if(!hero.bonusAllCoinPercentage) hero.bonusAllCoinPercentage = 0;
	if(!hero.bonusAbilityPercentage) hero.bonusAbilityPercentage = 0;
	if(!hero.bonusMeleeAbilityPercentage) hero.bonusMeleeAbilityPercentage = 0;
	if(!hero.bonusStealthAbilityPercentage) hero.bonusStealthAbilityPercentage = 0;
	if(!hero.bonusSwordAbilityPercentage) hero.bonusSwordAbilityPercentage = 0;
	if(!hero.bonusRangedAbilityPercentage) hero.bonusRangedAbilityPercentage = 0;
	if(!hero.bonusMagicAbilityPercentage) hero.bonusMagicAbilityPercentage = 0;
	if(!hero.bonusFirearmAbilityPercentage) hero.bonusFirearmAbilityPercentage = 0;
	if(!hero.bonusRuneAbilityPercentage) hero.bonusRuneAbilityPercentage = 0;
	if(!hero.bonusMeleeCritChancePercentage) hero.bonusMeleeCritChancePercentage = 0;
	if(!hero.bonusStealthCritChancePercentage) hero.bonusStealthCritChancePercentage = 0;
	if(!hero.bonusSwordCritChancePercentage) hero.bonusSwordCritChancePercentage = 0;
	if(!hero.bonusRangedCritChancePercentage) hero.bonusRangedCritChancePercentage = 0;
	if(!hero.bonusMagicCritChancePercentage) hero.bonusMagicCritChancePercentage = 0;
	if(!hero.bonusFirearmCritChancePercentage) hero.bonusFirearmCritChancePercentage = 0;
	if(!hero.bonusRuneCritChancePercentage) hero.bonusRuneCritChancePercentage = 0;
	if(!hero.bonusMeleeCritDamagePercentage) hero.bonusMeleeCritDamagePercentage = 0;
	if(!hero.bonusStealthCritDamagePercentage) hero.bonusStealthCritDamagePercentage = 0;
	if(!hero.bonusSwordCritDamagePercentage) hero.bonusSwordCritDamagePercentage = 0;
	if(!hero.bonusRangedCritDamagePercentage) hero.bonusRangedCritDamagePercentage = 0;
	if(!hero.bonusMagicCritDamagePercentage) hero.bonusMagicCritDamagePercentage = 0;
	if(!hero.bonusFirearmCritDamagePercentage) hero.bonusFirearmCritDamagePercentage = 0;
	if(!hero.bonusRuneCritDamagePercentage) hero.bonusRuneCritDamagePercentage = 0;
	if(!hero.bonusAllWeaponDamagePercentage) hero.bonusAllWeaponDamagePercentage = 0;
	if(!hero.bonusMeleeWeaponDamagePercentage) hero.bonusMeleeWeaponDamagePercentage = 0;
	if(!hero.bonusStealthWeaponDamagePercentage) hero.bonusStealthWeaponDamagePercentage = 0;
	if(!hero.bonusSwordWeaponDamagePercentage) hero.bonusSwordWeaponDamagePercentage = 0;
	if(!hero.bonusRangedWeaponDamagePercentage) hero.bonusRangedWeaponDamagePercentage = 0;
	if(!hero.bonusMagicWeaponDamagePercentage) hero.bonusMagicWeaponDamagePercentage = 0;
	if(!hero.bonusFirearmWeaponDamagePercentage) hero.bonusFirearmWeaponDamagePercentage = 0;
	if(!hero.bonusRuneWeaponDamagePercentage) hero.bonusRuneWeaponDamagePercentage = 0;
	if(!hero.bonusTowerTimeLimit) hero.bonusTowerTimeLimit = 0;
	if(!hero.bonusTowerHp) hero.bonusTowerHp = 0;
	if(!hero.bonusTowerDamage) hero.bonusTowerDamage = 0;
	if(!hero.dailyBuyTowerKey) hero.dailyBuyTowerKey = 0;
	if(!hero.bonusCoinLaborUpgradeFee) hero.bonusCoinLaborUpgradeFee = 0;
	if(!hero.bonusCoinLaborYield) hero.bonusCoinLaborYield = 0;
	if(!hero.companionMeleeDpsPercentage) hero.companionMeleeDpsPercentage = 0;
	if(!hero.companionStealthDpsPercentage) hero.companionStealthDpsPercentage = 0;
	if(!hero.companionSwordDpsPercentage) hero.companionSwordDpsPercentage = 0;
	if(!hero.companionRangedDpsPercentage) hero.companionRangedDpsPercentage = 0;
	if(!hero.companionMagicDpsPercentage) hero.companionMagicDpsPercentage = 0;
	if(!hero.companionFirearmDpsPercentage) hero.companionFirearmDpsPercentage = 0;
	if(!hero.companionRuneDpsPercentage) hero.companionRuneDpsPercentage = 0;
	if(!hero.companionDpcPercentage) hero.companionDpcPercentage = 0;
	if(!hero.companionAllCoinPercentage) hero.companionAllCoinPercentage = 0;
	if(!hero.companionEnemyCoinPercentage) hero.companionEnemyCoinPercentage = 0;
	if(!hero.companionBossCoinPercentage) hero.companionBossCoinPercentage = 0;
	if(!hero.companionAllDpsPercentage) hero.companionAllDpsPercentage = 0;
	if(!hero.companionCritDpcPercentage) hero.companionCritDpcPercentage = 0;
	if(!hero.companionCritChancePercentage) hero.companionCritChancePercentage = 0;
	if(!hero.companionAllDamagePercentage) hero.companionAllDamagePercentage = 0;
	if(!hero.companionDpsToDpcPercentage) hero.companionDpsToDpcPercentage = 0;
	if(!hero.enhanceDpsForNormalEnemyPercentage) hero.enhanceDpsForNormalEnemyPercentage = 0;
	if(!hero.enhanceDpsForBossEnemyPercentage) hero.enhanceDpsForBossEnemyPercentage = 0;
	if(!hero.enhanceDpcForNormalEnemyPercentage) hero.enhanceDpcForNormalEnemyPercentage = 0;
	if(!hero.enhanceDpcForBossEnemyPercentage) hero.enhanceDpcForBossEnemyPercentage = 0;
	if(!hero.enhanceDpcForAllEnemyPercentage) hero.enhanceDpcForAllEnemyPercentage = 0;
	if(!hero.enhanceAllDamagePercentage) hero.enhanceAllDamagePercentage = 0;
	if(!hero.enhanceDpcCritChancePercentage) hero.enhanceDpcCritChancePercentage = 0;
	if(!hero.enhanceDpcCritDamagePercentage) hero.enhanceDpcCritDamagePercentage = 0;
	if(!hero.enhanceDpsToDpcPercentage) hero.enhanceDpsToDpcPercentage = 0;
	if(!hero.enhanceCoinForNormalEnemyPercentage) hero.enhanceCoinForNormalEnemyPercentage = 0;
	if(!hero.enhanceCoinForBossEnemyPercentage) hero.enhanceCoinForBossEnemyPercentage = 0;
	if(!hero.enhanceCoinForAllEnemyPercentage) hero.enhanceCoinForAllEnemyPercentage = 0;
	if(!hero.enhance10CoinChanceForNormalEnemyPercentage) hero.enhance10CoinChanceForNormalEnemyPercentage = 0;
	if(!hero.enhance10CoinChanceForBossEnemyPercentage) hero.enhance10CoinChanceForBossEnemyPercentage = 0;
	if(!hero.enhance10CoinChanceForAllEnemyPercentage) hero.enhance10CoinChanceForAllEnemyPercentage = 0;
	if(!hero.enhanceSlashDamagePercentage) hero.enhanceSlashDamagePercentage = 0;
	if(!hero.enhanceSlashChancePercentage) hero.enhanceSlashChancePercentage = 0;
	if(!hero.countBackpack) hero.countBackpack = 0;
	if(!hero.countWarehouse) hero.countWarehouse = 0;
	if(!hero.countItem) hero.countItem = 0;
	if(!hero.unlockItem) hero.unlockItem = [];
	if(!hero.lastFreeDrink) hero.lastFreeDrink = 0;
	if(!hero.sphere) hero.sphere = 0;
	if(!hero.blueprint) hero.blueprint = 0;
	if(!hero.unlockTower) hero.unlockTower = [];
	if(!hero.settingOrderPartner) hero.settingOrderPartner = "asc";
	if(!hero.settingOrderLabor) hero.settingOrderLabor = "asc";
	if(!hero.settingShowIcon && hero.settingShowIcon != false) hero.settingShowIcon = true;
	if(!hero.settingAutoAbilityTraining && hero.settingAutoAbilityTraining != false) hero.settingAutoAbilityTraining = true;
	if(!hero.settingBackground) hero.settingBackground = "dark";
	if(!hero.settingFormatNumber) hero.settingFormatNumber = "number";
	if(!hero.settingOfflineProgress && hero.settingOfflineProgress != false) hero.settingOfflineProgress = true;
	if(!hero.settingConfirmUseItem && hero.settingConfirmUseItem != false) hero.settingConfirmUseItem = true;
	if(!hero.settingConfirmUseToken && hero.settingConfirmUseToken != false) hero.settingConfirmUseToken = true;
	if(!hero.settingConfirmSellUpgrade && hero.settingConfirmSellUpgrade != false) hero.settingConfirmSellUpgrade = true;
	if(!hero.settingShowDetailDamage && hero.settingShowDetailDamage != false) hero.settingShowDetailDamage = true;
	if(!hero.settingRoundedUpgrade && hero.settingRoundedUpgrade != false) hero.settingRoundedUpgrade = true;
	if(!hero.settingMaxRoundedUpgrade && hero.settingMaxRoundedUpgrade != false) hero.settingMaxRoundedUpgrade = true;
	if(!hero.settingAutoCollapse && hero.settingAutoCollapse != false) hero.settingAutoCollapse = true;
	if(!hero.settingWarningPercentageHP) hero.settingWarningPercentageHP = 50;
    if(!hero.settingDangerPercentageHP) hero.settingDangerPercentageHP = 25;
	updateDataAfterUpdate();
  };
  
  var updateDataAfterUpdate = function(){
	if(hero.gameVersion.localeCompare('0.3-alpha') < 0){
	  hero.soul = hero.totalBossEnemyKilled + hero.totalNormalEnemyKilled;
	  let dragonPet = hero.unlockPet.find(item => item.id === 2);
	  if(dragonPet){
	    let petData = pet.find(item => item.id === 2);
	    dragonPet.currBonus = dragonPet.level * petData.multiplierBonus;
	  }
	}
	
	if(hero.gameVersion.localeCompare('0.4-alpha') < 0){
	  let unlockSkill = hero.unlockSkill.find(item => item.id === 4);
	  let fifthUnlockSkill = hero.unlockSkill.find(item => item.id === 5);
	  
	  if(!fifthUnlockSkill && unlockSkill){
	    let moveObjSkill = {
		  id: 5,
		  level: unlockSkill.level,
		  damage: unlockSkill.damage,
		  duration: unlockSkill.duration,
		  cooldown: unlockSkill.cooldown,
		  isActive: unlockSkill.isActive,
		  lastStartDatetime: unlockSkill.lastStartDatetime,
		  isCooldown: unlockSkill.isCooldown,
		  lastCooldownDatetime: unlockSkill.lastCooldownDatetime,
		  useTicket: false,
	    };
	    hero.unlockSkill.push(moveObjSkill);
	    let removeIndex = hero.unlockSkill.map(function(item) { return item.id; }).indexOf(4);
		if (removeIndex !== -1)hero.unlockSkill.splice(removeIndex, 1);
	  }
	}

	if(hero.gameVersion.localeCompare('0.5-alpha') < 0){
	  if(!hero.trainingZone){
		hero.trainingZone = {
		  level: 1,
		  reqMaterial: [],
		  buildingTime: 0,
		  maxSlot: 1,
		  trainingSlot: [],
		};
	  }
	  for(let i=0;i<hero.unlockPartner.length;i++){
		let unlockPartner = hero.unlockPartner[i];
		unlockPartner.status = "Battling";
		unlockPartner.abilityCounter = 0;
		unlockPartner.abilityId = -1;
	  }
	  for(let i=0;i<hero.highestUnlockPartner.length;i++){
		let highestUnlockPartner = hero.highestUnlockPartner[i];
		let partnerId = highestUnlockPartner.id;
		let partnerData = partner.find(item => item.id === partnerId);
		
		highestUnlockPartner.status = "Battling";
		highestUnlockPartner.ability = [];
		if(hero.highestFloor >= unlockNewFeatureFloor("barracks")){
		  if(hero.activeTrainingSlot == 0 || !hero.activeTrainingSlot) hero.activeTrainingSlot = 1;
		  insertPartnerAbility(partnerId, partnerData.type);
		}
	  }
	  for(let i=0;i<hero.unlockPet.length;i++){
		let petData = pet.find(item => item.id === hero.unlockPet[i].id);
		hero.unlockPet[i].currBonus = hero.unlockPet[i].level * petData.multiplierBonus;
	  }
	}
	
	if(hero.gameVersion.localeCompare('0.6-alpha') < 0){
	  for(let i=0;i<hero.unlockGods.length;i++){
		if(!hero.unlockGods[i].awakeningLevel) hero.unlockGods[i].awakeningLevel = 1;
	  }
	  hero.countDwellers = 0;
	  hero.unlockDwellers = [];
	  if(hero.highestFloor >= unlockNewFeatureFloor("barracks")) unlockNewDwellers(hero.activeTrainingSlot,"trainer",true,true);
	  if(hero.highestFloor >= unlockNewFeatureFloor("companion")) unlockNewDwellers(hero.generatedCompanionSlot,"warlords",true,true);  
	  let petData = pet.find(item => item.id === 0);
	  if(hero.highestFloor >= unlockNewFeatureFloor("gods")) unlockNewDwellers(hero.activeGodsSlot,"cleric",true,true);
	}
	if(hero.gameVersion.localeCompare('0.7a-alpha') < 0){
	  if(hero.highestFloor >= unlockNewFeatureFloor("house")){
		unlockNewDwellers(1,"banker",true,true);
	  }
	  
	  if(hero.highestFloor >= unlockNewFeatureFloor("equipment")){
		unlockNewDwellers(hero.generatedEquipmentSlot,"collector",true,true);
		insertNewUnlockEquipment();
		hero.equipmentMinValue = 0;
		hero.equipmentMaxValue = 0;
		hero.equipmentExponentValue = 0;
	  }
	  
	  for(let i=0;i<hero.unlockDwellers.length;i++){
		hero.unlockDwellers[i].isDefault = true;
		if(!hero.unlockDwellers[i].grade) hero.unlockDwellers[i].grade = 1;
		hero.unlockDwellers[i].ability[0].level = 1;
		hero.unlockDwellers[i].ability[0].exp = 0;
		hero.unlockDwellers[i].ability[0].maxExp = 1;
		if(hero.unlockDwellers[i].isWorking){
		  hero.unlockDwellers[i].statusTime = hero.unlockDwellers[i].lastWorkingTime;
		  if(hero.unlockDwellers[i].isWorking) hero.unlockDwellers[i].status = "working";
		  else hero.unlockDwellers[i].status = "idle";
		  delete(hero.unlockDwellers[i].isWorking);
		  delete(hero.unlockDwellers[i].lastWorkingTime);
		}
		delete(hero.unlockDwellers[i].level);
	  }
	  
	  for(let i=0;i<hero.highestUnlockPartner.length;i++){
		let partnerData = partner.find(item => item.id === hero.highestUnlockPartner[i].id);
		hero.highestUnlockPartner[i].upgradeLevel = 0;
		hero.highestUnlockPartner[i].enhanceLevel = 0;
		hero.highestUnlockPartner[i].critChanceLevel = 0;
		hero.highestUnlockPartner[i].baseCritChancePercentage = 5;
		hero.highestUnlockPartner[i].critDamageLevel = 0;
		hero.highestUnlockPartner[i].baseCritDamagePercentage = 125;
		hero.highestUnlockPartner[i].baseDpsLevel = 1;
		hero.highestUnlockPartner[i].baseDps = partnerData.baseDps;
		hero.highestUnlockPartner[i].abilityDamageLevel = 0;
		hero.highestUnlockPartner[i].baseAbilityDamagePercentage = 0;
		hero.highestUnlockPartner[i].enhanceDpsPercentage = 0;
		hero.highestUnlockPartner[i].enhanceCritDamagePercentage = 0;
		hero.highestUnlockPartner[i].enhanceCritChancePercentage = 0;
		hero.highestUnlockPartner[i].enhanceAbilityDamagePercentage = 0;
		hero.highestUnlockPartner[i].enhanceAbilityChancePercentage = 0;
		if(hero.highestUnlockPartner[i].hasOwnProperty("baseCritChance"))delete(hero.highestUnlockPartner[i].baseCritChance);
		if(hero.highestUnlockPartner[i].hasOwnProperty("baseCritDamage"))delete(hero.highestUnlockPartner[i].baseCritDamage);
		if(hero.highestUnlockPartner[i].hasOwnProperty("baseAbilityDamage"))delete(hero.highestUnlockPartner[i].baseAbilityDamage);
	  }
	  
	  for(let i=0;i<hero.unlockItem.length;i++){
		if(hero.unlockItem[i].hasOwnProperty("enhancePercentage"))delete(hero.unlockItem[i].enhancePercentage);
		if(hero.unlockItem[i].hasOwnProperty("upgradePercentage"))delete(hero.unlockItem[i].upgradePercentage);
		if(hero.unlockItem[i].hasOwnProperty("isUsed"))delete(hero.unlockItem[i].isUsed);
	  }
	  unlockNewTower();
	}
	
	for(let i=0;i<hero.highestUnlockPartner.length;i++){
	  if(hero.highestUnlockPartner[i].baseDpsLevel == 0 && hero.highestUnlockPartner[i].baseDps == 0){
		let partnerData = partner.find(item => item.id === hero.highestUnlockPartner[i].id);
	    hero.highestUnlockPartner[i].baseDpsLevel = 1;
	    hero.highestUnlockPartner[i].baseDps = partnerData.baseDps;
	  }
	}
	
	if(hero.gameVersion.localeCompare('0.7b-alpha') < 0){
	  hero.showDevLog = false;
	  if(hero.highestFloor >= unlockNewFeatureFloor("labor")) insertNewUnlockLabor();
	  
	  for(let i=0;i<hero.unlockItem.length;i++){
		let unlockItem = hero.unlockItem[i];
		if(unlockItem.equipmentId >= 0){
		  unlockItem.itemId = unlockItem.equipmentId;
		  unlockItem.qty = 1;
		}
		delete(unlockItem.equipmentId);
	  }
	  
	  for(let i=0;i<hero.unlockSkill.length;i++){
		hero.unlockSkill[i].useTicket = false;
	  }
	  
	  for(let i=0;i<hero.unlockArtifact.length;i++){
		let artifactData = artifact.find(item => item.id === hero.unlockArtifact[i].id);
		hero.unlockArtifact[i].type = artifactData.type;
		updateArtifactUpgradeFee(hero.unlockArtifact[i].id);
	  }
	}
	
	if(hero.gameVersion.localeCompare('0.7c-alpha') < 0){
	  hero.totalDps = new Decimal(0);
	  for(let i=0;i<hero.unlockItem.length;i++){
		switch(hero.unlockItem[i].itemType.toLowerCase()){
		  case "coin":
		  case "ticket":
		    hero.unlockItem[i].gradeId = -1;
			hero.unlockItem[i].enhanceLevel = -1;
			hero.unlockItem[i].upgradeLevel = -1;
			hero.unlockItem[i].maxValue = -1;
			hero.unlockItem[i].minValue = -1;
			break; 
		};
	  }
	}
	
	if(hero.gameVersion.localeCompare('0.7c.2-alpha') < 0){
	  recalculateAllUnlockLabor();
	};
	
	if(hero.gameVersion.localeCompare('0.7c.3-alpha') < 0){
	  recalculateAllUnlockLabor();
	  let tempUnlockLabor = [];
	  let countLabor = hero.unlockLabor.length;
	  if(countLabor > 0){
	    for(let i=0;i<countLabor;i++){
		  if(i<26){
		    if(!hero.unlockLabor[i].grade){
			  hero.unlockLabor[i].grade = 1;
			  tempUnlockLabor.push(hero.unlockLabor[i]);
		    }
		  }else{
		    let currentIndex = i;
		    let newIndex = i % 26;
		    let unlockLabor = tempUnlockLabor.find(item => item.id === newIndex);
		    
			if(unlockLabor && hero.unlockLabor[i].level > 0){
			  let enhanceData = calcEnhanceLaborFee(newIndex);
		      let enhanceFee = new Decimal(enhanceData["enhanceFee"]);
		      let enhancePrize = new Decimal(enhanceData["enhancePrize"]);

			  unlockLabor.grade += 1;
			  unlockLabor.level = 1;
			  unlockLabor.baseFee = new Decimal(enhanceFee);
			  unlockLabor.basePrize = new Decimal(enhancePrize);
			  unlockLabor.currentPrize = new Decimal(enhancePrize);
		    }
		  }
	    }
		if(countLabor > 26){
	      hero.unlockLabor = [];
	      for(let i=0;i<tempUnlockLabor.length;i++){
	        hero.unlockLabor.push(tempUnlockLabor[i]);
	      }
	      hero.countLabor = hero.unlockLabor.length;
		}
	  }
    };
	
	if(hero.gameVersion.localeCompare('0.7c.6-alpha') < 0){
	  recalculateAllUnlockLabor();
	  if(hero.checkInLevel != (hero.currentCheckInLevel - 1) && hero.currentCheckInLevel > 0) hero.checkInLevel = (hero.currentCheckInLevel - 1);
	  insertAutoSellEquipment();
	  
	  for(let i=0;i<hero.unlockGods.length;i++){
		let unlockGods = hero.unlockGods[i];
		let godsData = gods.find(item => item.id === unlockGods.id);
		unlockGods.damage = godsData.levelMultiplier * unlockGods.level;
	  }
	}
	
	if(hero.gameVersion.localeCompare('0.8-alpha') < 0){
	  if(hero.unlockQuest) delete(hero.unlockQuest);
	}
	
	if(hero.gameVersion.localeCompare('0.8.2-alpha') < 0){
	  let partnerWithWeapon = hero.highestUnlockPartner.filter(item => item.weaponId >= 0 && item.weaponId !== undefined);
	  let maxIndex = partnerWithWeapon.length;
	  if(maxIndex > 0){
		let availableGradeEquipment = gradeEquipment.filter(item => item.reqFloor <= hero.highestFloor);
		let maxGradeId = availableGradeEquipment[availableGradeEquipment.length-1].id;
		
	    for(let i=0;i<maxIndex;i++){
		  let weaponId = partnerWithWeapon[i].weaponId;
		  let unlockItem = hero.unlockItem.find(item => item.id === weaponId);
		  if(unlockItem.gradeId > maxGradeId) unequipItemPartner(partnerWithWeapon[i].id+"=weapon="+weaponId,true);
	    }
	  }
	  
	  if(hero.countArmy == 0 && hero.highestFloor >= unlockNewFeatureFloor("cave")) hireArmy(true);
	}
  };
  
  var initKey = function(){
	keyLen = randomBetweenNumber(100,200);  
	keyData = randomString(keyLen,"all");	
  };
  
  var firstTimeVisit = function () {
	let currentDatetime = new Date();
	let date = currentDatetime.getDate();
	let month = currentDatetime.getMonth() + 1;
	let year = currentDatetime.getFullYear().toString().substr(-2);
	let hour = currentDatetime.getHours();
	let min = currentDatetime.getMinutes();
	let sec = currentDatetime.getSeconds();
	 
	let firstID = parseInt(year,10).toString(36)+month.toString(36)+date.toString(36)+hour.toString(36)+min.toString(36)+sec.toString(36);
	let userID = firstID.toUpperCase()+randomString(10-firstID.length);
	
	componentAction("user-id", "inputText", userID);
	componentAction("label-user-id", "replaceText", userID);
	hideHeaderBar();
	hideSideMenu();
	hideAllContent();
	if(hero.userName == ""){
	  lastActiveMenu = 'registration';	
	  $("#modalLoginForm").modal('show');
	}
  };
  
  var showFirstTimeStory = function(){
	lastActiveMenu = 'first-story';
	componentAction("first-story-div","removeClass","d-none");
	componentAction("prev-story-button","addClass","d-none");
	componentAction("next-story-button","addClass","d-none");
	componentAction("skip-story-button","addClass","d-none");
	calcHeightScrollDiv("first-story","","height");
	componentAction("view-username","replaceText",hero.userName);
	componentAction("prev-story-button","removeClass","d-none");
	componentAction("next-story-button","removeClass","d-none");
	componentAction("skip-story-button","removeClass","d-none");
	if(lastActiveStory == 0) showStory("prolog",1);
  };
  
  var showStory = function(type,seqNumber){
	if(seqNumber == "finish"){
	  firstStoryState = false;
	  componentAction("first-story-div","addClass","d-none");
	  initGame();
	  saveGame();
	}else{
	  seqNumber = parseInt(seqNumber,10);
	  lastActiveStory = seqNumber;
	  let currentStory = story.find(item => item.type === type && item.seqNumber === seqNumber && item.gender === hero.userGender);
	  let countStory = story.filter(item => item.type === type && item.gender === hero.userGender).length;
	  let bodyDiv = "story-body1";
	  let storyDesc = currentStory.desc;
	
	  $("#story-body1").empty();
	  componentAction("story-body1","addClass","d-none");
	  $("#story-body-full").empty();
	  componentAction("story-body-full","addClass","d-none");
	  let arrayRole = currentStory.role.split(" ");
	  let currentRole;
	  if(arrayRole[1]) currentRole = arrayRole[1];
	  else currentRole = arrayRole[0];
	
	  switch(currentRole.toLowerCase()){
	    case "faustina":
		  componentAction("story-king","addClass","d-none");
		  componentAction("story-queen","removeClass","d-none");
		  componentAction("story-body1","removeClass","d-none");
		  componentAction("story-body1","removeClass","left-align");
		  componentAction("story-body1","addClass","right-align");
		  componentAction("queen-name","replaceText",currentStory.role);
		  if(currentStory.pic && currentStory.pic != "") $("#queen-img").attr("src", "assets/images/"+currentStory.pic+".svg");
		  else $("#queen-img").attr("src", "assets/images/queen.svg");
		  if(arrayRole[0].toLowerCase() == "dowager") storyDesc = storyDesc.replace("#username",hero.userName).replace("#kingdomname",hero.kingdomName);
		  break;
	    case "narator":
		  bodyDiv = "story-body-full";
		  componentAction("story-king","addClass","d-none");
		  componentAction("story-queen","addClass","d-none");
		  storyDesc = storyDesc.replace("#username",hero.userName);
		  break;
	    case "kingdomname":
	      bodyDiv = "";
		  break;
	    case "gajah-mada":
	      componentAction("story-king","addClass","d-none");
		  componentAction("story-queen","removeClass","d-none");
		  componentAction("story-body1","removeClass","d-none");
		  componentAction("story-body1","removeClass","left-align");
		  componentAction("story-body1","addClass","right-align");
		  componentAction("queen-name","replaceText",currentStory.role);
		  $("#queen-img").attr("src", "assets/images/herald.svg");
		  if(arrayRole[0].toLowerCase() == "dowager") storyDesc = storyDesc.replace("#username",hero.userName).replace("#kingdomname",hero.kingdomName);
		  break;
	    case "kuro":
	    default:
	      if(currentRole.toLowerCase() == "kuro"){
			if(currentStory.pic && currentStory.pic != "") $("#king-img").attr("src", "assets/images/"+currentStory.pic+".svg");
			else $("#king-img").attr("src", "assets/images/king.svg");
	      }else{
			if(hero.userGender.toLowerCase() == "male") $("#king-img").attr("src", "assets/images/king-user.svg");
			else $("#king-img").attr("src", "assets/images/queen-user.svg");
		  }
	      componentAction("story-king","removeClass","d-none");
		  componentAction("story-queen","addClass","d-none");
		  componentAction("story-body1","removeClass","d-none");
		  componentAction("story-body1","addClass","left-align");
		  componentAction("story-body1","removeClass","right-align");
		  componentAction("king-name","replaceText",currentStory.role.replace("#username",hero.userName));
		  break;
	  };
	  
	  switch(currentStory.animation){
	    case "fade-in":
	    case "fade-out":
	      componentAction(bodyDiv,"addClass",currentStory.animation);
		  componentAction("story-button-div","addClass",currentStory.animation);
		  break;
	    case "modal":
	      $("#modal"+currentStory.role).modal("show");
		  componentAction("save-kingdom-name-button","inputText",type+"="+(seqNumber+1));
		  break;
	    default:
	      componentAction(bodyDiv,"removeClass","fade-in");
	      componentAction(bodyDiv,"removeClass","fade-out");
		  componentAction("story-button-div","removeClass","fade-in");
		  componentAction("story-button-div","removeClass","fade-out");
		  break;
	  };

	  if(bodyDiv != ""){
	    componentAction(bodyDiv,"removeClass","d-none");
	    $("#"+bodyDiv).append(storyDesc);
	    if(seqNumber == 1 || (seqNumber == 12 && hero.userGender.toLowerCase() == "female") || (seqNumber == 11 && hero.userGender.toLowerCase() == "male")) componentAction("prev-story-button","addClass","d-none");
	    else{
	      componentAction("prev-story-button","removeClass","d-none");
	      componentAction("prev-story-button","inputText",type+"="+(seqNumber-1));
	    }
	  
		if(seqNumber == countStory){
		  $("#next-story-button").html("Start the journey");
		  componentAction("next-story-button","inputText",type+"=finish");
		}else{
		  componentAction("next-story-button","inputText",type+"="+(seqNumber+1));
		  $("#next-story-button").html("Next");
		}
		componentAction("next-story-button","removeClass","d-none");
		componentAction("skip-story-button","removeClass","d-none");
	  }else{
		componentAction("prev-story-button","addClass","d-none");
		componentAction("next-story-button","addClass","d-none");
		componentAction("skip-story-button","addClass","d-none");
	  }
	}
  };
  
  var skipStory = function(){
	if(hero.kingdomName == ""){
	  switch(hero.userGender.toLowerCase()){
	    case "male":
		  showStory("prolog",10);
		  break;
	    case "female":
		  showStory("prolog",11);
		  break;
	  }; 
	}else showStory("prolog","finish");
  };
  
  var randomString = function (len,type="") {
	let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	if(type != "") characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	let charactersLength = characters.length;
	let result = "";
	
	for ( var i = 0; i < len; i++ ) {
	  result += characters.charAt(Math.floor(Math.random() * charactersLength));
	}
	return result;
  };
  
  var initDungeon = function() {
	let enemyHP = new Decimal(initEnemy());
	enemy.maxHp = enemyHP;
	if(currentEnemyHP <= 0) currentEnemyHP = enemy.maxHp;
	componentAction ("current-enemy-hp,max-enemy-hp", "replaceText", numberFormat(enemyHP));
	countHitHighestDpc = 0;
    countHitHighestDps = 0;
    countHitCurrentSlash = 0;
    countHitCurrentDpc = 0;
    countHitCurrentDps = 0;
	initDisplay();
	return enemyHP;
  };
  
  var initDisplay = function(){
	if(!$("#body-area-div").hasClass("d-none")){
	  componentAction("total-produce-coin-div","updateClass","d-flex,d-none");
	  if( !$("#partner-area-div").hasClass("d-none")){
		updateUpgradeLevelFeeAllPartner();
	  }
	  if( !$("#skill-area-div").hasClass("d-none")){
		updateUpgradeLevelFeeAllSkill();
	  }
	  if( !$("#shop-area-div").hasClass("d-none")) showShopArea();
	  
	  if( !$("#labor-area-div").hasClass("d-none")){
		componentAction("total-produce-coin-div","updateClass","d-none,d-flex");
		showLaborArea();
	  }
	}
	
	if( !$("#dungeon-div").hasClass("d-none")){
	  updateHeroCoin();
	  updateHeroDps();
	  showBuyArea();
	  showOrbsArea();
	}
	
	if( !$("#bank-area-div").hasClass("d-none")) updateHeroCoin();
	
	if( !$("#body-area-div").hasClass("d-none")){
	  if( !$("#hero-area-div").hasClass("d-none")){
		updateUpgradeLevelFeeHero();
	    updateUpgradeLevelFeeWeapon();
		updateHeroLevel();
	    updateCompanion();
		showWeaponArea();
		updateWeaponDpc();
		updateHeroDpc();
	  }
	}
	showBodyArea();
	showPartnerArea();
	showSkillArea();
	showAutoProgress();
	
	showFloorNumber();
	showPrestigeArea();
	if(!$("#gods-div").hasClass("d-none") && !$("#temple-area-div").hasClass("d-none")) showTempleArea();
	saveGame();
	checkCssSetting();
  };
  
  var formulaBossTimer = function(){
	let maxBossTimer = ((setting.baseBossTimeLimit * 1) + (hero.bonusBossTimeLimit * 1)) / setting.gameSpeed;
	return maxBossTimer;
  };
  
  var runBossTimer = function(showAnimation=false){
	let maxBossTimer = formulaBossTimer() * 1000;
	if(showAnimation){
	  let widthTimerBar = new Decimal(restBossTimer).div(maxBossTimer).mul(100);
	  componentAction("timer-bar", "animate", widthTimerBar);
	  componentAction("current-boss-timer-img","removeClass","d-none");
	  componentAction("current-boss-timer","replaceText",(restBossTimer/1000)+"s");
	}
  };
  
  var stopTowerBossTimer = function(){
	towerBossTimeout = clearTimeout(towerBossTimeout);
	towerDpsTimeout = clearTimeout(towerDpsTimeout);
	towerBossTimeout = undefined;
	towerDpsTimeout = undefined;
	
	let unlockTower = hero.unlockTower.find(item => item.id === selectedTowerId);
	if(unlockTower){
	  if(currentTowerManagerHp.lessThanOrEqualTo(0) && restTowerBossTimer > 0){
	    unlockTower.currentFloor += 1;
	    unlockTower.availableKey -= 1;
	    let currentReward = checkTowerReward(selectedTowerId, selectedTowerFloor);
	    getTowerReward(selectedTowerId,currentReward);
	  }else if(currentTowerManagerHp.greaterThan(0) && restTowerBossTimer <= 0){
	    $("#modalActionTower").modal("show");
	    componentAction ("tower-information-div", "replaceText", "You failed to killed the tower manager",true);
	    componentAction("tower-information-ok-button","inputValue","failed",true);
	    showDetailTowerArea(selectedTowerId,true);
	    $("#tower-battle-area-"+selectedTowerId).remove();
	  }
	}
	ifvisible.focus();
	componentAction("accordionSidebar","removeClass","d-none",true);
	componentAction("sidebarToggleTop","removeClass","d-none",true); 
  };
  
  var stopBossTimer = function(){
	if($("#timer-bar").hasClass("timer-bar-bgcolor")){
	  $("#timer-bar").removeClass("timer-bar-bgcolor");
	}
	hero.floor--;
	lastBossTimer = undefined;
	restBossTimer = undefined;
	currentEnemyHP = initDungeon();
	componentAction ("progress-bar", "animate", 100);
	  
	hero.autoProgressShow = 1;
	setting.autoProgress = false;
	showAutoProgress();
	bossTimeout = clearTimeout(bossTimeout);  
  };
  
  var startBossTimer = function(){
	restBossTimer = formulaBossTimer() * 1000;
	lastBossTimer = Date.now();
	loopBossTimer();
  };
  
  var loopBossTimer = function(){
	if(hero.floor % enemy.bossFloor == 0){
	  let newBossInterval = 1000 / setting.gameSpeed;
	  let interval = Date.now() - lastBossTimer;
	  while(interval >= (newBossInterval*2) && (lastBossTimer+newBossInterval) < Date.now()){
	    interval -= newBossInterval;
	    lastBossTimer += newBossInterval;
	    restBossTimer -= newBossInterval;
	  }
	  runBossTimer(true);
	  lastBossTimer += newBossInterval;
	  restBossTimer -= newBossInterval;
	
	  if(restBossTimer > 0) bossTimeout = setTimeout(loopBossTimer, (newBossInterval - interval));
	  else stopBossTimer();
	}
  };

  var initEnemy = function(){
	let currentEnemyHPMultiplier = new Decimal(hero.floor).div(10).floor().mul(0.001).plus(setting.enemyHPMultiplier);
	let baseEnemyHP = new Decimal(currentEnemyHPMultiplier).pow(hero.floor-1).mul(enemy.baseHp);
	let enemyHpPercentage = new Decimal(100).sub(hero.bonusEnemyHpPercentage).div(100);
	let enemyHP = baseEnemyHP.mul(enemyHpPercentage);
	addedCoin = false;
	
	if(bossTimeout)bossTimeout = clearTimeout(bossTimeout);
	if(hero.floor % enemy.bossFloor == 0){
	  let index = (((hero.floor/10)-1)%enemy.listBoss.length);
	  let bossHpPercentage = new Decimal(100).sub(hero.bonusBossHpPercentage).div(100);
	  componentAction ("current-enemy-name", "replaceText", enemy.listBoss[index]);
	  componentAction ("timer-bar", "animate", 100);
	  
	  enemyHP = enemyHP.mul(2.5);
	  enemyHP = enemyHP.mul(bossHpPercentage);
	  componentAction ("timer-bar", "addClass", "timer-bar-bgcolor");
	  
	  restBossTimer = formulaBossTimer() * 1000;
	  lastBossTimer = Date.now();
	  if(!bossTimeout) startBossTimer();
	}else{
	  let index = (hero.floor%100)-Math.ceil((hero.floor%100)/10);
	  componentAction ("current-enemy-name", "replaceText", enemy.listName[index]);
	  componentAction ("timer-bar", "removeClass", "timer-bar-bgcolor");
	  componentAction("current-boss-timer-img","addClass","d-none");
	  componentAction("current-boss-timer","replaceText","");
	  restBossTimer = undefined;
	}		
	return (enemyHP.ceil());
  };
  
  var insertPartnerAbility = function(partnerId, partnerDataType, abilityTypeId=0){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let abilityTypeData = abilityType.find(item => item.id === abilityTypeId);
	let partnerAbilityData = partnerAbility.find(item => item.partnerType === partnerDataType && item.abilityTypeId === abilityTypeId);
	let highestUnlockPartnerAbility = highestUnlockPartner.ability.find(item => item.abilityId === partnerAbilityData.id);
	
	if(partnerAbilityData && abilityTypeData && !highestUnlockPartnerAbility){
	  let newPartnerAbility = {
		abilityId: partnerAbilityData.id,
		abilityLevel: 1,
		maxLevel: 100,
		trainingTime: 0,
		trainingStatus: false,
		tempAbilityPoint: 0,
		abilityPoint: 0,
		exp: 0,
		maxExp: 10,
		baseInterval: abilityTypeData.interval,
		interval: abilityTypeData.interval,
		tempAccuracy: 0,
		accuracy: abilityTypeData.accuracy,
		tempDamage: 0,
		damage: abilityTypeData.damage,
		isActive: false,
		newAbility: true,
	  };
	  highestUnlockPartner.ability.push(newPartnerAbility);
	}  
  };
  
  var collectSoul = function(soulCount=1){
	soulCount *= 1;
	hero.soul += soulCount;
	updateTask(22,soulCount);
  };
  
  var checkAction = function(showAnimation=false,idleLoop=1) {
	idleLoop *= 1;
	if(idleLoop == 1){
	  if(currentEnemyHP.lessThanOrEqualTo(0)){
	    if(showAnimation) componentAction ("progress-bar", "animate", 100);	
	    let rewardCoin = calcTotalRewardCoin();
	    let extraCoin = new Decimal(runExtraCoin(rewardCoin));
		let totalCoinGain = new Decimal(rewardCoin).plus(extraCoin);
		dungeonBattleLog = '<img src="assets/images/win.svg" class="image-size"></img>&nbsp;Enemy was killed. Gain '+numberFormat(totalCoinGain)+'&nbsp;'+dungeonBattleLog+'<img src="assets/images/coin.svg" class="image-size-2"></img><br/>';
		writeDungeonBattleLog(dungeonBattleLog,totalCoinGain);
	    hero.coin = new Decimal(hero.coin).plus(totalCoinGain).ceil();
	    hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(totalCoinGain).ceil();
		addedCoin = true;
		showBodyArea();
		if(tutorialAnimation == "world1" && new Decimal(hero.coin).greaterThanOrEqualTo(setting.baseHeroUpgradeCoin) && tutorialFunction.data.length == 0){
		  startTutorialAnimation("world2");
		}
	    if(setting.autoProgress){	
		  if(hero.floor % enemy.bossFloor != 0){
		    updateTask(5);
			updateAchievement(5);
		    hero.totalNormalEnemyKilled += 1;
		    let randomSkipFloorChance = Math.random()*100;
		    if(randomSkipFloorChance <= hero.bonusChanceSkipFloorPercentage && hero.floor < setting.limitFloor){
		      hero.floor++;
		      updateTask(10);
	        }
			if(tutorialAnimation == "world1") nextTutorial();
		  }else{
		    updateTask(6);
			updateAchievement(6);
		    hero.totalBossEnemyKilled++;
		    lastBossTimer = undefined;
		    restBossTimer = undefined;
		  }
		  collectSoul();
		  
		  if(hero.floor < setting.limitFloor){
		    hero.floor++;
		    updateTask(10);
	      }
		  
		  if(hero.maxFloor < hero.floor){
		    hero.maxFloor = hero.floor;
		    runStealOrbs();
		  }
		  if(!$("#skill-area-div").hasClass("d-none")){
		    showSkillArea();
		  }
	    }else{
		  if(hero.floor % enemy.bossFloor == 0){
		    updateTask(6);
			updateAchievement(6);
		    hero.totalBossEnemyKilled++;
		  }else{
		    updateTask(5);
			updateAchievement(5);
		    hero.totalNormalEnemyKilled += 1;
		  }
		  collectSoul();
		  if(hero.maxFloor < (hero.floor + 1) && hero.floor < setting.limitFloor){
		    hero.maxFloor = hero.floor + 1;
		    if(hero.floor % enemy.bossFloor == 0){
			  lastBossTimer = undefined;
			  restBossTimer = undefined;
			  updateTask(10);
		    }
		  }
	    }
	    if(hero.highestFloor < hero.maxFloor) hero.highestFloor = hero.maxFloor;
	    currentEnemyHP = initDungeon();
	    unlockNewPet();
	    unlockNewFeatures();
	  }
	  if(hero.maxFloor == unlockNewFeatureFloor("artifact") && hero.totalGainOrbs == 0 && notifCanPrestige == true) {
	    updateTab('hero');
	    $("#modalNotifPrestige").modal('show');
	    notifCanPrestige = false;
	  }
	  if(showAnimation) initDisplay();
	}else if(idleLoop > 1){
	  let rewardCoin = new Decimal(calcTotalRewardCoin(true,true));
	  let extraCoin = new Decimal(runExtraCoin(rewardCoin));
	  let totalCoin = rewardCoin.plus(extraCoin).mul(idleLoop);

	  hero.coin = new Decimal(hero.coin).plus(totalCoin).ceil();
	  hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(totalCoin).ceil();
	  addedCoin = true;
	  
	  if(hero.floor % enemy.bossFloor != 0){
		updateTask(5,idleLoop);
		hero.totalNormalEnemyKilled += idleLoop;
	  }else{
		updateTask(6,idleLoop);
		hero.totalBossEnemyKilled += idleLoop;
	  }
	  collectSoul(idleLoop);
	}
  };
  
  var updateTask = function(taskId, addCount=1){
	if(taskId != 11) addCount = parseInt(addCount,10);
	switch(taskId){
	  case 2:
	    updateAchievement(4);
	    break;
	  case 3:
	    updateAchievement(7);
		break;
	  case 4:
	    updateAchievement(9);
		break;
	  case 5:
	    updateAchievement(5);
		break;
	  case 6:
	    updateAchievement(6);
		break;
	};		
	let unlockDailyTask = hero.dailyTask.task.find(item => item.id === taskId);
	let unlockWeeklyTask = hero.weeklyTask.task.find(item => item.id === taskId);
	let unlockMonthlyTask = hero.monthlyTask.task.find(item => item.id === taskId);
	let taskData = dailyTask.find(item => item.id === taskId);
	let dailyTaskRequired = taskData.required;
	let weeklyTaskRequired = taskData.required * setting.weeklyTaskMultiplier;
	let monthlyTaskRequired = taskData.required * setting.monthlyTaskMultiplier;
	if(taskId == 0){
	  weeklyTaskRequired = taskData.required;
	  monthlyTaskRequired = taskData.required;
	}
	if(unlockDailyTask && unlockDailyTask.count < dailyTaskRequired){
	  if(unlockDailyTask.count == null || unlockDailyTask.count == NaN) unlockDailyTask.count = 0;
	  switch(taskId){
		case 0:
		  let completeTask = hero.dailyTask.task.filter(item => item.complete === true && item.id != 0);
		  unlockDailyTask.count = completeTask.length;
		  break;
	    case 11:
		  unlockDailyTask.count = unlockDailyTask.count + (addCount/60);
		  break;
		default:
		  unlockDailyTask.count = unlockDailyTask.count + (addCount*1);
		  break;
	  }
	  if(unlockDailyTask.count >= dailyTaskRequired){
		unlockDailyTask.count = dailyTaskRequired;
		unlockDailyTask.complete = true;
		updateTask(0);
		if(!hero.token) hero.token = new Decimal(0);
		hero.token = new Decimal(hero.token).plus(taskData.prize);
	  }
	}
	
	if(unlockWeeklyTask && unlockWeeklyTask.count < weeklyTaskRequired){
	  if(unlockWeeklyTask.count == null || unlockWeeklyTask.count == NaN) unlockWeeklyTask.count = 0;
	  switch(taskId){
		case 0:
		  let completeTask = hero.weeklyTask.task.filter(item => item.complete === true && item.id != 0);
		  unlockWeeklyTask.count = completeTask.length;
		  break;
	    case 11:
		  unlockWeeklyTask.count = unlockWeeklyTask.count + (addCount/60);
		  break;
		default:
		  unlockWeeklyTask.count = unlockWeeklyTask.count + addCount;
		  break;
	  }
	  if(unlockWeeklyTask.count >= weeklyTaskRequired){
		unlockWeeklyTask.count = weeklyTaskRequired;
		unlockWeeklyTask.complete = true;
		updateTask(0);
		if(!hero.token) hero.token = new Decimal(0);
		hero.token = new Decimal(taskData.prize * setting.weeklyTaskMultiplier).plus(hero.token);
	  }
	}
	
	if(unlockMonthlyTask && unlockMonthlyTask.count < monthlyTaskRequired){
	  if(unlockMonthlyTask.count == null || unlockMonthlyTask.count == NaN) unlockMonthlyTask.count = 0;
	  switch(taskId){
		case 0:
		  let completeTask = hero.monthlyTask.task.filter(item => item.complete === true && item.id != 0);
		  unlockMonthlyTask.count = completeTask.length;
		  break;
	    case 11:
		  unlockMonthlyTask.count = unlockMonthlyTask.count + (addCount/60);
		  break;
		default:
		  unlockMonthlyTask.count = unlockMonthlyTask.count + addCount;
		  break;
	  }
	  if(unlockMonthlyTask.count >= monthlyTaskRequired){
		unlockMonthlyTask.count = monthlyTaskRequired;
		unlockMonthlyTask.complete = true;
		updateTask(0);
		if(!hero.token) hero.token = new Decimal(0);
		hero.token = new Decimal(taskData.prize * setting.monthlyTaskMultiplier).plus(hero.token);
	  }
	}
	
	if(!$("#daily-task-div").hasClass("d-none") && !$("#daily-task-area-div").hasClass("d-none")) showDailyTaskArea();
	if(!$("#daily-task-div").hasClass("d-none") && !$("#weekly-task-area-div").hasClass("d-none")) showWeeklyTaskArea();
	if(!$("#daily-task-div").hasClass("d-none") && !$("#monthly-task-area-div").hasClass("d-none")) showMonthlyTaskArea();
  };
  
  ifvisible.setIdleDuration(30);  
  ifvisible.on('blur', function(e){
	if(lastActiveMenu != 'first-story' && lastActiveMenu != 'registration'){
	saveGame();
	ifvisible.idle();
	runBackgroundCalculation(true, function(){
	  lastActiveScreen = activeScreen;
	  activeScreen = false;
	});
	}
  });
  
  ifvisible.on('idle', function(e){
	if(lastActiveScreen != activeScreen && lastActiveMenu != 'first-story' && lastActiveMenu != 'registration'){
	  runBackgroundCalculation(true, function(){
	    lastActiveScreen = activeScreen;
	    activeScreen = false;
	  });
	}  
  });
  
  ifvisible.on('focus', function(e){
	if(lastActiveMenu != 'first-story' && lastActiveMenu != 'registration'){
	let newDpsInterval = formulaIntervalDps();
	let testTimeout = setTimeout (function() {
	  calcIdleTime(function(){
		lastActiveScreen = activeScreen;
		activeScreen = true;
	    runBackgroundCalculation(false, function(){
		  ifvisible.off('idle');
		  currentEnemyHP = initDungeon();
		  componentAction ("progress-bar", "animate", 100);
		  startAllTimer();
		  componentAction("max-enemy-hp","replaceText",numberFormat(enemy.maxHp));
	    });
	  });
	},25);
	}
  });
  
  ifvisible.on('awake', function(e){
	if(lastActiveMenu != 'first-story' && lastActiveMenu != 'registration') ifvisible.focus();
  });
  
  var stopAllTimer = function(){
	if(dpsTimeout) dpsTimeout = clearTimeout(dpsTimeout);
	if(bossTimeout) bossTimeout = clearTimeout(bossTimeout);
	if(everySecTimeout) everySecTimeout = clearTimeout(everySecTimeout);
	if(autoClickerDuration) autoClickerDuration = clearInterval(autoClickerDuration);
	if(autoClickerInterval) autoClickerInterval = clearInterval(autoClickerInterval);
	if(powerShotInterval) powerShotInterval = clearInterval(powerShotInterval);
	if(specialForceInterval) specialForceInterval = clearInterval(specialForceInterval);
	if(luckyCoinInterval) luckyCoinInterval = clearInterval(luckyCoinInterval);
	if(billionaireTimeout) billionaireTimeout = clearTimeout(billionaireTimeout);
	if(towerDpsTimeout) towerDpsTimeout = clearTimeout(towerDpsTimeout);
	if(towerBossTimeout) towerBossTimeout = clearTimeout(towerBossTimeout);
	if(grimReaperDuration) grimReaperDuration = clearInterval(grimReaperDuration);
	if(grimReaperTimeout) grimReaperTimeout = clearTimeout(grimReaperTimeout);
  };
  
  var startAllTimer = function(){
	startDpsInterval();
	startEverySecInterval();
	
	let runningSkill = hero.unlockSkill.filter(item => item.isActive === true);
	for(let i=0;i<runningSkill.length;i++){
	  useSkill(runningSkill[i].id);
	}
  };
  
  var runBackgroundCalculation = function(startRunning=false, callback){
	if(startRunning){
	  stopAllTimer();
	
	  if($("#background-process-div").hasClass("d-none")){
		hideAllContent();
		$("#background-process-div").removeClass("d-none");
	  }
	  callback();
	}else{
	  if(!$("#background-process-div").hasClass("d-none")){
		$("#background-process-div").addClass("d-none");
		showLastContent();
	  }
	  callback();
	}
  };

  var componentAction = function(componentId, action, actionValue, forceRun=false){
	if(activeScreen || forceRun){
	  let arrayComponentId = componentId.split(',');
	  for(let i=0; i<arrayComponentId.length; i++){
	    switch (action) {
		  case 'addClass':
		    $("#"+arrayComponentId[i]).addClass(actionValue);
		    break;
		  case 'removeClass':
		    $("#"+arrayComponentId[i]).removeClass(actionValue);
		    break;
		  case 'updateClass':
		    let arrayActionValue = actionValue.split(',');
		    $("#"+arrayComponentId[i]).removeClass(arrayActionValue[0]).addClass(arrayActionValue[1]);
		    break;
		  case 'replaceText':
		    if(!isNaN(actionValue) && actionValue != '') actionValue = numberFormat(actionValue);
		    if($("#"+arrayComponentId[i]).text() != actionValue) $("#"+arrayComponentId[i]).text(actionValue);
		    break;
		  case 'inputText':
		    $("#"+arrayComponentId[i]).val(actionValue);
		    break;
		  case 'clearText':
		    $("#"+arrayComponentId[i]).empty();
		    break;
		  case 'clearArea':
		    $("#"+arrayComponentId[i]).val('');
		    break;
		  case 'animate':
		    let barPercentage = new Decimal(actionValue).toPrecision(5);
		    $("#"+arrayComponentId[i]).animate({width: barPercentage+"%"},1);
		    break;  
	    }
	  }
    }
  };
  
  var updateAchievement = function(achievementId){
	let unlockAchievement = hero.achievement.find(item => item.id === achievementId);
	if(unlockAchievement){
	  switch(achievementId){
		case 0:
		  unlockAchievement.balance = new Decimal(hero.highestDpc);
		  break;
		case 1:
		  unlockAchievement.balance = new Decimal(hero.highestDps);
		  break;
		case 2:
		  unlockAchievement.balance = new Decimal(hero.totalGainCoin).plus(hero.totalOfflineCoin);
		  break;
		case 3:
		  unlockAchievement.balance = new Decimal(hero.totalGainOrbs);
		  break;
		case 4:
		  unlockAchievement.balance = new Decimal(hero.totalCountPrestige);
		  break;
		case 5:
		  unlockAchievement.balance = new Decimal(hero.totalNormalEnemyKilled);
		  break;
		case 6:
		  unlockAchievement.balance = new Decimal(hero.totalBossEnemyKilled);
		  break;
		case 7:
		  let totalUsedSkill = new Decimal(0);
		  for(let i=0;i<hero.totalSkillUsed.length;i++){
			totalUsedSkill = totalUsedSkill.plus(new Decimal(hero.totalSkillUsed[i].count));
		  }
		  unlockAchievement.balance = new Decimal(totalUsedSkill);
		  break;
		case 8:
		  unlockAchievement.balance = new Decimal(hero.countArtifact);
		  break;
		case 9:
		  let totalUpgradeLevel = new Decimal(0);
		  for(let i=0;i<hero.unlockArtifact.length;i++){
			totalUpgradeLevel = new Decimal(hero.unlockArtifact[i].level).plus(totalUpgradeLevel);
		  }
		  unlockAchievement.balance = new Decimal(totalUpgradeLevel);
		  break;  
	  };
	  let achievementTarget = new Decimal(unlockAchievement.target);
	  if(unlockAchievement.balance.greaterThanOrEqualTo(achievementTarget)){
		showNotifIcon("achievement-button-"+achievementId);
		showNotifIcon("achievement");
		showNotifIcon("info-div");
	  }
	  if(!$("#achievement-div").hasClass("d-none") && !$("#achievement-area-div").hasClass("d-none")) showAchievementArea();
	}
  };
  
  var calculateAllAchievementTarget = function(unlockAchievement, achievementData){
	if(achievementData.targetMultiplier > 1) unlockAchievement.target = new Decimal(unlockAchievement.target).mul(achievementData.targetMultiplier);
	else unlockAchievement.target = new Decimal(unlockAchievement.target).plus(achievementData.targetMultiplier);  
  };
  
  var calculateAllAchievement = function(){
	for(let i=0;i<hero.achievement.length;i++){
	  updateAchievement(i);
	}		
  };
  
  var updateArtifactUpgradeFee = function(artifactId){
	let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
	unlockArtifact.upgradeFee = new Decimal(formulaArtifactUpgradeFee(artifactId));
  };
  
  var calculateAllArtifactDamage = function(firstRun=false){
	let artifactDamage = new Decimal(0);
	let artifactDpc = new Decimal(0);
	let artifactDps = new Decimal(0);
	let artifactCoin = new Decimal(0);
	let artifactBossCoin = new Decimal(0);
	let artifactOrbs = new Decimal(0);
	let artifactBossTimeLimit = new Decimal(0);
	let artifactOfflineTimeLimit = new Decimal(0);
	let artifactOfflineDps = new Decimal(0);
	let artifactOfflineCoin = new Decimal(0);
	let artifactIntervalDps = new Decimal(0);
	let artifactIntervalGrimReaper = new Decimal(0);
	let artifactEnemyHp = new Decimal(0);
	let artifactBossHp = new Decimal(0);
	let artifactHeroUpgradeFee = new Decimal(0);
	let artifactWeaponUpgradeFee = new Decimal(0);
	let artifactPartnerUpgradeFee = new Decimal(0);
	let artifactSkillUpgradeFee = new Decimal(0);
	let artifactChanceSkipFloor = new Decimal(0);
	let artifactAdventureExp = new Decimal(0);
	let artifactAdventureCoin = new Decimal(0);
	let artifactAdventureTime = new Decimal(0);
	let artifactDoubleAdventure = new Decimal(0);
	let artifactRerollFeePercentage = new Decimal(0);
	let artifactUnlockFeePercentage = new Decimal(0);
	let artifactUpgradeFeePercentage = new Decimal(0);
	
	let artifactMeleeDps = new Decimal(0);
	let artifactStealthDps = new Decimal(0);
	let artifactSwordDps = new Decimal(0);
	let artifactRangedDps = new Decimal(0);
	let artifactMagicDps = new Decimal(0);
	let artifactFirearmDps = new Decimal(0);
	let artifactRuneDps = new Decimal(0);
	let artifactAllDamage = new Decimal(0);
	let artifactAllCoin = new Decimal(0);
	let artifactAbilityPercentage = new Decimal(0);
	
	let artifactMeleeAbilityPercentage = new Decimal(0);
	let artifactStealthAbilityPercentage = new Decimal(0);
	let artifactSwordAbilityPercentage = new Decimal(0);
	let artifactRangedAbilityPercentage = new Decimal(0);
	let artifactMagicAbilityPercentage = new Decimal(0);
	let artifactFirearmAbilityPercentage = new Decimal(0);
	let artifactRuneAbilityPercentage = new Decimal(0);
	
	let artifactCritChancePercentage = new Decimal(0);
	let artifactCritDamagePercentage = new Decimal(0);
	
	let artifactMeleeCritChancePercentage = new Decimal(0);
	let artifactStealthCritChancePercentage = new Decimal(0);
	let artifactSwordCritChancePercentage = new Decimal(0);
	let artifactRangedCritChancePercentage = new Decimal(0);
	let artifactMagicCritChancePercentage = new Decimal(0);
	let artifactFirearmCritChancePercentage = new Decimal(0);
	let artifactRuneCritChancePercentage = new Decimal(0);
	
	let artifactMeleeCritDamagePercentage = new Decimal(0);
	let artifactStealthCritDamagePercentage = new Decimal(0);
	let artifactSwordCritDamagePercentage = new Decimal(0);
	let artifactRangedCritDamagePercentage = new Decimal(0);
	let artifactMagicCritDamagePercentage = new Decimal(0);
	let artifactFirearmCritDamagePercentage = new Decimal(0);
	let artifactRuneCritDamagePercentage = new Decimal(0);
	
	let artifactAllWeaponDamagePercentage = new Decimal(0);
	let artifactMeleeWeaponDamagePercentage = new Decimal(0);
	let artifactStealthWeaponDamagePercentage = new Decimal(0);
	let artifactSwordWeaponDamagePercentage = new Decimal(0);
	let artifactRangedWeaponDamagePercentage = new Decimal(0);
	let artifactMagicWeaponDamagePercentage = new Decimal(0);
	let artifactFirearmWeaponDamagePercentage = new Decimal(0);
	let artifactRuneWeaponDamagePercentage = new Decimal(0);
	
	let artifactTowerTimeLimit = new Decimal(0);
	let artifactTowerHp = new Decimal(0);
	let artifactTowerDamage = new Decimal(0);
	
	let artifactCoinLaborUpgradeFee = new Decimal(0);
	let artifactCoinLaborYield = new Decimal(0);
	
	for(let i=0; i<hero.countArtifact; i++){
	  let unlockArtifact = hero.unlockArtifact[i];
	  let artifactData = artifact.find(item => item.id === unlockArtifact.id);
	  if(unlockArtifact.type != artifactData.type) unlockArtifact.type = artifactData.type;;
	  updateArtifactUpgradeFee(unlockArtifact.id);
	  let totalDamage = new Decimal(unlockArtifact.level * artifactData.baseDamage);
	  artifactDamage = new Decimal(unlockArtifact.level).div(10).ceil().mul(artifactData.tier * unlockArtifact.level * 5).plus(artifactDamage);
	  
	  unlockArtifact.damage = totalDamage;
	  switch (unlockArtifact.id){
		case 0:
		  artifactCoin = artifactCoin.plus(totalDamage);
		  break;
		case 1:
		  artifactBossCoin = artifactBossCoin.plus(totalDamage);
		  break;
		case 2:
		case 3:
		  artifactDpc = artifactDpc.plus(totalDamage);
		  break;
		case 4:
		  artifactDps = artifactDps.plus(totalDamage);
		  break;
		case 5:
		  artifactOfflineCoin = artifactOfflineCoin.plus(totalDamage);
		  break;
		case 6:
		  artifactOfflineDps = artifactOfflineDps.plus(totalDamage);
		  break;
		case 7:
		  artifactDamage = artifactDamage.plus(totalDamage);
		  break;
		case 8:
		  artifactOrbs = artifactOrbs.plus(totalDamage);
		  break;
		case 9:
		  artifactOfflineTimeLimit = artifactOfflineTimeLimit.plus(totalDamage);
		  break;
		case 10:
		  artifactIntervalDps = artifactIntervalDps.plus(totalDamage);
		  hero.bonusIntervalDps = artifactIntervalDps;
		  if(!firstRun) startDpsInterval(true);
		  break;
		case 11:
		  artifactIntervalGrimReaper = artifactIntervalGrimReaper.plus(totalDamage);
		  break;
		case 27:
		  artifactBossTimeLimit = artifactBossTimeLimit.plus(totalDamage);
		  break;
		case 28:
		  artifactEnemyHp = artifactEnemyHp.plus(totalDamage);
		  break;
		case 29:
		  artifactBossHp = artifactBossHp.plus(totalDamage);
		  break;
		case 30:
		  artifactHeroUpgradeFee = artifactHeroUpgradeFee.plus(totalDamage);
		  break;
		case 31:
		  artifactWeaponUpgradeFee = artifactWeaponUpgradeFee.plus(totalDamage);
		  break;
		case 32:
		  artifactPartnerUpgradeFee = artifactPartnerUpgradeFee.plus(totalDamage);
		  break;
		case 33:
		  artifactSkillUpgradeFee = artifactSkillUpgradeFee.plus(totalDamage);
		  break;
		case 34:
		  artifactChanceSkipFloor = artifactChanceSkipFloor.plus(totalDamage);
		  break;
		case 38:
		  artifactAdventureExp = artifactAdventureExp.plus(totalDamage);
		  break;
		case 39:
		  artifactAdventureCoin = artifactAdventureCoin.plus(totalDamage);
		  break;
		case 40:
		  artifactAdventureTime = artifactAdventureTime.plus(totalDamage);
		  break;
		case 41:
		  artifactDoubleAdventure = artifactDoubleAdventure.plus(totalDamage);
		  break;
		case 42:
		  artifactRerollFeePercentage = artifactRerollFeePercentage.plus(totalDamage);
		  break;
		case 43:
		  artifactUnlockFeePercentage = artifactUnlockFeePercentage.plus(totalDamage);
		  break;
		case 44:
		  artifactUpgradeFeePercentage = artifactUpgradeFeePercentage.plus(totalDamage);
		  break; 
		case 45:
		  artifactMeleeDps = artifactMeleeDps.plus(totalDamage);
		  break;
		case 46:
		  artifactStealthDps = artifactStealthDps.plus(totalDamage);
		  break;
		case 47:
		  artifactSwordDps = artifactSwordDps.plus(totalDamage);
		  break;
		case 48:
		  artifactRangedDps = artifactRangedDps.plus(totalDamage);
		  break;
		case 49:
		  artifactMagicDps = artifactMagicDps.plus(totalDamage);
		  break;
		case 50:
		  artifactFirearmDps = artifactFirearmDps.plus(totalDamage);
		  break;
		case 51:
		  artifactRuneDps = artifactRuneDps.plus(totalDamage);
		  break;  
		case 52:
		  artifactAllDamage = artifactAllDamage.plus(totalDamage);
		  break;
		case 53:
		  artifactAllCoin = artifactAllCoin.plus(totalDamage);
		  break;
		case 54:
		  artifactAbilityPercentage = artifactAbilityPercentage.plus(totalDamage);
		  break;
		case 55:
		  artifactMeleeAbilityPercentage = artifactMeleeAbilityPercentage.plus(totalDamage);
		  break;
		case 56:
		  artifactStealthAbilityPercentage = artifactStealthAbilityPercentage.plus(totalDamage);
		  break;
		case 57:
		  artifactSwordAbilityPercentage = artifactSwordAbilityPercentage.plus(totalDamage);
		  break;
		case 58:
		  artifactRangedAbilityPercentage = artifactRangedAbilityPercentage.plus(totalDamage);
		  break; 
		case 59:
		  artifactMagicAbilityPercentage = artifactMagicAbilityPercentage.plus(totalDamage);
		  break;
		case 60:
		  artifactFirearmAbilityPercentage = artifactFirearmAbilityPercentage.plus(totalDamage);
		  break;
		case 61:
		  artifactRuneAbilityPercentage = artifactRuneAbilityPercentage.plus(totalDamage);
		  break;
		case 62:
		  artifactCritChancePercentage = artifactCritChancePercentage.plus(totalDamage);
		  break;
		case 63:
		  artifactCritDamagePercentage = artifactCritDamagePercentage.plus(totalDamage);
		  break;
		case 64:
		  artifactMeleeCritChancePercentage = artifactMeleeCritChancePercentage.plus(totalDamage);
		  break;
		case 65:  
		  artifactStealthCritChancePercentage = artifactStealthCritChancePercentage.plus(totalDamage);
		  break;
		case 66:
		  artifactSwordCritChancePercentage = artifactSwordCritChancePercentage.plus(totalDamage);
		  break;
		case 67:
		  artifactRangedCritChancePercentage = artifactRangedCritChancePercentage.plus(totalDamage);
		  break;
		case 68:
		  artifactMagicCritChancePercentage = artifactMagicCritChancePercentage.plus(totalDamage);
		  break;
		case 69:
		  artifactFirearmCritChancePercentage = artifactFirearmCritChancePercentage.plus(totalDamage);
		  break;
		case 70:
		  artifactRuneCritChancePercentage = artifactRuneCritChancePercentage.plus(totalDamage);
		  break;
		case 71:
		  artifactMeleeCritDamagePercentage = artifactMeleeCritDamagePercentage.plus(totalDamage);
		  break;
		case 72:
		  artifactStealthCritDamagePercentage = artifactStealthCritDamagePercentage.plus(totalDamage);
		  break;
		case 73:
		  artifactSwordCritDamagePercentage = artifactSwordCritDamagePercentage.plus(totalDamage);
		  break;
		case 74:
		  artifactRangedCritDamagePercentage = artifactRangedCritDamagePercentage.plus(totalDamage);
		  break;
		case 75:  
		  artifactMagicCritDamagePercentage = artifactMagicCritDamagePercentage.plus(totalDamage);
		  break;
		case 76:  
		  artifactFirearmCritDamagePercentage = artifactFirearmCritDamagePercentage.plus(totalDamage);
		  break;
		case 77:  
		  artifactRuneCritDamagePercentage = artifactRuneCritDamagePercentage.plus(totalDamage);
		  break;
		case 78:
		  artifactMeleeWeaponDamagePercentage = artifactMeleeWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 79:  
		  artifactStealthWeaponDamagePercentage = artifactStealthWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 80:  
		  artifactSwordWeaponDamagePercentage = artifactSwordWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 81:
		  artifactRangedWeaponDamagePercentage = artifactRangedWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 82:  
		  artifactMagicWeaponDamagePercentage = artifactMagicWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 83:
		  artifactFirearmWeaponDamagePercentage = artifactFirearmWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 84:
		  artifactRuneWeaponDamagePercentage = artifactRuneWeaponDamagePercentage.plus(totalDamage);
		  break;
		case 85:
		  artifactTowerTimeLimit = artifactTowerTimeLimit.plus(totalDamage);
		  break;
		case 86:
		  artifactTowerHp = artifactTowerHp.plus(totalDamage);
		  break;
		case 87:
		  artifactTowerDamage = artifactTowerDamage.plus(totalDamage);
		  break;
		case 88:
		  artifactCoinLaborUpgradeFee = artifactCoinLaborUpgradeFee.plus(totalDamage);
		  break;
		case 89:  
		  artifactCoinLaborYield = artifactCoinLaborYield.plus(totalDamage);
		  break;
		case 90:
		  artifactAllWeaponDamagePercentage = artifactAllWeaponDamagePercentage.plus(totalDamage);
		  break;
	  }
	}
	artifactDamage = new Decimal(hero.countArtifact).div(5).ceil().mul(artifactDamage);
	
	hero.artifactDamagePercentage = artifactDamage;
	hero.bonusDpcPercentage = artifactDpc;
	hero.bonusDpsPercentage = artifactDps;
	hero.bonusCoinPercentage = artifactCoin;
	hero.bonusBossCoinPercentage = artifactBossCoin;
	hero.bonusOrbsPercentage = artifactOrbs;
	hero.bonusBossTimeLimit = artifactBossTimeLimit;
	hero.bonusOfflineTimeLimit = artifactOfflineTimeLimit;
	hero.bonusOfflineDpsPercentage = artifactOfflineDps;
	hero.bonusOfflineCoinPercentage = artifactOfflineCoin;
	hero.bonusIntervalGrimReaper = artifactIntervalGrimReaper;
	hero.bonusEnemyHpPercentage = artifactEnemyHp;
	hero.bonusBossHpPercentage = artifactBossHp;
	hero.bonusHeroUpgradeFeePercentage = artifactHeroUpgradeFee;
	hero.bonusWeaponUpgradeFeePercentage = artifactWeaponUpgradeFee;
	hero.bonusPartnerUpgradeFeePercentage = artifactPartnerUpgradeFee;
	hero.bonusSkillUpgradeFeePercentage = artifactSkillUpgradeFee;
	hero.bonusChanceSkipFloorPercentage = artifactChanceSkipFloor;
	hero.bonusAdventureExpPercentage = artifactAdventureExp;
	hero.bonusAdventureCoinPercentage = artifactAdventureCoin;
	hero.bonusAdventureTimePercentage = artifactAdventureTime;
	hero.bonusDoubleAdventurePercentage = artifactDoubleAdventure;
	hero.bonusArtifactRerollFeePercentage = artifactRerollFeePercentage;
	hero.bonusArtifactUnlockFeePercentage = artifactUnlockFeePercentage;
	hero.bonusArtifactUpgradeFeePercentage = artifactUpgradeFeePercentage;
	hero.bonusMeleeDpsPercentage = artifactMeleeDps;
	hero.bonusStealthDpsPercentage = artifactStealthDps;
	hero.bonusSwordDpsPercentage = artifactSwordDps;
	hero.bonusRangedDpsPercentage = artifactRangedDps;
	hero.bonusMagicDpsPercentage = artifactMagicDps;
	hero.bonusFirearmDpsPercentage = artifactFirearmDps;
	hero.bonusRuneDpsPercentage = artifactRuneDps;
	hero.bonusAllDamagePercentage = artifactAllDamage;
	hero.bonusAllCoinPercentage = artifactAllCoin;
	hero.bonusAbilityPercentage = artifactAbilityPercentage;
	hero.bonusMeleeAbilityPercentage = artifactMeleeAbilityPercentage;
	hero.bonusStealthAbilityPercentage = artifactStealthAbilityPercentage;
	hero.bonusSwordAbilityPercentage = artifactSwordAbilityPercentage;
	hero.bonusRangedAbilityPercentage = artifactRangedAbilityPercentage;
	hero.bonusMagicAbilityPercentage = artifactMagicAbilityPercentage;
	hero.bonusFirearmAbilityPercentage = artifactFirearmAbilityPercentage;
	hero.bonusRuneAbilityPercentage = artifactRuneAbilityPercentage;
	hero.bonusCritChancePercentage = artifactCritChancePercentage;
	hero.bonusCritDamagePercentage = artifactCritDamagePercentage;
	
	hero.bonusMeleeCritChancePercentage = artifactMeleeCritChancePercentage;
	hero.bonusStealthCritChancePercentage = artifactStealthCritChancePercentage;
	hero.bonusSwordCritChancePercentage = artifactSwordCritChancePercentage;
	hero.bonusRangedCritChancePercentage = artifactRangedCritChancePercentage;
	hero.bonusMagicCritChancePercentage = artifactMagicCritChancePercentage;
	hero.bonusFirearmCritChancePercentage = artifactFirearmCritChancePercentage;
	hero.bonusRuneCritChancePercentage = artifactRuneCritChancePercentage;
	
	hero.bonusMeleeCritDamagePercentage = artifactMeleeCritDamagePercentage;
	hero.bonusStealthCritDamagePercentage = artifactStealthCritDamagePercentage;
	hero.bonusSwordCritDamagePercentage = artifactSwordCritDamagePercentage;
	hero.bonusRangedCritDamagePercentage = artifactRangedCritDamagePercentage;
	hero.bonusMagicCritDamagePercentage = artifactMagicCritDamagePercentage;
	hero.bonusMagicCritDamagePercentage = artifactFirearmCritDamagePercentage;
	hero.bonusMagicCritDamagePercentage = artifactRuneCritDamagePercentage;
	
	hero.bonusAllWeaponDamagePercentage = artifactAllWeaponDamagePercentage;
	hero.bonusMeleeWeaponDamagePercentage = artifactMeleeWeaponDamagePercentage;
	hero.bonusStealthWeaponDamagePercentage = artifactStealthWeaponDamagePercentage;
	hero.bonusSwordWeaponDamagePercentage = artifactSwordWeaponDamagePercentage;
	hero.bonusRangedWeaponDamagePercentage = artifactRangedWeaponDamagePercentage;
	hero.bonusMagicWeaponDamagePercentage = artifactMagicWeaponDamagePercentage;
	hero.bonusFirearmWeaponDamagePercentage = artifactFirearmWeaponDamagePercentage;
	hero.bonusRuneWeaponDamagePercentage = artifactRuneWeaponDamagePercentage;
	
	hero.bonusTowerTimeLimit = artifactTowerTimeLimit;
	hero.bonusTowerHp = artifactTowerHp;
	hero.bonusTowerDamage = artifactTowerDamage;
	hero.bonusCoinLaborUpgradeFee = artifactCoinLaborUpgradeFee;
	hero.bonusCoinLaborYield = artifactCoinLaborYield;
	calcTotalDpc();
	calcTotalRewardCoin();
	calcTotalOrbs();
  };
  
  var formulaCompanionPercentage = function(value){
	return new Decimal(100).plus(value).div(100);
  };
  
  var calculateAllCompanionDamage = function(){
	let companionMeleeDpsPercentage = 0;
	let companionStealthDpsPercentage = 0;
	let companionSwordDpsPercentage = 0;
	let companionRangedDpsPercentage = 0;
	let companionMagicDpsPercentage = 0;
	let companionFirearmDpsPercentage = 0;
	let companionRuneDpsPercentage = 0;
	let companionDpcPercentage = 0;
	let companionAllCoinPercentage = 0;
	let companionEnemyCoinPercentage = 0;
	let companionBossCoinPercentage = 0;
	let companionAllDpsPercentage = 0;
	let companionCritDpcPercentage = 0;
	let companionCritChancePercentage = 0;
	let companionAllDamagePercentage = 0;
	let companionDpsToDpcPercentage = 0;
	
	for(let i=0;i<hero.countCompanion;i++){
	  let unlockCompanion = hero.unlockCompanion[i];
	  let companionData = companion.find(item => item.id === unlockCompanion.id);
	  unlockCompanion.damage = unlockCompanion.level * companionData.damage;
	  unlockCompanion.buff = unlockCompanion.level * companionData.buff;
	  
	  if(unlockCompanion.active) companionDpcPercentage += unlockCompanion.damage;
	  else companionDpcPercentage += Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.damage * setting.passivePercentage / 100;
	  
	  switch(unlockCompanion.id){
		case 0:
		  if(unlockCompanion.active) companionMeleeDpsPercentage = unlockCompanion.buff;
		  else companionMeleeDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 1:
		  if(unlockCompanion.active) companionStealthDpsPercentage = unlockCompanion.buff;
		  else companionStealthDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 2:
		  if(unlockCompanion.active)companionSwordDpsPercentage = unlockCompanion.buff;
		  else companionSwordDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 3:
		  if(unlockCompanion.active)companionRangedDpsPercentage = unlockCompanion.buff;
		  else companionRangedDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 4:
		  if(unlockCompanion.active)companionMagicDpsPercentage = unlockCompanion.buff;
		  else companionMagicDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 5:
		  if(unlockCompanion.active)companionFirearmDpsPercentage = unlockCompanion.buff;
		  else companionFirearmDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 6:
		  if(unlockCompanion.active)companionRuneDpsPercentage = unlockCompanion.buff;
		  else companionRuneDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 7:
		  if(unlockCompanion.active)companionDpcPercentage += unlockCompanion.buff;
		  else companionDpcPercentage += Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 8:
		  if(unlockCompanion.active)companionAllCoinPercentage = unlockCompanion.buff;
		  else companionAllCoinPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break; 
		case 9:
		  if(unlockCompanion.active)companionEnemyCoinPercentage = unlockCompanion.buff;
		  else companionEnemyCoinPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break; 
		case 10:
		  if(unlockCompanion.active)companionBossCoinPercentage = unlockCompanion.buff;
		  else companionBossCoinPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break; 
		case 11:
		  if(unlockCompanion.active)companionAllDpsPercentage = unlockCompanion.buff;
		  else companionAllDpsPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break; 
		case 12:
		  if(unlockCompanion.active)companionCritDpcPercentage = unlockCompanion.buff;
		  else companionCritDpcPercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;
		case 13:
		  if(unlockCompanion.active)companionCritChancePercentage = unlockCompanion.buff;
		  else companionCritChancePercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;   
		case 14:
		  if(unlockCompanion.active)companionAllDamagePercentage = unlockCompanion.buff;
		  else companionAllDamagePercentage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break; 
		case 15:
		  if(unlockCompanion.active)companionDpsToDpcPercentage += unlockCompanion.buff;
		  else companionDpsToDpcPercentage += Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;
		  break;   
	  };
	}
	hero.companionMeleeDpsPercentage = companionMeleeDpsPercentage;
	hero.companionStealthDpsPercentage = companionStealthDpsPercentage;
	hero.companionSwordDpsPercentage = companionSwordDpsPercentage;
	hero.companionRangedDpsPercentage = companionRangedDpsPercentage;
	hero.companionMagicDpsPercentage = companionMagicDpsPercentage;
	hero.companionFirearmDpsPercentage = companionFirearmDpsPercentage;
	hero.companionRuneDpsPercentage = companionRuneDpsPercentage;
	hero.companionDpcPercentage = companionDpcPercentage;
	hero.companionAllCoinPercentage = companionAllCoinPercentage;
	hero.companionEnemyCoinPercentage = companionEnemyCoinPercentage;
	hero.companionBossCoinPercentage = companionBossCoinPercentage;
	hero.companionAllDpsPercentage = companionAllDpsPercentage;
	hero.companionCritDpcPercentage = companionCritDpcPercentage;
	hero.companionCritChancePercentage = companionCritChancePercentage;
	hero.companionAllDamagePercentage = companionAllDamagePercentage;
	hero.companionDpsToDpcPercentage = companionDpsToDpcPercentage;
  };
  
  var calculateAllActiveGods = function(firstRun=false){
	let chanceStealCoinPercentage = 0;
	let chanceConvertDpcToCoinPercentage = 0;
	let chanceConvertDpsToCoinPercentage = 0;
	let chanceExtraCoinPercentage = 0;
	let chanceAddOrbsPrestigePercentage = 0;
	let chanceAddOrbsFloorPercentage = 0;
	let chanceCarriedCoinPercentage = 0;
	let chanceUpgradeDiscountPercentage = 0;
	let bonusGodsDpcPercentage = 0;
	let bonusGodsDpsPercentage = 0;
	let chanceHitHighestDpcPercentage = 0;
	let chanceHitHighestDpsPercentage = 0;
	let chanceHitCurrentSlashPercentage = 0;
	let chanceHitCurrentDpcPercentage = 0;
	let chanceHitCurrentDpsPercentage = 0;
	let tempStealCoinTimer = new Decimal(0);
	let tempDpcToCoinTimer = new Decimal(0);
	let tempDpsToCoinTimer = new Decimal(0);
	let runDpsInterval = false;

	for(let i=0;i<hero.unlockGods.length;i++){
	  let unlockGods = hero.unlockGods[i];
	  let godsData = gods.find(item => item.id === unlockGods.id);
	  if(unlockGods.isActive){
		switch(unlockGods.id){
		  case 0:
		    chanceStealCoinPercentage = unlockGods.damage;
			if(chanceStealCoinPercentage > 0) tempStealCoinTimer = new Decimal(1000).mul(godsData.buffTimer);
			else tempStealCoinTimer = new Decimal(0); 
			break;
		  case 1:
		    chanceConvertDpcToCoinPercentage = unlockGods.damage;
			if(chanceConvertDpcToCoinPercentage > 0)tempDpcToCoinTimer = new Decimal(1000).mul(godsData.buffTimer);
			else tempDpcToCoinTimer = new Decimal(0);
			break;
		  case 2:
		    chanceConvertDpsToCoinPercentage = unlockGods.damage;
			if(chanceConvertDpsToCoinPercentage > 0)tempDpsToCoinTimer = new Decimal(1000).mul(godsData.buffTimer);
			else tempDpsToCoinTimer = new Decimal(0);
			break;
		  case 3:
		    chanceExtraCoinPercentage = unlockGods.damage;
			break;
		  case 4:
		    chanceAddOrbsPrestigePercentage = unlockGods.damage;
			break;
		  case 5:
		    chanceAddOrbsFloorPercentage = unlockGods.damage;
			break;
		  case 6:
		    chanceCarriedCoinPercentage = unlockGods.damage;
			break;
		  case 7:
		    chanceUpgradeDiscountPercentage = unlockGods.damage;
			break;
		  case 8:
			bonusGodsDpcPercentage = unlockGods.damage;
			break;	
		  case 9:
			bonusGodsDpsPercentage = unlockGods.damage;
			break;
		  case 10:
		    chanceHitHighestDpcPercentage = unlockGods.damage;
			break;
		  case 11:
		    chanceHitHighestDpsPercentage = unlockGods.damage;
			break;
		  case 12:
		    chanceHitCurrentSlashPercentage = unlockGods.damage;
			break;
		  case 13:
		    chanceHitCurrentDpcPercentage = unlockGods.damage;
			break;
		  case 14:
		    chanceHitCurrentDpsPercentage = unlockGods.damage;
			break;
		};
	  }
	}
	hero.bonusChanceStealCoinPercentage = chanceStealCoinPercentage;
	hero.bonusChanceDpcToCoinPercentage = chanceConvertDpcToCoinPercentage;
	hero.bonusChanceDpsToCoinPercentage = chanceConvertDpsToCoinPercentage;
	hero.bonusChanceExtraCoinPercentage = chanceExtraCoinPercentage;
	hero.bonusChanceAddOrbsPrestigePercentage = chanceAddOrbsPrestigePercentage;
	hero.bonusChanceAddOrbsFloorPercentage = chanceAddOrbsFloorPercentage;
	hero.bonusChanceCarriedCoinPercentage = chanceCarriedCoinPercentage;
	hero.bonusChanceUpgradeDiscountPercentage = chanceUpgradeDiscountPercentage;
	hero.bonusGodsDpcPercentage = bonusGodsDpcPercentage;
	hero.bonusGodsDpsPercentage = bonusGodsDpsPercentage;
	hero.bonusChanceHitHighestDpcPercentage = chanceHitHighestDpcPercentage;
	hero.bonusChanceHitHighestDpsPercentage = chanceHitHighestDpsPercentage;
	hero.bonusChanceHitCurrentSlashPercentage = chanceHitCurrentSlashPercentage;
	hero.bonusChanceHitCurrentDpcPercentage = chanceHitCurrentDpcPercentage;
	hero.bonusChanceHitCurrentDpsPercentage = chanceHitCurrentDpsPercentage;
	
	if(stealCoinTimer.equals(tempStealCoinTimer) == false){
	  runDpsInterval = true;
	  stealCoinTimer = tempStealCoinTimer;
	}
	if(dpcToCoinTimer.equals(tempDpcToCoinTimer) == false){
	  runDpsInterval = true;
	  dpcToCoinTimer = tempDpcToCoinTimer;
	}
	if(dpsToCoinTimer.equals(tempDpsToCoinTimer) == false){
	  runDpsInterval = true;
	  dpsToCoinTimer = tempDpsToCoinTimer;
	}
	if(runDpsInterval && !firstRun)startDpsInterval(true);
	updateHeroDpc();
	updateHeroDps();
  };
  
  var calculateAllPartnerAbility = function(partnerId=null){
	let tempHighestUnlockPartner = [];
	if(partnerId != null){
	  let tempArray = hero.highestUnlockPartner.find(item => item.id === partnerId);
	  tempHighestUnlockPartner.push(tempArray);
	}else tempHighestUnlockPartner = hero.highestUnlockPartner;
	for(let i=0;i<tempHighestUnlockPartner.length;i++){
	  let highestUnlockPartner = tempHighestUnlockPartner[i];
	  let partnerId = highestUnlockPartner.id;
	  let activeAbility = -1;
	  let interval = 0;
	  let accuracy = 0;
	  let damage = 0;
		
	  for(let a=0;a<highestUnlockPartner.ability.length;a++){
		let unlockAbilityPartner = highestUnlockPartner.ability[a];
		
		unlockAbilityPartner.tempAbilityPoint = unlockAbilityPartner.abilityPoint;
		unlockAbilityPartner.tempAccuracy = unlockAbilityPartner.accuracy;
		unlockAbilityPartner.tempDamage = unlockAbilityPartner.damage;
		
		if(unlockAbilityPartner.isActive){
		  activeAbility = unlockAbilityPartner.abilityId;
		  interval = unlockAbilityPartner.interval / setting.gameSpeed;
		  accuracy = unlockAbilityPartner.accuracy;
		  damage = unlockAbilityPartner.damage;
		}
	  }
	  let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	  if(unlockPartner){
		unlockPartner.abilityId = activeAbility;
		unlockPartner.abilityCounter = 0;
		unlockPartner.abilityInterval = interval;
		unlockPartner.abilityAccuracy = accuracy;
		unlockPartner.abilityDamage = damage;
	  }
	}
  };
  
  var calculateAllDwellersAbility = function(){
	for(let i=0; i<hero.countDwellers; i++){
	  let unlockDwellers = hero.unlockDwellers[i];
	  upgradeDwellersAbility(unlockDwellers);
	}
  };
  
  var formulaPartnerWeaponDamage = function(weaponType){
	let bonusWeaponPercentage = new Decimal(100);

	switch(weaponType){
	  case "All":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusAllWeaponDamagePercentage);
	    break;
	  case "Melee":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusMeleeWeaponDamagePercentage);
	    break;
	  case "Stealth":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusStealthWeaponDamagePercentage);
	    break;
	  case "Sword":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusSwordWeaponDamagePercentage);
	    break;
	  case "Ranged":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusRangedWeaponDamagePercentage);
	    break;
	  case "Magic":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusMagicWeaponDamagePercentage);
	    break;
	  case "Firearm":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusFirearmWeaponDamagePercentage);
	    break;
	  case "Rune":
	    bonusWeaponPercentage = bonusWeaponPercentage.plus(hero.bonusRuneWeaponDamagePercentage);
	    break;  
	};
	bonusWeaponPercentage = bonusWeaponPercentage.div(100);
	return bonusWeaponPercentage;
  };
  
  var calculateAllItemBenefit = function(partnerId=-1){
	if(hero.unlockItem.length > 0){
	  let damageMinValue = new Decimal(0);
	  let damageMaxValue = new Decimal(0);
	  let battlingPartner;
	  if(partnerId >= 0) battlingPartner = hero.unlockPartner.filter(item => item.status.toLowerCase() === "battling" && item.id === partnerId);
	  else battlingPartner = hero.unlockPartner.filter(item => item.status.toLowerCase() === "battling");
	  if(battlingPartner.length == 0){
		if(partnerId >= 0) battlingPartner = hero.highestUnlockPartner.filter(item => item.status.toLowerCase() === "battling" && item.id === partnerId);
	    else battlingPartner = hero.highestUnlockPartner.filter(item => item.status.toLowerCase() === "battling");  
	  }
	  for(let i=0;i<battlingPartner.length;i++){
		let weaponId = battlingPartner[i].weaponId;
		let unlockItem = hero.unlockItem.find(item => item.id === weaponId);
		if(unlockItem){
		  switch(unlockItem.itemType.toLowerCase()){
		    case "weapon":
			  let bonusWeaponPercentage = new Decimal(formulaPartnerWeaponDamage(unlockItem.partnerType));
			  let weaponMinDps = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue).mul(bonusWeaponPercentage);
			  let weaponMaxDps = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue).mul(bonusWeaponPercentage);
			  damageMinValue = new Decimal(weaponMinDps).plus(damageMinValue);
			  damageMaxValue = new Decimal(weaponMaxDps).plus(damageMaxValue);
			  
			  let minValueArray = roundedBigValue(damageMinValue,"ceil").split("=");
			  let maxValueArray = roundedBigValue(damageMaxValue,"ceil").split("=");
			  if(minValueArray.length > 0 && maxValueArray.length > 0){
			    let compareArray = compareMinMaxValue(minValueArray,maxValueArray).split("=");
			    battlingPartner[i].weaponMinDps = compareArray[0];
				battlingPartner[i].weaponMaxDps = compareArray[1];
				battlingPartner[i].weaponExponent = compareArray[2];
			  }
			  if(battlingPartner[i].equipmentMaxDps) delete(battlingPartner[i].equipmentMaxDps);
			  if(battlingPartner[i].equipmentMinDps) delete(battlingPartner[i].equipmentMinDps);
		      break;
		  };
		}
	  }

	  if(damageMinValue.greaterThan(0) && damageMaxValue.greaterThan(0)){
	    let minValueArray = roundedBigValue(damageMinValue,"ceil").split("=");
	    let maxValueArray = roundedBigValue(damageMaxValue,"ceil").split("=");
	    if(minValueArray.length > 0 && maxValueArray.length > 0){
		  let compareArray = compareMinMaxValue(minValueArray,maxValueArray).split("=");
	      hero.equipmentMinValue = compareArray[0];
		  hero.equipmentMaxValue = compareArray[1];
		  hero.equipmentExponentValue = compareArray[2];
	    }
	  }
	}
	updatePartner();
  };
  
  var checkDwellersAvailability = function(){
	for(let i=150;i<setting.limitFloor;i+=25){
	  if(i <= hero.highestFloor) unlockNewFeatures("",i);
	  else break;
	}
  };
  
  var calculateGenerateTokenInBank = function(){
	let totalSec = Math.floor((Date.now() - hero.tokenInBankLastGenerate) / 1000);
	if(totalSec >= (setting.bankTokenGenerateHour * 3600)){
	  let generateToken = Math.floor(Math.floor((Date.now() - hero.tokenInBankLastGenerate) / 1000) / (setting.bankTokenGenerateHour * 3600));
	  hero.tokenInBank = (hero.tokenInBank * 1) + (generateToken * 1);
	  hero.tokenInBankLastGenerate += (generateToken * setting.bankTokenGenerateHour * 3600 * 1000);
	}
	saveGame();
  };
  
  var getCurrentDate = function(){
	let date = new Date();
	let monthName = ["January","February","March","April","May","June","July","August","September","October","November","December"];
    return ('0' + date.getDate()).slice(-2)+" "+monthName[date.getMonth()]+" "+date.getFullYear();
  };
  
  var getCurrentTime = function(){
	let date = new Date();
    return ('0' + date.getHours()).slice(-2) + ":" + ('0'+date.getMinutes()).slice(-2) + ":" + ('0'+date.getSeconds()).slice(-2);
  };
  
  var updateInGameDateTime = function(){
	let currentDate = getCurrentDate();
	let currentTime = getCurrentTime();
	componentAction("view-current-date","replaceText",currentDate);
	componentAction("view-current-time","replaceText",currentTime);
  };
  
  var updateUserName = function () {
	if(hero.userName != "") componentAction ("view-username", "replaceText", hero.userName);
	if(hero.kingdomName != "") componentAction ("view-kingdom-name", "replaceText", "["+hero.kingdomName+" Kingdom]");	
  };
  
  var updateHeroCoin = function() {
	let heroCoin = new Decimal(hero.coin);
	if($("#hero-coin").text() != numberFormat(heroCoin)) componentAction ("hero-coin", "replaceText", numberFormat(heroCoin));
	updateAchievement(2);
  };
  
  var updateHeroDpc = function(currentDpc=0) {
	if(currentDpc==0) componentAction ("hero-dpc", "replaceText", calcTotalDpc());
	else if($("#hero-dpc").text() != numberFormat(currentDpc)) componentAction ("hero-dpc", "replaceText", numberFormat(currentDpc));
	if($("#current-hero-dpc").text() != numberFormat(hero.dpc)) componentAction ("current-hero-dpc", "replaceText", hero.dpc);
	if($("#next-hero-dpc").text() != numberFormat(calcNextHeroDpc())) componentAction ("next-hero-dpc", "replaceText", calcNextHeroDpc());
	
	if(critDpc){
	  componentAction ("hero-dpc", "addClass", "unlock-info");
	  componentAction ("dpc-crit-img","removeClass","d-none");
	}else{
	  componentAction ("hero-dpc", "removeClass", "unlock-info");
	  $("#hero-dpc").css({"color":""});
	  componentAction ("dpc-crit-img","addClass","d-none");
	}
  };
  
  var updateHeroDps = function() {
	if(hero.settingShowDetailDamage){
	  componentAction("detail-dps-info","addClass","d-none");
	  componentAction ("hero-dps", "replaceText", numberFormat(hero.totalDps));
	}else {
	  if(!hero.settingShowDetailDamage && hero.highestFloor >= unlockNewFeatureFloor("equipment")){
	    calcMinMaxDPS();
	    componentAction("detail-dps-info","removeClass","d-none");
		let averageDps = new Decimal(hero.totalMinDps).plus(hero.totalMaxDps).div(2);
	    componentAction ("hero-dps", "replaceText", numberFormat(averageDps));
	  }else componentAction ("hero-dps", "replaceText", numberFormat(hero.totalDps));
	}
	if(critDps){
	  componentAction ("hero-dps", "addClass", "unlock-info");
	  componentAction ("dps-crit-img","removeClass","d-none");
	}else{
	  componentAction ("hero-dps", "removeClass", "unlock-info");
	  $("#hero-dps").css({"color":""});
	  componentAction ("dps-crit-img","addClass","d-none");
	}
  };
  
  var updateHeroOrbs = function() {
	if($("#hero-orbs").text() != numberFormat(hero.orbs)) componentAction ("hero-orbs", "replaceText", hero.orbs);
	updateAchievement(3);
  };
  
  var updateHeroLevel = function() {
	if($("#hero-level").text() != numberFormat(hero.heroLevel)) componentAction ("hero-level", "replaceText", hero.heroLevel);
  };
  
  var updateWeaponLevel = function() {
	if($("#weapon-level").text() != numberFormat(hero.weaponLevel)) componentAction ("weapon-level", "replaceText", hero.weaponLevel);
  };
  
  var updateWeaponDpc = function() {
	let updateMultiplierLevel = false;
	if(hero.weaponLevel > 0){
	  if($("#upgrade-weapon-text").text() != "Level Up x") componentAction ("upgrade-weapon-text", "replaceText", "Level Up x");
	  let upgradeMultiplier = 0;
	  
	  if(setting.levelUpgradeMultiplier > 0) upgradeMultiplier = setting.levelUpgradeMultiplier;
	  else if(setting.levelUpgradeMultiplier == 0) upgradeMultiplier = maxWeaponLevelBuy;
	  
	  if($("#level-weapon-upgrade-multiplier").text() != upgradeMultiplier){
		componentAction ("level-weapon-upgrade-multiplier", "replaceText", upgradeMultiplier);
		updateMultiplierLevel = true;
	  }
	}	
	if($("#current-weapon-dpc").text() != numberFormat(hero.weaponDpc)) componentAction ("current-weapon-dpc", "replaceText", numberFormat(hero.weaponDpc));
	if(updateMultiplierLevel)componentAction ("next-weapon-dpc", "replaceText", calcNextWeaponDpc());
  };
  
  var updateCompanion = function(){
	if(hero.highestFloor < unlockNewFeatureFloor("companion")){
	  if(nextUnlockFeature == "companion") componentAction ("hero-companion-unlock-div", "removeClass", "d-none");
	  componentAction ("companion-unlock-requirement", "replaceText", unlockNewFeatureFloor("companion"));
	  
	  componentAction ("hero-companion-area-div", "addClass", "d-none");
	  componentAction ("hero-companion-activate-div", "addClass", "d-none");
	}else{
	  componentAction ("hero-companion-unlock-div", "addClass", "d-none"); 
	  componentAction ("hero-companion-area-div", "removeClass", "d-none");
	  let unlockCompanion = hero.unlockCompanion.find(item => item.active === true);
	  if(unlockCompanion){
		componentAction ("hero-companion-area-div", "removeClass", "d-none");
		componentAction ("hero-companion-activate-div", "addClass", "d-none");
		let companionData = companion.find(item => item.id === unlockCompanion.id);
		componentAction ("active-companion-name", "replaceText", companionData.name);
		componentAction ("active-companion-level", "replaceText", unlockCompanion.level);
		componentAction ("active-companion-dpc", "replaceText", numberFormat(calcCompanionDpc().floor()));
	  }else{
		componentAction ("hero-companion-area-div", "addClass", "d-none");
		componentAction ("hero-companion-activate-div", "removeClass", "d-none");
	  }
	}
  };
  
  var updatePartner = function() {
	if(!$("#partner-area-div").hasClass("d-none")){
	for(let i=0; i<hero.countPartner; i++){
	  let unlockPartner = hero.unlockPartner[i];
	  let partnerId = unlockPartner.id;
	  let updateMultiplierLevel = false;
	  
	  if(unlockPartner){
		if(unlockPartner.status == "Battling") componentAction("partner-area-"+partnerId,"removeClass","d-none");
	    else componentAction("partner-area-"+partnerId,"addClass","d-none");
		
		if(unlockPartner.level > 0){
		  let upgradeMultiplier = 0;
	      if($("#upgrade-partner-text-"+partnerId).text() != "Level Up x") componentAction ("upgrade-partner-text-"+partnerId, "replaceText", "Level Up x");

		  if(hero.settingRoundedUpgrade){
			if(setting.levelUpgradeMultiplier > 0) upgradeMultiplier = roundedLevelUpgrade(unlockPartner.level, setting.levelUpgradeMultiplier, "partner", partnerId);  
			else if(setting.levelUpgradeMultiplier == 0){
			  let localMaxPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === partnerId);
	          if(localMaxPartnerLevelBuy) upgradeMultiplier = roundedLevelUpgrade(unlockPartner.level, localMaxPartnerLevelBuy.maxLevelBuy, "partner", partnerId, true);
			  if(upgradeMultiplier > localMaxPartnerLevelBuy.maxLevelBuy) upgradeMultiplier = localMaxPartnerLevelBuy.maxLevelBuy;
			}
		  }else{
		    if(setting.levelUpgradeMultiplier > 0) upgradeMultiplier = setting.levelUpgradeMultiplier;
		    else if(setting.levelUpgradeMultiplier == 0){
		      let localMaxPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === partnerId);
	          if(localMaxPartnerLevelBuy) upgradeMultiplier = localMaxPartnerLevelBuy.maxLevelBuy;
		    }
		  }
		  if($("#partner-level-"+partnerId).text() != unlockPartner.level) componentAction ("partner-level-"+partnerId, "replaceText", unlockPartner.level);
		  if($("#level-partner-upgrade-multiplier-"+partnerId).text() != upgradeMultiplier){
			componentAction ("level-partner-upgrade-multiplier-"+partnerId, "replaceText", upgradeMultiplier);
		  }
		}
		let partnerDps = new Decimal(unlockPartner.dungeonDps);
		if(hero.settingShowDetailDamage) partnerDps = partnerDps.plus(unlockPartner.weaponDps);
		else partnerDps = new Decimal(10).pow(unlockPartner.weaponExponent).mul(unlockPartner.weaponMinDps).plus(partnerDps);
		
		if(unlockPartner.critHit && hero.settingShowDetailDamage) partnerDps = new Decimal(partnerDps).mul(unlockPartner.critMultiplier).ceil();
		partnerDps = new Decimal(formulaDps(true,partnerDps)).round();
		componentAction ("current-partner-dps-"+partnerId, "replaceText", numberFormat(partnerDps));
	  }
	  componentAction ("next-partner-dps-"+partnerId, "replaceText", formulaDps(true,calcTotalPartnerDps(partnerId,"next"))); 
	}
	}
  };
  
  var updateLabor = function(justEnhance=false,laborId=-1) {
	let startIndex = 0;
	let endIndex = hero.countLabor;
	if(laborId >= 0){
	  startIndex = laborId;
	  endIndex = startIndex + 1;
	}
	for(let i=startIndex; i<endIndex; i++){
	  let unlockLabor = hero.unlockLabor.find(item => item.id === i);
	  let multiplierLevel = 0;
	  
	  if(unlockLabor){
		let laborName = checkLaborName(i);
		if(unlockLabor.level > 0){
		  if(unlockLabor.level == setting.maxLaborLevel){
			let enhanceData = calcEnhanceLaborFee(i);
			let upgradeFee = new Decimal(enhanceData["enhanceFee"]);
			let nextLaborPrize = new Decimal(enhanceData["enhancePrize"]).sub(unlockLabor.currentPrize);
			if($("#upgrade-labor-text-"+i).text().toLowerCase() != "enhance"){
			  let buttonText = '<img src="assets/images/enhance.svg" class="image-size-2">&nbsp;<span id="upgrade-labor-text-' + i + '">Enhance</span><span id="level-labor-upgrade-multiplier-'+i+'"></span> - <span id="upgrade-labor-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin';
			  $("#upgrade-labor-button-"+i).empty();
			  $("#upgrade-labor-button-"+i).append(buttonText);
			  componentAction("next-labor-prize-"+i,"replaceText"," (+"+numberFormat(nextLaborPrize)+")");
			}else{
			  componentAction("upgrade-labor-fee-"+i,"replaceText",numberFormat(upgradeFee));
			  componentAction("next-labor-prize-"+i,"replaceText"," (+"+numberFormat(nextLaborPrize)+")");
			  componentAction("current-labor-prize-"+i,"replaceText",numberFormat(unlockLabor.currentPrize));
			}
	      }else{
			if(justEnhance){
			  let buttonText = '<img src="assets/images/levelup.svg" class="image-size-2">&nbsp;<span id="upgrade-labor-text-' + i + '">Level Up x</span><span id="level-labor-upgrade-multiplier-'+i+'"></span> - <span id="upgrade-labor-fee-' + i + '"></span> Coin';
			  $("#upgrade-labor-button-"+i).empty();
			  $("#upgrade-labor-button-"+i).append(buttonText);
			}
			if("Level Up x" != $("#upgrade-labor-text-"+i).text()) componentAction("upgrade-labor-text-"+i, "replaceText", "Level Up x");
			if(setting.levelUpgradeMultiplier > 0){
			  if(unlockLabor.level + setting.levelUpgradeMultiplier < setting.maxLaborLevel) multiplierLevel = setting.levelUpgradeMultiplier;
			  else multiplierLevel = setting.maxLaborLevel - unlockLabor.level;
		    }else if(setting.levelUpgradeMultiplier == 0){
		      let localMaxLaborLevelBuy = maxLaborLevelBuy.find(item => item.id === i);
	          if(localMaxLaborLevelBuy) multiplierLevel = localMaxLaborLevelBuy.maxLevelBuy;
		    }
			if(multiplierLevel != ($("#level-labor-upgrade-multiplier-"+i).text()*1)){
			  componentAction ("level-labor-upgrade-multiplier-"+i, "replaceText", multiplierLevel);
			}
		  }
		  if(unlockLabor.level != $("#labor-level-"+i).text()){
			componentAction ("labor-level-"+i, "replaceText", unlockLabor.level);
		    componentAction ("current-labor-prize-"+i, "replaceText", numberFormat(calcTotalLaborPrize(i,"current")));
		  }
		}else{
		  let upgradeFee = new Decimal(100).sub(hero.bonusCoinLaborUpgradeFee).div(100).mul(unlockLabor.baseFee).ceil();
	    }
		if(laborName != $("#labor-name-"+i).text().toLowerCase()) componentAction("labor-name-"+i,"replaceText",laborName);
	  }
	  if(unlockLabor.level < setting.maxLaborLevel){
		let nextLaborPrize = new Decimal(calcTotalLaborPrize(i,"next"));
		componentAction ("next-labor-prize-"+i, "replaceText", " (+"+numberFormat(nextLaborPrize)+")");
	  }
	}
  };
  
  var updateSkill = function () {
	for(let i=0; i<hero.countSkill; i++){
	  let unlockSkill = hero.unlockSkill.find(item => item.id === i);
	  
	  if(unlockSkill && unlockSkill.level > 0){
		let unlockItem = checkSkillTicket(unlockSkill.id);
	    let totalTicket = 0;
	    if(unlockItem) totalTicket = unlockItem.qty;  
	    
		if(unlockSkill.level > 0){
		  let totalDamage = new Decimal(unlockSkill.damage).plus(artifactSkillDamage(i));
		  componentAction ("upgrade-skill-text-"+i, "replaceText", "Level Up x");
		  
		  let localMaxSkillLevelBuy = maxSkillLevelBuy.find(item => item.id === i);
	      if(localMaxSkillLevelBuy)componentAction ("level-skill-upgrade-multiplier-"+i, "replaceText", localMaxSkillLevelBuy.maxLevelBuy);

		  componentAction ("skill-level-"+i, "replaceText", unlockSkill.level);
		  componentAction ("current-skill-damage-"+i, "replaceText", numberFormat(totalDamage));
		}
		if(unlockSkill.level < 10) componentAction ("next-skill-damage-"+i, "replaceText", "(+"+(calcNextSkillDamage(i)-unlockSkill.damage)+")");
	    else componentAction ("next-skill-damage-"+i, "clearText", "");
		
		if(totalTicket > 0) componentAction ("skill-ticket-text-"+i, "replaceText", totalTicket+" Ticket");
		else componentAction ("skill-ticket-text-"+i, "replaceText", "No Ticket");
	  }	
	}  
  };
  
  var formulaUpgradeHeroFee = function(heroLevel){
	let upgradeFee = new Decimal(setting.heroUpgradeCoinMultiplier).pow(heroLevel).mul(setting.baseHeroUpgradeCoin);
	let heroUpgradeFeePercentage = new Decimal(100).sub(hero.bonusHeroUpgradeFeePercentage).div(100);
	upgradeFee = upgradeFee.mul(heroUpgradeFeePercentage);
	return upgradeFee;
  };
  
  var updateUpgradeLevelFeeHero = function() {
	let totalUpgradeFee = new Decimal(0);
	let heroCoin = new Decimal(hero.coin);
	let nextTotalUpgradeFee = new Decimal(0);
	maxHeroLevelBuy = 0;
	
	if(setting.levelUpgradeMultiplier > 0){
	  for(let a=0; a<setting.levelUpgradeMultiplier; a++) totalUpgradeFee = totalUpgradeFee.plus(formulaUpgradeHeroFee(hero.heroLevel + a - 1));
	}else if(setting.levelUpgradeMultiplier == 0){
	  let a = 0;
	  do{
		nextTotalUpgradeFee = totalUpgradeFee.plus(formulaUpgradeHeroFee(hero.heroLevel + a - 1));
		
		if(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin)){
	      totalUpgradeFee = nextTotalUpgradeFee;
		  a++;
		}
	  }while(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin));
	  maxHeroLevelBuy = a;
	}
	
	if($("#upgrade-level-fee").text() != numberFormat(totalUpgradeFee.ceil())) componentAction ("upgrade-level-fee", "replaceText", numberFormat(totalUpgradeFee.ceil()));	
	return totalUpgradeFee.ceil();
  };
  
  var updateUpgradeLevelFeeWeapon = function() {
	let totalUpgradeFee = new Decimal(0);  
	let loopNextLevel = 0;
	let nextTotalUpgradeFee = new Decimal(0);
	let heroCoin = new Decimal(hero.coin);
	
	if(hero.weaponLevel == 0) loopNextLevel = 1;
    else loopNextLevel = setting.levelUpgradeMultiplier;
	
	if(loopNextLevel > 0){
	  for(let a=0; a<loopNextLevel; a++){
	    let upgradeFee = new Decimal(setting.weaponUpgradeCoinMultiplier).pow(hero.weaponLevel + a).mul(setting.baseWeaponUpgradeCoin);
	    let weaponUpgradeFeePercentage = new Decimal(100).sub(hero.bonusWeaponUpgradeFeePercentage).div(100);
	    upgradeFee = upgradeFee.mul(weaponUpgradeFeePercentage);

	    totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
	  }
	}else if(setting.levelUpgradeMultiplier == 0){
	  let b = 0;
	  do{
		let upgradeFee = new Decimal(setting.weaponUpgradeCoinMultiplier).pow(hero.weaponLevel + b).mul(setting.baseWeaponUpgradeCoin);
	    let weaponUpgradeFeePercentage = new Decimal(100).sub(hero.bonusWeaponUpgradeFeePercentage).div(100);
	    upgradeFee = upgradeFee.mul(weaponUpgradeFeePercentage);
		nextTotalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
		
		if(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin)){
	      totalUpgradeFee = nextTotalUpgradeFee;
		  b++;
		}
	  }while(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin));
	  maxWeaponLevelBuy = b;
	}
	if($("#upgrade-weapon-fee").text() != numberFormat(totalUpgradeFee.ceil()) ) componentAction ("upgrade-weapon-fee", "replaceText", numberFormat(totalUpgradeFee.ceil()));
	
	return totalUpgradeFee.ceil();
  };
  
  var updateUpgradeLevelFeeAllPartner = function() {
    for(let i=0; i<hero.countPartner; i++){
	  let unlockPartner = hero.unlockPartner[i];
	  let partnerId = unlockPartner.id;
	  
	  updateUpgradeLevelFeePartner(partnerId);
	}
  };
  
  var updateUpgradeLevelFeeAllLabor = function() {
    for(let i=0; i<hero.countLabor; i++){
	  updateUpgradeLevelFeeLabor(i);
	}
  };
  
  var formulaUpgradePartnerFee = function(partnerLevel, basePrice){
	let currentPartnerUpgradeCoinMultiplier = new Decimal(partnerLevel).div(25).floor().mul(0.05).plus(setting.partnerUpgradeCoinMultiplier);
	let upgradeFee = new Decimal(currentPartnerUpgradeCoinMultiplier).pow(partnerLevel).mul(basePrice);
	let partnerUpgradeFeePercentage = new Decimal(100).sub(hero.bonusPartnerUpgradeFeePercentage).div(100);
	upgradeFee = upgradeFee.mul(partnerUpgradeFeePercentage);
	return upgradeFee;
  };
  
  var updateUpgradeLevelFeePartner = function(partnerId,roundedMultiplier=0) {
	if(partnerId >= 0){	
	  let totalUpgradeFee = new Decimal(0);  
	  let loopNextLevel = 0;
	  let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	  let partnerData = partner.find(item => item.id === partnerId);
	  let partnerLevel = 0;
	  let nextTotalUpgradeFee = new Decimal(0);
	  let heroCoin = new Decimal(hero.coin);

	  if(unlockPartner && unlockPartner.level > 0) {
		if(hero.settingRoundedUpgrade) loopNextLevel = roundedLevelUpgrade(unlockPartner.level, setting.levelUpgradeMultiplier, "partner", partnerId, false, true);
		else loopNextLevel = setting.levelUpgradeMultiplier;
		partnerLevel = unlockPartner.level
	  }else loopNextLevel = 1;
		
	  if(loopNextLevel > 0){
	    for(let a=0; a<loopNextLevel; a++){
		  let upgradeFee = new Decimal(formulaUpgradePartnerFee(partnerLevel+a, partnerData.basePrice));
		  totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
		}
	  }else{
		if(setting.levelUpgradeMultiplier == 0){
		  let c=0;
		  if(hero.settingRoundedUpgrade){
			let roundedNextLevel = roundedLevelUpgrade(partnerLevel, setting.levelUpgradeMultiplier, "partner", partnerId, true, true);
			do{
		      let upgradeFee = new Decimal(formulaUpgradePartnerFee(partnerLevel+c, partnerData.basePrice));		 
		      nextTotalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
		
		      if(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin)){
	            totalUpgradeFee = nextTotalUpgradeFee;
		        c++;
		      }
	        }while(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin) && c < roundedNextLevel);  
		  }else{
		    do{
		      let upgradeFee = new Decimal(formulaUpgradePartnerFee(partnerLevel+c, partnerData.basePrice));		 
		      nextTotalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
		
		      if(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin)){
	            totalUpgradeFee = nextTotalUpgradeFee;
		        c++;
		      }
	        }while(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin));
		  }
		  let localMaxPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === partnerId);
		  if(localMaxPartnerLevelBuy) localMaxPartnerLevelBuy.maxLevelBuy = c;
	    }
	  }
	  if($("#upgrade-partner-fee-"+partnerId).text() != numberFormat(totalUpgradeFee.ceil())) componentAction ("upgrade-partner-fee-"+partnerId, "replaceText", numberFormat(totalUpgradeFee.ceil()));
		
	  return totalUpgradeFee.ceil();
	}	
  };
  
  var checkCalculateMaxUpgradeFee = function(unlockData,dataId){
	let heroCoin = new Decimal(hero.coin);
	let totalUpgradeFee = new Decimal(0);
	let nextTotalUpgradeFee = new Decimal(0);
	if(setting.levelUpgradeMultiplier == 0){
	  let maxLevelUpgradeFee = new Decimal(0);	
	  let c=0;
	  let currentLevel = unlockData.level;
	  let localMaxLaborLevelBuy = maxLaborLevelBuy.find(item => item.id === dataId);
	  if(localMaxLaborLevelBuy) maxLevelUpgradeFee = new Decimal(localMaxLaborLevelBuy.maxLevelUpgradeFee);
	  if(maxLevelUpgradeFee.equals(0) || (currentLevel + localMaxLaborLevelBuy.maxLevelBuy) != setting.maxLaborLevel){
	    do{
		  heroCoin = new Decimal(hero.coin);
		  let upgradeFee = new Decimal(formulaUpgradeLabor(unlockData.baseFee,(currentLevel+c)));
		  upgradeFee = new Decimal(100).sub(hero.bonusCoinLaborUpgradeFee).div(100).mul(upgradeFee);
		  nextTotalUpgradeFee = nextTotalUpgradeFee.plus(upgradeFee);
		  
		  if(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin) && (currentLevel+c) < setting.maxLaborLevel){
			totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
		    c++;
		  }
	    }while(nextTotalUpgradeFee.lessThan(heroCoin) && (currentLevel+c) < setting.maxLaborLevel);
		if(localMaxLaborLevelBuy){
		  localMaxLaborLevelBuy.maxLevelBuy = c;
		  localMaxLaborLevelBuy.maxLevelUpgradeFee = totalUpgradeFee;
	    }
	  }else{
		totalUpgradeFee = maxLevelUpgradeFee;
	  }
	  return totalUpgradeFee;
	}
  };
  
  var formulaUpgradeLabor = function(upgradeValue,upgradeLevel){
	return new Decimal(upgradeLevel).div(setting.laborLevelMultiplier).ceil().mul(upgradeValue);
  };

  var updateUpgradeLevelFeeLabor = function(laborId) {
	if(laborId >= 0){
	  let totalUpgradeFee = new Decimal(0);  
	  let loopNextLevel = 0;
	  let unlockLabor = hero.unlockLabor.find(item => item.id === laborId);
	  let laborLevel = 0;
	  let heroCoin = new Decimal(hero.coin);
		
	  if(unlockLabor && unlockLabor.level > 0) {
		loopNextLevel = setting.levelUpgradeMultiplier;
		if(unlockLabor.level + loopNextLevel > setting.maxLaborLevel) loopNextLevel = setting.maxLaborLevel - unlockLabor.level;
		laborLevel = unlockLabor.level
	  }else loopNextLevel = 1;
		
	  if(loopNextLevel > 0){
	    for(let a=0; a<loopNextLevel; a++){
		  let upgradeLevel = unlockLabor.level+a+1;
		  let upgradeFee = new Decimal(formulaUpgradeLabor(unlockLabor.baseFee,upgradeLevel));
		  totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
	    }
		totalUpgradeFee = new Decimal(100).sub(hero.bonusCoinLaborUpgradeFee).div(100).mul(totalUpgradeFee).ceil();
	    if(unlockLabor.level < setting.maxLaborLevel && $("#upgrade-labor-fee-"+laborId).text() != numberFormat(totalUpgradeFee)) componentAction ("upgrade-labor-fee-"+laborId, "replaceText", numberFormat(totalUpgradeFee));
	  }else{
		if(unlockLabor.level < 999){
		  totalUpgradeFee = new Decimal(checkCalculateMaxUpgradeFee(unlockLabor,laborId));
		  if(unlockLabor.level < setting.maxLaborLevel && $("#upgrade-labor-fee-"+laborId).text() != numberFormat(totalUpgradeFee)) componentAction ("upgrade-labor-fee-"+laborId, "replaceText", numberFormat(totalUpgradeFee));
		}
	  }  
	  return totalUpgradeFee;
	}	
  };
  
  var updateUpgradeLevelFeeAllSkill = function() {
    for(let i=0; i<hero.countSkill; i++){
	  updateUpgradeLevelFeeSkill(i);
	}
  };
  
  var updateUpgradeLevelFeeSkill = function(skillId){
	if(skillId >= 0){
	  let totalUpgradeFee = new Decimal(0);  
	  let loopNextLevel = 0;
	  let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	  let skillData = skill.find(item => item.id === skillId);
	  let skillLevel = 0;
	  let nextTotalUpgradeFee = new Decimal(0);
	  let heroCoin = new Decimal(hero.coin);
		
	  if (unlockSkill) {
		loopNextLevel = setting.levelUpgradeMultiplier;
		skillLevel = unlockSkill.level;
		componentAction ("skill-use-div-"+skillId, "removeClass", "d-none");
		componentAction ("ticket-use-div-"+skillId, "removeClass", "d-none");
		
		if(!unlockSkill.isCooldown){
		  $("#use-skill-button-"+skillId).prop('disabled', false);
		  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-active");
		}
	  }else{
		loopNextLevel = 1;
	  }
	  
	  if(skillLevel==skillData.maxLevel){
		  $("#upgrade-skill-button-"+skillId).remove();
	  }else{
		if(loopNextLevel > 0){
		  if((skillLevel+loopNextLevel) > skillData.maxLevel) loopNextLevel = skillData.maxLevel - skillLevel;
	      for(let a=0; a<loopNextLevel; a++){			
		    let upgradeFee = new Decimal(setting.skillUpgradeCoinMultiplier).pow(skillLevel + a).mul(skillData.basePrice);
		    let skillUpgradeFeePercentage = new Decimal(100).sub(hero.bonusSkillUpgradeFeePercentage).div(100);
		    upgradeFee = upgradeFee.mul(skillUpgradeFeePercentage);
			
		    totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
	      }
		}else if(loopNextLevel == 0){
		  let d=0;
		  do{
		    let upgradeFee = new Decimal(setting.skillUpgradeCoinMultiplier).pow(skillLevel + d).mul(skillData.basePrice);
		    let skillUpgradeFeePercentage = new Decimal(100).sub(hero.bonusSkillUpgradeFeePercentage).div(100);
		    upgradeFee = upgradeFee.mul(skillUpgradeFeePercentage);
		    nextTotalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
		
		    if(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin) && (skillLevel+d) < skillData.maxLevel){
	          totalUpgradeFee = nextTotalUpgradeFee;
		      d++;
		    }
	      }while(nextTotalUpgradeFee.lessThanOrEqualTo(heroCoin) && (skillLevel+d) < skillData.maxLevel);
		  loopNextLevel = d;
		}
		let localMaxSkillLevelBuy = maxSkillLevelBuy.find(item => item.id === skillId);
	    localMaxSkillLevelBuy.maxLevelBuy = loopNextLevel;
		  
	    componentAction ("upgrade-skill-fee-"+skillId, "replaceText", numberFormat(totalUpgradeFee.ceil()));
	  }
	  return totalUpgradeFee.ceil();
	}
  };
  
  var clearBodyArea = function() {
	setting.heroAreaShow = 0;
    setting.partnerAreaShow = 0;
    setting.skillAreaShow = 0;
    setting.shopAreaShow = 0;  
  };
  
  var showGameVersion = function(){
	startGame();
	componentAction ("version", "replaceText", "v "+setting.gameVersion);
	$("#current-year").text(new Date().getFullYear());
  };
  
  var showAutoProgress = function(){
	if(hero.autoProgressShow == 1 && (hero.highestUnlockPartner.length > 0)) componentAction ("auto-progress-div", "removeClass", "d-none");
	$("#auto-progress-switch").prop("checked", setting.autoProgress);
  };
  
  var showFloorNumber = function() {
	switch (hero.floor){
	  case 1:
		componentAction ("floor-number-text-1", "updateClass", "tab-button-unactive,d-none");
	    componentAction ("floor-number-text-2", "updateClass", "tab-button-unactive,d-none");
		
		componentAction ("floor-number-text-1", "clearText", "");
		componentAction ("floor-number-text-2", "clearText", "");
	    componentAction ("floor-number-text-3", "replaceText", hero.floor);
		componentAction ("floor-number-text-4", "replaceText", hero.floor+1);
		componentAction ("floor-number-text-5", "replaceText", hero.floor+2);
		break;
	  case 2:
		componentAction ("floor-number-text-1", "updateClass", "tab-button-unactive,d-none");
	    componentAction ("floor-number-text-2", "updateClass", "d-none,tab-button-unactive");
	    
		componentAction ("floor-number-text-1", "clearText", "");
		componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));
		componentAction ("floor-number-text-3", "replaceText", hero.floor);
		componentAction ("floor-number-text-4", "replaceText", hero.floor+1);
		componentAction ("floor-number-text-5", "replaceText", hero.floor+2);
		break;
	  case (setting.limitFloor-1):
		componentAction ("floor-number-text-1", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-2", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-4", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-5", "updateClass", "tab-button-unactive,d-none");
		
		componentAction ("floor-number-text-1", "replaceText", (hero.floor-2));
	    componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));
		componentAction ("floor-number-text-3", "replaceText", hero.floor);
		componentAction ("floor-number-text-4", "replaceText", hero.floor+1);
		componentAction ("floor-number-text-5", "clearText", "");
		break;
	  case setting.limitFloor:
		componentAction ("floor-number-text-1", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-2", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-4", "updateClass", "tab-button-unactive,d-none");
		componentAction ("floor-number-text-5", "updateClass", "tab-button-unactive,d-none");
		
		
		componentAction ("floor-number-text-1", "replaceText", (hero.floor-2));
	    componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));
		componentAction ("floor-number-text-3", "replaceText", hero.floor);
		componentAction ("floor-number-text-4", "clearText", "");
		componentAction ("floor-number-text-5", "clearText", "");
		break;
	  default:
		componentAction ("floor-number-text-1", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-2", "updateClass", "d-none,tab-button-unactive");
		componentAction ("floor-number-text-4", "updateClass", "d-none,tab-button-unactive");
	    componentAction ("floor-number-text-5", "updateClass", "d-none,tab-button-unactive");
	  
	    componentAction ("floor-number-text-1", "replaceText", (hero.floor-2));
	    componentAction ("floor-number-text-2", "replaceText", (hero.floor-1));
		componentAction ("floor-number-text-3", "replaceText", hero.floor);
		componentAction ("floor-number-text-4", "replaceText", hero.floor+1);
		componentAction ("floor-number-text-5", "replaceText", hero.floor+2);
		break;
	};
	componentAction("max-floor","replaceText",numberFormat(hero.maxFloor));
  };

  var showBuyArea = function(){
	if(isMultiplierChange){
	  componentAction ("button-buy-multiplier-1", "updateClass", "tab-button-active,tab-button-unactive");
	  componentAction ("button-buy-multiplier-10", "updateClass", "tab-button-active,tab-button-unactive");
	  componentAction ("button-buy-multiplier-100", "updateClass", "tab-button-active,tab-button-unactive");
	  componentAction ("button-buy-multiplier-0", "updateClass", "tab-button-active,tab-button-unactive");
	
	  componentAction ("button-buy-multiplier-"+setting.levelUpgradeMultiplier, "updateClass", "tab-button-unactive,tab-button-active");  
	  isMultiplierChange = false;
	}
  };
  
  var showGenerationTimer = function(){
	if(hero.highestFloor >= unlockNewFeatureFloor("companion")){
	  if($( "#companion-generate-unlock-div" ).length) $( "#companion-generate-unlock-div" ).remove();
	  if($.trim( $('#companion-generate').text() ).length == 0){
	    let appendCompanionIcon = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-gutters v-center-flex">';
		    appendCompanionIcon += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex">';	
	    for(let i=0;i<hero.generatedCompanionSlot;i++){
		  appendCompanionIcon += '<img id="companion-icon-'+(i+1)+'" src="assets/images/companion.svg" class="image-size-2 generate-icon"></img>&nbsp;&nbsp;';
	    }
	    appendCompanionIcon += '<span id="companion-timer"></span>';
	    appendCompanionIcon += '</div>';
	    appendCompanionIcon += '<div id="companion-note-div" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-gutters v-center-flex">';
	    appendCompanionIcon += '<span id="companion-note" class="unlock-info d-none"></span>';
	    appendCompanionIcon += '</div>';
	    appendCompanionIcon += '</div>';
	    $("#companion-generate").append(appendCompanionIcon);
	  }
	  componentAction("companion-generate","removeClass","d-none");
	  updateCompanionTimer();
	  if(hero.filledCompanionSlot > 0){
		showGenerateNote("companion");
		componentAction("companion-note","removeClass","d-none");
	  }else{
		componentAction("companion-note","clearText","");
		componentAction("companion-note-div","addClass","d-none");
		componentAction("companion-generate","removeClass","cursor-button");
	  }
	}else if(nextUnlockFeature != "companion"){
	  componentAction("companion-generate","addClass","d-none");
	  componentAction("hero-companion-unlock-div","addClass","d-none");
	}
	
	if(hero.highestFloor >= unlockNewFeatureFloor("equipment")){
	  if($( "#equipment-generate-unlock-div" ).length) $( "#equipment-generate-unlock-div" ).remove();
	  if($.trim( $('#equipment-generate').text() ).length == 0){
	    let appendEquipmentIcon = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-gutters v-center-flex">';
		    appendEquipmentIcon += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex">';	
	    for(let i=0;i<hero.generatedCompanionSlot;i++){
		  appendEquipmentIcon += '<img id="equipment-icon-'+(i+1)+'" src="assets/images/equipment.svg" class="image-size-2 generate-icon"></img>&nbsp;&nbsp;';
	    }
	    appendEquipmentIcon += '<span id="equipment-timer"></span>';
	    appendEquipmentIcon += '</div>';
	    appendEquipmentIcon += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-gutters v-center-flex">';
	    appendEquipmentIcon += '<span id="equipment-note" class="unlock-info"></span>';
	    appendEquipmentIcon += '</div>';
	    appendEquipmentIcon += '</div>';
		$("#equipment-generate").append(appendEquipmentIcon);
	  }
	  componentAction("equipment-generate","removeClass","d-none");
	  updateEquipmentTimer();
	  if(hero.filledEquipmentSlot > 0) showGenerateNote("equipment");
	  else{
		componentAction("equipment-note","clearText","");
		componentAction("equipment-generate","removeClass","cursor-button");
	  }
	}else if(nextUnlockFeature != "equipment") componentAction("equipment-generate","addClass","d-none");
  };
  
  var insertDailyCheckIn = function(){
	hero.dailyCheckIn = [];
	hero.countCompleteCheckIn = 0;

	for(let i=0;i<dailyCheckIn.length;i++){
	  let dailyCheckInData = dailyCheckIn[i];
	  let gainMaterialId = 0;
	  if(Array.isArray(dailyCheckInData.materialId)) gainMaterialId = dailyCheckInData.materialId[Math.floor(Math.random() * dailyCheckInData.materialId.length)];
	  else gainMaterialId = dailyCheckInData.materialId;
	  
	  let checkInStatus = "open";
	  let newObjDailyCheckIn = {
		day: (i+1),
		materialId: gainMaterialId,
		qty: (Math.floor(hero.currentCheckInLevel/dailyCheckInData.monthlyMultiplier)*dailyCheckInData.qtyMultiplier)+dailyCheckInData.qty,
		status: checkInStatus,
		collectDate: "",
	  };
	  hero.dailyCheckIn.push(newObjDailyCheckIn);
	}
	hero.currentCheckInLevel += 1;
  };
  
  var checkCollectDailyCheckIn = function(){
	let canCollectDailyCheckIn = false;  
	let date = new Date();
	let currentDailyCheckInDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	if(hero.lastCheckInDateTime == 0 || hero.lastCheckInDateTime == undefined) canCollectDailyCheckIn = true;
	else{
	  if(hero.lastCheckInDateTime > 0){
	    let msPerDay = 1000 * 60 * 60 * 24;
	    let dateDiff = Math.floor((currentDailyCheckInDate -  hero.lastCheckInDateTime) / msPerDay);
	    if(dateDiff > 0)canCollectDailyCheckIn = true;
	  }
	}
	return canCollectDailyCheckIn;
  };
  
  var showVipLevelInfo = function(){
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "* Vip Level will increase after completing day 30 \n * The higher the VIP level, the more check-in rewards you get");
  };
  
  var showDailyCheckInArea = function(){
	if(!($("#modalOfflineForm").data('bs.modal') || {})._isShown){
	if(hero.currentCheckInLevel == hero.checkInLevel){ insertDailyCheckIn();}
	let canCollect = checkCollectDailyCheckIn();
	if( !$( "#list-daily-check-in" ).length){
	  let appendDailyCheckInDiv = "";
	  let canCollectDailyCheckIn = false;	 
	  appendDailyCheckInDiv += '<div id="list-daily-check-in" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0">';
	  appendDailyCheckInDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 left-align mb-2 v-center-flex">VIP Level : '+hero.checkInLevel+'&nbsp;<img id="vip-level-info" src="assets/images/info-color.svg" class="image-size-static cursor-button"></img></div>';
	  appendDailyCheckInDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 right-align mb-2">Refresh In : <span id="reset-check-in-timer">'+offlineTimeFormat(restResetTimer())+'</span></div>';
	  for(let i=0;i<hero.dailyCheckIn.length;i++){
	    let heroDailyCheckIn = hero.dailyCheckIn[i];
	    let materialData = material.find(item => item.id === heroDailyCheckIn.materialId);
	    let checkInImg = materialData.type.toLowerCase();
	    let overlayClass = "d-none";
		let roundedClass = "rounded-card";
		
		if((canCollect && i == hero.countCompleteCheckIn) || (!canCollect && i == (hero.countCompleteCheckIn-1))) roundedClass = "selected-rounded-card";
		
		switch(checkInImg){
		  case "equipment":
		    checkInImg = checkInImg+"-color.svg";
		    break;
		  case "coin":
		  case "partner-material":
		  case "equipment-material":
		    checkInImg = materialData.name.toLowerCase().split(" ").join("-")+".svg";
		    break;  
		  default:
		    checkInImg = checkInImg+".svg";
		    break;
	    };
	    if(heroDailyCheckIn.status != "open") overlayClass = "";
	    materialData.type.toLowerCase()+".svg";
	    appendDailyCheckInDiv += '<div class="row col-xl-2 col-lg-2 col-md-2 col-sm-2 col-2 px-0">';
	    appendDailyCheckInDiv += '<div id="daily-check-in-' + i + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 '+roundedClass+' m-0">'; 
	    appendDailyCheckInDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 middle-align">Day '+heroDailyCheckIn.day+'</div>';
	    appendDailyCheckInDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 middle-align">';
	    appendDailyCheckInDiv += '<img src="assets/images/' + checkInImg + '" class="image-check-in"></img>';
	    appendDailyCheckInDiv += '</div>';
	    appendDailyCheckInDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 middle-align">x'+heroDailyCheckIn.qty+'</div>';
	    appendDailyCheckInDiv += '</div>';
		appendDailyCheckInDiv += '<div id="overlay-check-in-'+i+'" class="m-0 tower-overlay v-center-grid '+overlayClass+'">';
	    appendDailyCheckInDiv += '<div class="middle-align"><img src="assets/images/check.svg" class="image-check-in"></img></div>';
		appendDailyCheckInDiv += '</div>';
	    appendDailyCheckInDiv += '</div>';
 	  }
	  appendDailyCheckInDiv += '</div>';
	
	  $("#daily-check-in-div").append(appendDailyCheckInDiv).off('click','#vip-level-info').on('click','#vip-level-info',function(){
		showVipLevelInfo();
	  });
	}else{
	  for(let i=0;i<hero.dailyCheckIn.length;i++){
		let heroDailyCheckIn = hero.dailyCheckIn[i];
		if(heroDailyCheckIn.status == "complete") componentAction("overlay-check-in-"+i,"removeClass","d-none");
		else i=hero.dailyCheckIn.length;
	  }
	}
	if(canCollect) $("#daily-check-in-collect").text("Collect");
	else $("#daily-check-in-collect").text("Close");
	$("#modalDailyCheckIn").modal('show');
	}
  };
  
  var checkCompleteDailyCheckIn = function(){
	let completedDailyCheckIn = hero.dailyCheckIn.filter(item => item.status === "complete");
	if(completedDailyCheckIn.length == 30 && hero.countCompleteCheckIn == 30 && hero.countCompleteCheckIn > 0) return true;
	else return false;
  };
  
  var collectDailyCheckIn = function(){
	let date = new Date();
	let currentDailyCheckInDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	let uncollectDailyCheckIn = hero.dailyCheckIn.filter(item => item.status === "open");
	let rewardText = "";
	let showNotif = true;
	
	if(uncollectDailyCheckIn.length > 0){
	  let collectDailyCheckIn = uncollectDailyCheckIn[0];
	  if(collectDailyCheckIn.day == (hero.countCompleteCheckIn+1)){
	    let materialData = material.find(item => item.id === collectDailyCheckIn.materialId);
	    let rewardQty = collectDailyCheckIn.qty * 1;
	    rewardText = rewardQty+"x "+materialData.name;
	    let loopQty = 0;

	    switch(collectDailyCheckIn.materialId){
		  case 76:
		  case 77:
		  case 78:
		  case 79:
		  case 80:
		  case 81:
		  case 82:
		  case 83:
		  case 84:
		  case 85:
		    let checkInMaterialId = collectDailyCheckIn.materialId;
		    let objCheckInReward = [];
		    loopQty = 1;
		    rewardText = "";
		    if(collectDailyCheckIn.materialId >= 80 && collectDailyCheckIn.materialId <= 85){
			  loopQty = rewardQty;
			  rewardQty = 1;
		    }
		    for(let i=0;i<loopQty;i++){
			  if(collectDailyCheckIn.materialId >= 80 && collectDailyCheckIn.materialId <= 85) checkInMaterialId = randomBetweenNumber(80,85);
		      let unlockItem = hero.unlockItem.find(item => item.itemId === checkInMaterialId && (item.itemType == "coin" || item.itemType == "ticket"));
			  let materialData = material.find(item => item.id === checkInMaterialId);
			  let selectedObjectCheckInReward = objCheckInReward.find(item => item.id === checkInMaterialId);
			  if(selectedObjectCheckInReward) selectedObjectCheckInReward.qty += 1;
			  else{
			    let newObjCheckInReward = {
			      id: checkInMaterialId,
				  qty: rewardQty,
				  name: materialData.name,
		        };
			    objCheckInReward.push(newObjCheckInReward);
			  }
		      if(unlockItem) unlockItem.qty += rewardQty;
		      else insertNewUnlockItem(checkInMaterialId,rewardQty,materialData.type,materialData.name,"all","backpack");
		    }
		    for(let i=0;i<objCheckInReward.length;i++){
			  if(i>0) rewardText += ", "+objCheckInReward[i].qty+"x "+objCheckInReward[i].name;
		      else rewardText += objCheckInReward[i].qty+"x "+objCheckInReward[i].name;  
		    }
		    rewardText += " in your backpack";
		    break;
		  case 86:
		    hero.orbs = new Decimal(hero.orbs).plus(rewardQty);
		    break;
		  case 87:
		    hero.soul += rewardQty;
		    break;
		  case 88:
		    hero.spiritStone += rewardQty;
		    break;
		  case 89:
		    hero.partnerFragment += rewardQty;
		    break;
		  case 90:
		    hero.sphere += rewardQty;
		    break;
		  case 91:
		    hero.blueprint += rewardQty;
		    break;
		  case 92:
		    hero.token = new Decimal(hero.token).plus(rewardQty);
		    break;
		  case 93:
		    loopQty = rewardQty;
		    let availableTower = tower.filter(item => item.unlockReqFloor <= hero.highestFloor && item.unlockReqFloor > 0);
			if(availableTower.length > 0){
			  for(let i=0;i<loopQty;i++){
			    let selectedTower = availableTower[Math.floor(Math.random() * availableTower.length)];
			    let towerId = selectedTower.id;
			    let unlockTower = hero.unlockTower.find(item => item.id === towerId);
			    if(unlockTower) unlockTower.availableKey += 1;
		      }
			}else showNotif = false;
		    break;
		  case 94:
		    insertNewUnlockEquipment(true,-1,null,true,rewardQty);
		    showNotif = false;
		    break;
	    };
	    hero.lastCheckInDateTime = currentDailyCheckInDate;
	    hero.countCompleteCheckIn += 1;
	    collectDailyCheckIn.status = "complete";
		collectDailyCheckIn.collectDate = currentDailyCheckInDate;

		if(checkCompleteDailyCheckIn()){
		  hero.checkInLevel += 1;
		  
		  let searchCheckInLevelDetail = hero.checkInLevelDetail.find(item => item.level === hero.checkInLevel);
		  if(searchCheckInLevelDetail){
			searchCheckInLevelDetail.completeDate = currentDailyCheckInDate;  
		  }else{
		    let newObjCheckInLevelDetail = {
			  level: hero.checkInLevel,
			  completeDate: currentDailyCheckInDate,
			  vipStatus: "basic",
			  vipPurchaseDate: 0,
		    };
		    hero.checkInLevelDetail.push(newObjCheckInLevelDetail);
		  }
		  insertDailyCheckIn();
		  $("#daily-check-in-div").empty();
		}
	    if(showNotif){
	      $("#modalNotification").modal("show");
	      componentAction ("notification-text", "replaceText", "Congratz, you got "+rewardText);
		  componentAction("notification-ok-button","inputText","checkIn");
	    }
	  }
	}else{
	  insertDailyCheckIn();
	  collectDailyCheckIn();
	}
  };
  
  var insertNewUnlockItem = function(materialId,qty,itemType,name,partnerType,storageType,forceInsert=false){
	let materialData = material.find(item => item.id === materialId && item.inBackpack === true);
	if(materialData){
	  let unlockItem = hero.unlockItem.find(item => item.itemId === materialId && item.itemType === itemType);
	  if(unlockItem) unlockItem.qty += qty;
	  else{
	    let canInsert = true;
		if(!forceInsert){
	      if(unlockItem == null || unlockItem == undefined){
		    if(storageType == "backpack" && hero.countBackpack >= hero.maxBackpack) canInsert = false;
		    else if(storageType == "warehouse" && hero.countWarehouse >= hero.maxWarehouse) canInsert = false;
	      }else{
		    if(storageType == "backpack" && unlockItem.qty == 0 && hero.countBackpack >= hero.maxBackpack) canInsert = false;
		    else if(storageType == "warehouse" && unlockItem.qty == 0 && hero.countWarehouse >= hero.maxWarehouse) canInsert = false;
	      }
		}
	    if(canInsert){
		  let refillHP = 0;
		  if(materialData.refillHP && materialData.refillHP > 0) refillHP = materialData.refillHP;
		  let newObjUnlockItem;
	      if(refillHP > 0){
		    newObjUnlockItem = {
	          id: hero.countItem,
	          itemId: materialId,
	          qty: qty,
	          itemType: itemType,
	          name: name,
	          partnerType: partnerType,
	          storageType: storageType,
		      refillHP: refillHP,
		      newItem: true,
	        };
		  }else{
			newObjUnlockItem = {
	          id: hero.countItem,
	          itemId: materialId,
	          qty: qty,
	          itemType: itemType,
	          name: name,
	          partnerType: partnerType,
	          storageType: storageType,
		      newItem: true,
	        };  
		  }
	      hero.unlockItem.push(newObjUnlockItem);
	      hero.countItem += 1;
	      showNotifIcon("town-div");
	      showNotifIcon("warehouse");
	      showNotifIcon(storageType+"-tab-button");
	      calcCountStorage();
	    }else{
		  $("#modalNotification").modal("show");
	      componentAction ("notification-text", "replaceText", "Your "+storageType+" has no room for new "+itemType);
	    }
	  }
	}
  };
  
  var showNotifIcon = function(divName, forceRun=false){
	if(divName.indexOf('-') === -1) componentAction(divName,"addClass","notif-icon2",forceRun);
	else{
	  switch(divName){
		case "daily-task":
		  componentAction(divName,"addClass","notif-icon2",forceRun);
		  break;
	    default:
		  if(!$("#"+divName).hasClass("tab-button-active")) componentAction(divName,"addClass","notif-icon",forceRun);
		  break;
	  };
	}
  };
  
  var removeNotifIcon = function(divName){
	if(divName.indexOf('-') === -1){
	  if(divName == "achievement"){
		let collectAllAchievement = true;
		for(let i=0;i<achievement.length;i++){
		  if($("#achievement-button-"+i).hasClass("notif-icon")){
			collectAllAchievement = false;
			i = achievement.length;
		  }
		}
		if(collectAllAchievement) componentAction(divName,"removeClass","notif-icon2");
	  }else componentAction(divName,"removeClass","notif-icon2");
	}else{
	  switch(divName){
		case "daily-task":
		  if(!$("#daily-tab-button").hasClass("notif-icon") && !$("#weekly-tab-button").hasClass("notif-icon") && !$("#monthly-tab-button").hasClass("notif-icon"))
		    componentAction(divName,"removeClass","notif-icon2");
		  break;
		case "gameplay-div":
		  if(!$("#tower").hasClass("notif-icon2") && !$("#daily-task").hasClass("notif-icon2") && !$("#artifact").hasClass("notif-icon2"))
		    componentAction(divName,"removeClass","notif-icon");
		  break;
		case "info-div":
		  if(!$("#profile").hasClass("notif-icon2") && !$("#statistic").hasClass("notif-icon2") && !$("#achievement").hasClass("notif-icon2"))
		    componentAction(divName,"removeClass","notif-icon");
		  break;
	    default:
		  componentAction(divName,"removeClass","notif-icon");
		  break;
	  };
	}
  };
  
  var showDungeonArea = function(tabName="hero"){
	hideAllContent();
	showArea("dungeon");
	updateTab(tabName);
	initDisplay();
	showGenerationTimer();
	if($("#auto-progress-div").hasClass("d-none")) componentAction("auto-progress-div","removeClass","d-none");
	if(!hero.lastPrestigeShow && hero.totalCountPrestige == 1){
	  let textOrbs = "Orb";
	  if(hero.lastPrestigeOrbs > 1) textOrbs = "Orbs";
		
	  componentAction ("prestige-text", "replaceText", numberFormat(hero.lastPrestigeOrbs)+" "+textOrbs);
	  $("#modalPrestigeForm").modal('show');
	  if(hero.totalCountPrestige == 1) componentAction("continue-prestige-no-button","addClass","d-none");
	  hero.lastPrestigeShow = true;
	  setting.autoProgress = true;
	}
	calcHeightScrollDiv("dungeon",tabName);
  };
  
  var showOrbsArea = function(){
	let heroOrbs = new Decimal(hero.orbs);	
	if(heroOrbs.greaterThan(0) || hero.unlockArtifact.length > 0){
	  if($("#hero-orbs-div").hasClass("d-none")) componentAction("hero-orbs-div", "removeClass", "d-none");
	  if($("#hero-orbs-title").text() != "Orbs : ") componentAction ("hero-orbs-title", "replaceText", "Orbs : ");
	  updateHeroOrbs();
	}  
  };
  
  var showBodyArea = function(){
	if(setting.heroAreaShow == 1 || hero.coin >= setting.unlockRequirementCoinForHero || hero.heroLevel > 1){
		setting.heroAreaShow = 1;
		componentAction ("body-area-div", "removeClass", "d-none");
		if(hero.userGender == "" || !hero.userGender) hero.userGender = "male";
		switch(hero.userGender.toLowerCase()){
		  case "male":
		    componentAction ("hero-title-name", "replaceText", "King");
		    break;
		  case "female":
		    componentAction ("hero-title-name", "replaceText", "Queen");
			break;
		};
		if($("#hero-user-name").text() != hero.userName) componentAction ("hero-user-name", "replaceText", hero.userName);
		updateHeroLevel();
	    updateCompanion();
		
		let upgradeMultiplier = 0;
		if(setting.levelUpgradeMultiplier > 0) upgradeMultiplier = setting.levelUpgradeMultiplier;
		else if(setting.levelUpgradeMultiplier == 0) upgradeMultiplier = maxHeroLevelBuy;
		
		if($("#level-hero-upgrade-multiplier").text() != upgradeMultiplier) componentAction ("level-hero-upgrade-multiplier", "replaceText", upgradeMultiplier);
		if($("#unlock-weapon-requirement").text() != setting.unlockRequirementLevelForWeapon) componentAction ("unlock-weapon-requirement", "replaceText", setting.unlockRequirementLevelForWeapon);
	}
	if(hero.heroLevel < partner[0].unlockReq){
	  if($("#unlock-partner-requirement").text() != partner[0].unlockReq) componentAction ("unlock-partner-requirement", "replaceText", partner[0].unlockReq);
	}
  };
  
  var showWeaponArea = function(){
	let userTitle = "King";
	if(hero.userGender.toLowerCase() == "female") userTitle = "Queen";
	
	if(hero.weaponAreaShow == 1 || hero.heroLevel >= setting.unlockRequirementLevelForWeapon){
		componentAction ("weapon-area-div", "removeClass", "d-none");
		componentAction ("weapon-unlock-div", "addClass", "d-none");
		hero.weaponAreaShow = 1;
		updateWeaponLevel();
	}else{
	  componentAction("unlock-weapon-title","replaceText",userTitle);
	}
  };
  
  let showDetail = true;
  var showPartnerArea = function(){
	let openNewPartner = 0;
	let countPartner = 0;
	let partnerData;
	let prevPartnerName = '';

	for(let i = 0; i<partner.length; i++){
	  let partnerId = partner[i].id;
	  let currentUnlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	  if(!currentUnlockPartner) currentUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	  let currentLevel = 0;
	  let partnerLevel = 0;
	  let partnerDPS = 0;
	  let nextPartnerDPS = 0;
	  let upgradeFee = 0;
	  let upgradeText = '';
	  let upgradeMultiplier = '';
	  let skillImageClass = '';
	  let partnerSkillImage = '';
	  let partnerClass = '';
	  let nextUnlockPartnerData = [];

	  if(!currentUnlockPartner || (currentUnlockPartner && currentUnlockPartner.status == "Battling")){
		if(i == 0){
		  currentLevel = hero.heroLevel;
		  prevPartnerName = 'Hero';
		  nextUnlockPartnerData = {
			unlockReq: partner[i].unlockReq,
			prevPartnerName: 'Hero',
		  };
		}else{
		  let prevPartnerId = i - 1;
		  let unlockPartner = hero.unlockPartner.find(item => item.id === prevPartnerId);
		
		  if(unlockPartner) currentLevel = unlockPartner.level;
		  nextUnlockPartnerData = {
			unlockReq: partner[i].unlockReq,
			prevPartnerName: partner[prevPartnerId].name,
		  };
	    }  
	  }else{
	    if(i == 0){
		  nextUnlockPartnerData = checkNextUnlockPartner(i);
		  currentLevel = hero.heroLevel;
		   i = nextUnlockPartnerData.nextPartnerId;
	    }else{
		  nextUnlockPartnerData = checkNextUnlockPartner(i);
		  let prevPartnerId = i - 1;
		  let unlockPartner = hero.unlockPartner.find(item => item.id === prevPartnerId);
		  if(unlockPartner)currentLevel = unlockPartner.level;
		  prevPartnerName = nextUnlockPartnerData.prevPartnerName;
		  i = nextUnlockPartnerData.nextPartnerId;
	    }
	  }
	  if(currentLevel >= nextUnlockPartnerData.unlockReq){
		let searchPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === i);
		if(!searchPartnerLevelBuy){
		  let newObjMaxPartnerLevelBuy = {
		    id: i,
		    maxLevelBuy: 0
		  };
		  maxPartnerLevelBuy.push(newObjMaxPartnerLevelBuy);
		}
		if( !$( "#partner-area-" + i ).length){
		  if($("#partner-unlock-div").length) $("#partner-unlock-div").remove();
		  partnerData = partner.find(item => item.id === i);  
		  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === i);
		  let abilityUnlockPartner;
		  if(highestUnlockPartner) abilityUnlockPartner = highestUnlockPartner.ability.find(item => item.isActive === true);
		  let unlockPartner = hero.unlockPartner.find(item => item.id === i);
		  if(unlockPartner && unlockPartner.level > 0){
		    partnerLevel = unlockPartner.level;
		    upgradeFee = updateUpgradeLevelFeePartner(i);
			upgradeText = 'Level Up x';
			upgradeMultiplier = setting.levelUpgradeMultiplier;
		  }else{
		    upgradeFee = partnerData.basePrice;
			upgradeText = 'Unlock';
			if(i==0) openNewPartner = 1;
		  }
		  partnerDPS = calcTotalPartnerDps(i,"current");
		  nextPartnerDPS = formulaDps(true,calcTotalPartnerDps(i,"next"));
		  
		  if(unlockPartner && unlockPartner.status != "Battling") partnerClass = 'd-none';
		  
		  if(abilityUnlockPartner){
			let partnerAbilityData = partnerAbility.find(item => item.id === abilityUnlockPartner.abilityId);
			let abilityTypeData = abilityType.find(item => item.id === partnerAbilityData.abilityTypeId);
			partnerSkillImage = 'assets/images/'+abilityTypeData.name.charAt(0).toLowerCase()+'.svg';
			skillImageClass = '';
		  }else{
			skillImageClass = 'd-none';
			partnerSkillImage = '';
		  }
		  
		  let appendPartnerDiv = '<div id="partner-area-' + i + '" class="row border-top rounded-card '+partnerClass+'">';
          appendPartnerDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6 v-center-flex">';
		  appendPartnerDiv += '<img src="assets/images/' + partnerData.type.toLowerCase() + '.svg" class="image-size-static"></img>&nbsp;';
	      appendPartnerDiv += partnerData.name + '&nbsp;Lv&nbsp;<span id="partner-level-' + i + '">' + partnerLevel + '</span>&nbsp;';
		  appendPartnerDiv += '<img id="partner-skill-image-'+i+'" src="' + partnerSkillImage + '" class="image-size-static ' + skillImageClass + '"></img>&nbsp;';
	      appendPartnerDiv += '</div>';
	      appendPartnerDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6 v-center-flex">';
	      appendPartnerDiv += 'DPS&nbsp;:&nbsp;<span id="current-partner-dps-' + i + '">' + numberFormat(partnerDPS) + '</span>&nbsp;(+<span id="next-partner-dps-' + i + '">' + numberFormat(nextPartnerDPS) + '</span>)';
	      appendPartnerDiv += '</div>';
	      appendPartnerDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendPartnerDiv += '<button id="upgrade-partner-button-' + i + '" class="upgrade-level-button" value="' + i + '"><img src="assets/images/levelup.svg" class="image-size-2">&nbsp;<span id="upgrade-partner-text-' + i + '">' + upgradeText + '</span><span id="level-partner-upgrade-multiplier-' + i + '">' + upgradeMultiplier + '</span> - <span id="upgrade-partner-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin</button>';
	      appendPartnerDiv += '</div>';
	      appendPartnerDiv += '</div>';
		  
		  if(hero.settingOrderPartner == "asc"){
			$("#partner-area-div").append(appendPartnerDiv).off('click','#upgrade-partner-button-'+i).on('click','#upgrade-partner-button-'+i,function(){
		     upgradeLevelPartner(this); 
	        });  
		  }else{
			$("#partner-area-div").prepend(appendPartnerDiv).off('click','#upgrade-partner-button-'+i).on('click','#upgrade-partner-button-'+i,function(){
		      upgradeLevelPartner(this); 
	        });  
		  }
		}else{
		  let upgradeFee = updateUpgradeLevelFeePartner(partnerId);
		  updatePartner();
		  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === i);
		  let abilityUnlockPartner;
		  if(highestUnlockPartner) abilityUnlockPartner = highestUnlockPartner.ability.find(item => item.isActive === true);
		  if(abilityUnlockPartner){
			let partnerAbilityData = partnerAbility.find(item => item.id === abilityUnlockPartner.abilityId);
			let abilityTypeData = abilityType.find(item => item.id === partnerAbilityData.abilityTypeId);
			partnerSkillImage = 'assets/images/'+abilityTypeData.name.charAt(0).toLowerCase()+'.svg';
			$("#partner-skill-image-"+i).attr("src", partnerSkillImage);
			componentAction("partner-skill-image-"+i,"removeClass","d-none");
		  }else componentAction("partner-skill-image-"+i,"addClass","d-none");
		}
	  }else{
		let appendPartnerDiv = '<div id="partner-unlock-div" class="rounded-card middle-align unlock-info">Unlock Elite at ' + nextUnlockPartnerData.prevPartnerName + ' level ' + nextUnlockPartnerData.unlockReq + '</div>';
		if( !$( "#partner-unlock-div" ).length){
		  if(hero.settingOrderPartner == "asc"){
		    $("#partner-area-div").append(appendPartnerDiv).off('click','#partner-unlock-div').on('click','#partner-unlock-div',function(){
			  if(tutorialAnimation == "world3" && currentTutorialStep == 4) nextTutorial();
		    });
		  }else{
		    $("#partner-area-div").prepend(appendPartnerDiv).off('click','#partner-unlock-div').on('click','#partner-unlock-div',function(){
			  if(tutorialAnimation == "world3" && currentTutorialStep == 4) nextTutorial();
		    });
		  }
		}
		i = partner.length;
	  }
	}

	if(openNewPartner == 1 && hero.totalGainOrbs == 0){
	  showNotifIcon("partner-tab-button");
	  if(tutorialAnimation == "world2" && tutorialFunction.data.length == 0){
		startTutorialAnimation("world3");
	  }
	}
	if(setting.partnerAreaShow == 1){
	  componentAction ("partner-area-div", "removeClass", "d-none");
	  setting.partnerAreaShow = 1;
	}
	
	if(!$("#partner-area-div").hasClass("d-none")) calcHeightScrollDiv("partner");
  };
  
  var showSkillNotif = function(skillId){
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let notifText = "";
	switch(skillId){
	  case 0:
	    if(unlockSkill) notifText = "* Will launch current DPC "+unlockSkill.damage+" times per second \n";
		else notifText = "* Will launch current DPC several times per second \n";
	    break;
	  case 1:
	    if(unlockSkill) notifText = "* Will boost your current DPC by "+unlockSkill.damage+"%";
		else notifText = "* Will boost your current DPC by certain %";
		break;
	  case 2:
	    if(unlockSkill) notifText = "* Will boost your current DPS by "+unlockSkill.damage+"%";
		else notifText = "* Will boost your current DPS by certain %";
		break;
      case 3:
	    if(unlockSkill) notifText = "* Will boost monster drop coin by "+unlockSkill.damage+"%";
		else notifText = "* Will boost monster drop coin by certain %";
		break;
	  case 4:
	    if(unlockSkill) notifText = "* Will steal monster drop coin by "+unlockSkill.damage+"% every second";
		else notifText = "* Will steal monster drop coin by certain % every second";
		break;	
	  case 5:
	    notifText = "* Instant kill only applies to stages that have been cleared \n * For an unclear stage, will launch slash damage \n * Slash damage = (Current DPC	 + Current DPS) * 2 \n * Grim reaper will launch every 5 seconds";
	    if(unlockSkill){
		  let normalChance = unlockSkill.damage;
		  let bossChance = unlockSkill.damage - 10;
	      notifText += "\n * Instant kill chance is "+normalChance+"% for normal monster and "+bossChance+"% for boss monster";
		}else notifText += "\n * Instant kill chance for normal and boss monster is different";
		break;
	}
	if(notifText != ""){
	  $("#modalNotification").modal("show");	
	  componentAction ("notification-text", "replaceText", notifText);
	}
  };
  
  var showSkillArea = function(){
	let openNewSkill = 0;
	let countSkill = 0;
	let skillData;
	
	if(!$( "#start-all-skill").length){
	  let startAllSkillClass = "skill-disabled";	
	  if(hero.unlockSkill.length > 0){
		startAllSkillClass = "skill-active";  
	  }
	  let appendStartAllDiv = '<div id="start-all-skill" class="row border-top rounded-card p-0 border-0">';
	  appendStartAllDiv += '<button id="start-all-skill-button" class="use-skill-button '+startAllSkillClass+'">Start All Skill</button>';
	  appendStartAllDiv += '</div>';
	  
	  $("#skill-area-div").prepend(appendStartAllDiv).on('click','#start-all-skill-button',function(){
		startAllSkill(); 
	  });
	}else{
	  if(hero.unlockSkill.length > 0 && $("#start-all-skill-button").hasClass("skill-disabled"))
	    componentAction("start-all-skill-button","updateClass","skill-disabled,skill-active"); 
	}

	for(let i=0; i<skill.length; i++){
	  let skillLevel = 0;
	  let skillDamage = 0;
	  let nextSkillDamage = 0;
	  let upgradeFee = 0;
	  let upgradeText = '';
	  let skillImage = '';
	  let upgradeMultiplier = '';	
	  let styleDivBtnUseSkill = 'd-none';
	  let styleBtnUseSkill = 'skill-disabled';
	  let propBtnUseSkill = 'disabled';
	  let textBtnUseSkill = 'Use Skill - Ready To Use';
	  let unlockReqFloor = hero.maxFloor;
	  let unlockItem = checkSkillTicket(skill[i].id);
	  let totalTicket = 0;
	  if(unlockItem) totalTicket = unlockItem.qty;
	  
	  if($("#skill-unlock-div").length) $("#skill-unlock-div").remove();
	  
	  if(unlockReqFloor >= skill[i].unlockReqFloor){
		countSkill++;
		
		let localMaxSkillLevelBuy = maxSkillLevelBuy.find(item => item.id === i);
		if(!localMaxSkillLevelBuy){
		  let newObjMaxSkillLevelBuy = {
		    id: i,
		    maxLevelBuy: 0
		  };
		  maxSkillLevelBuy.push(newObjMaxSkillLevelBuy);
		}
		if( !$( "#skill-area-" + i ).length){
		  showShopArea();
		  skillData = skill.find(item => item.id === i);
		  let ticketImage = skillData.name.replace(" ","-").toLowerCase()+"-ticket";
		  
		  let unlockSkillData = hero.unlockSkill.find(item => item.id === i);
		  if(unlockSkillData){
			let damageSkill = new Decimal(unlockSkillData.damage).plus(artifactSkillDamage(i));
			let durationSkill = new Decimal(unlockSkillData.duration).plus(artifactSkillDuration(i));
			let cooldownSkill = new Decimal(unlockSkillData.cooldown).sub(artifactSkillCooldown(i));
			
		    propBtnUseSkill = '';
		    styleDivBtnUseSkill = '';
			styleBtnUseSkill = 'skill-active';
			
			if(unlockSkillData.isActive){
			  let pastDurationSkill = new Decimal(Math.floor((Date.now() - unlockSkillData.lastStartDatetime) / 1000));
			  let restDurationSkill = new Decimal(durationSkill).sub(pastDurationSkill);
			  if(pastDurationSkill.lessThan(durationSkill)){
			    styleBtnUseSkill = 'skill-running';
			    propBtnUseSkill = '';
			    textBtnUseSkill = "Click to Stop - "+offlineTimeText(restDurationSkill); 
			  }else{
			    unlockSkillData.isCooldown = true;
				unlockSkillData.lastCooldownDatetime = new Decimal(1000).mul(durationSkill).plus(unlockSkillData.lastStartDatetime);
				
				unlockSkillData.isActive = false;
				unlockSkillData.lastStartDatetime = 0;
			  }
			}
			if(unlockSkillData.isCooldown){
			  let pastCooldownSkill = new Decimal(Math.floor((Date.now() - unlockSkillData.lastCooldownDatetime) / 1000));
			  let restCooldownSkill = new Decimal(cooldownSkill).sub(pastCooldownSkill);
			  if(pastCooldownSkill.lessThan(cooldownSkill)){
				propBtnUseSkill = 'disabled';
				styleBtnUseSkill = 'skill-disabled';
			    textBtnUseSkill = "Cooldown Timer - "+offlineTimeText(restCooldownSkill);   
				startCooldownSkill(i);
			  }else{
				unlockSkillData.isCooldown = false;
				unlockSkillData.lastCooldownDatetime = 0;
			  }
			}	
			skillDamage = damageSkill;
			skillLevel = unlockSkillData.level;
			nextSkillDamage = calcNextSkillDamage(i)-unlockSkillData.damage;
			upgradeFee = updateUpgradeLevelFeeSkill(i);
			upgradeText = 'Level Up x';
			skillImage = 'levelup';
			upgradeMultiplier = setting.levelUpgradeMultiplier;
		  }else{
			nextSkillDamage = skillData.baseDamage;
			upgradeFee = skillData.basePrice;
			upgradeText = 'Unlock';
			skillImage = 'unlock';
			openNewSkill = 1;
		  }

		  let appendSkillDiv = '<div id="skill-area-' + i + '" class="row border-top rounded-card">';
		  appendSkillDiv += '<div id="skill-name-'+i+'" class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 v-center-flex">';
		  appendSkillDiv += skillData.name + ' Lv <span id="skill-level-' + i + '">' + skillLevel + '</span>';
		  appendSkillDiv += '&nbsp;<img id="skill-detail-info-'+i+'" src="assets/images/info-color.svg" class="image-size cursor-button">';
		  appendSkillDiv += '</div>';
		  appendSkillDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 v-center-flex">';
		  appendSkillDiv += '<span id="current-skill-damage-' + i + '">' + numberFormat(skillDamage) + '</span> <span id="next-skill-damage-' + i + '">';
		  if(skillLevel < skillData.maxLevel) appendSkillDiv += '(+' + nextSkillDamage + ')';
		  appendSkillDiv += '</span> <span id ="skill-desc-' + i + '">' + skillData.description + '</span>';
		  appendSkillDiv += '</div>';
		  appendSkillDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		  if(skillLevel < skillData.maxLevel)appendSkillDiv += '<button id="upgrade-skill-button-' + i + '" class="upgrade-level-button" value="' + i + '"><img id="skill-image-'+i+'" src="assets/images/' + skillImage + '.svg" class="image-size-2"></img>&nbsp;<span id="upgrade-skill-text-' + i + '">' + upgradeText + '</span><span id="level-skill-upgrade-multiplier-' + i + '">' + upgradeMultiplier + '</span> - <span id="upgrade-skill-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin</button>';
		  appendSkillDiv += '</div>';
		  appendSkillDiv += '</div>';
		  
		  $("#skill-area-div").append(appendSkillDiv).off('click','#skill-detail-info-'+i).on('click','#skill-detail-info-'+i,function(){
			showSkillNotif(i); 
		  }).off('click','#upgrade-skill-button-'+i).on('click','#upgrade-skill-button-'+i,function(){
			upgradeLevelSkill(this); 
		  }).off('click','#use-ticket-button-'+i).on('click','#use-ticket-button-'+i,function(){
			useSkillTicket(i,true);
		  });
		  
		  appendSkillDiv = '<div id="skill-use-div-' + i + '" class="col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 mt-2 ' + styleDivBtnUseSkill + '">';
		  appendSkillDiv += '<button id="use-skill-button-' + i + '" class="use-skill-button ' + styleBtnUseSkill + '" value="' + i + '" ' + propBtnUseSkill + '><span id ="skill-timer-desc-' + i + '">' + textBtnUseSkill + '</span></button>';
		  appendSkillDiv += '</div>';
		  appendSkillDiv += '<div id="ticket-use-div-'+i+'" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 mt-2 ' + styleDivBtnUseSkill + '">';
		  appendSkillDiv += '<button id="use-ticket-button-' + i + '" class="upgrade-level-button v-center-flex middle-content" value="' + i + '"><img id="ticket-image-'+i+'" src="assets/images/' + ticketImage + '.svg" class="image-size-2"></img>&nbsp;<span id="skill-ticket-text-'+i+'">'+totalTicket+' Ticket</span></button>';
		  appendSkillDiv += '</div>';
		  
		  $("#skill-area-"+i).append(appendSkillDiv).on('click','#use-skill-button-'+i,function(){
			useSkill(i); 
		  });
		  if(unlockSkillData && unlockSkillData.isActive)useSkill(i);
		}else updateSkill();
	  }else{
		if(i+1 < skill.length){
		  let appendSkillDiv = '<div id="skill-unlock-div" class="rounded-card middle-align unlock-info">Unlock Next Skill at stage ' + skill[i].unlockReqFloor + '</div>';
		  $("#skill-area-div").append(appendSkillDiv);

		  i = skill.length;
		}  
	  }
	}
	hero.countSkill = countSkill;

	if(openNewSkill == 1 && hero.totalGainOrbs == 0) showNotifIcon("skill-tab-button");
	if(setting.skillAreaShow == 1){
	  componentAction ("skill-area-div", "removeClass", "d-none");
	  setting.skillAreaShow = 1;
	}
	if(!$("#skill-area-div").hasClass("d-none")) calcHeightScrollDiv("skill");
  };
  
  var updateShopTimer = function(){
	let restTempBonusShopDpcTime = 0;
	let restTempBonusShopDpsTime = 0;
	let restTempBonusShopCoinTime = 0;
	let timeDescription = "-";
	
	if(hero.tempBonusShopDpcTime > 0){
	  restTempBonusShopDpcTime = hero.tempBonusShopDpcTime-Date.now();
	  if(restTempBonusShopDpcTime > 0) timeDescription = offlineTimeText(restTempBonusShopDpcTime/1000);
	  else hero.tempBonusShopDpcTime = 0;

	  componentAction ("temp-bonus-shop-dpc-time", "replaceText", timeDescription);
	}
	
	if(hero.tempBonusShopDpsTime > 0){
	  restTempBonusShopDpsTime = hero.tempBonusShopDpsTime-Date.now();
	  if(restTempBonusShopDpsTime > 0) timeDescription = offlineTimeText(restTempBonusShopDpsTime/1000);
	  else hero.tempBonusShopDpsTime = 0;
	  
	  componentAction ("temp-bonus-shop-dps-time", "replaceText", timeDescription);
	}
	
	if(hero.tempBonusShopCoinTime > 0){
	  restTempBonusShopCoinTime = hero.tempBonusShopCoinTime-Date.now();
	  if(restTempBonusShopCoinTime > 0) timeDescription = offlineTimeText(restTempBonusShopCoinTime/1000);
	  else hero.tempBonusShopCoinTime = 0;
	  
	  componentAction ("temp-bonus-shop-coin-time", "replaceText", timeDescription);
	}

	calcTotalDpc();
	calcTotalRewardCoin();
  };
  
  var updateGenerateIcon = function(generateType=null){
	let filledGenerateSlot = 0;  
	switch(generateType){
	  case "companion":
		filledGenerateSlot = hero.filledCompanionSlot;
		break;
	  case "equipment":
		filledGenerateSlot = hero.filledEquipmentSlot;
		break;
	};
	switch(filledGenerateSlot){
	  case 0:
	    $("#"+generateType+"-icon-1").attr("src", "assets/images/"+generateType+".svg");
		componentAction(""+generateType+"-icon-1","addClass","generate-icon");
		$("#"+generateType+"-icon-2").attr("src", "assets/images/"+generateType+".svg"); 
		componentAction(""+generateType+"-icon-2","addClass","generate-icon");	
		break;
	  case 1:
	    $("#"+generateType+"-icon-1").attr("src", "assets/images/"+generateType+"-color.svg");
		componentAction(""+generateType+"-icon-1","removeClass","generate-icon");
		$("#"+generateType+"-icon-1").css({"filter":""});
		$("#"+generateType+"-icon-2").attr("src", "assets/images/"+generateType+".svg");
		componentAction(""+generateType+"-icon-2","addClass","generate-icon");		
		break;
	  case 2:
	    $("#"+generateType+"-icon-1").attr("src", "assets/images/"+generateType+"-color.svg");  
		$("#"+generateType+"-icon-2").attr("src", "assets/images/"+generateType+"-color.svg");
		componentAction(""+generateType+"-icon-1","removeClass","generate-icon");
		componentAction(""+generateType+"-icon-2","removeClass","generate-icon");
		$("#"+generateType+"-icon-1").css({"filter":""});
		$("#"+generateType+"-icon-2").css({"filter":""});
		break;	
	};
	checkCssSetting();
  };
  
  var updateCompanionTimer = function(){
	let generateCompanionTime = setting.companionGenerateHour * 3600 * 1000;
	let restCompanionTime = generateCompanionTime;
	if(hero.startGenerateCompanion == 0){
	  hero.startGenerateCompanion = Date.now();
	}else restCompanionTime = restCompanionTime - (Date.now() - hero.startGenerateCompanion);
	if(restCompanionTime < 1000){
	  if(hero.filledCompanionSlot < hero.generatedCompanionSlot){
		if(hero.filledCompanionSlot < 0) hero.filledCompanionSlot = 0;
		hero.filledCompanionSlot += 1;
		hero.startGenerateCompanion += generateCompanionTime;
		updateDwellersStatus("warlords", hero.filledCompanionSlot, "start");
		showGenerateNote("companion");
	  }
	  let count = Math.floor((restCompanionTime*-1) / 3600 / 1000 / setting.companionGenerateHour);
	  if(count >= 1 && hero.filledCompanionSlot < hero.generatedCompanionSlot){
		hero.filledCompanionSlot += 1;
		updateDwellersStatus("warlords", hero.filledCompanionSlot, "start");
	  }	  
	}
	updateGenerateIcon("companion");
	if(hero.filledCompanionSlot < hero.generatedCompanionSlot) componentAction ("companion-timer", "replaceText", offlineTimeText(restCompanionTime/1000));
	else componentAction ("companion-timer", "clearText", "", true);
  };
  
  var updateEquipmentTimer = function(){
	let generateEquipmentTime = setting.equipmentGenerateHour * 3600 * 1000;
	let restEquipmentTime = generateEquipmentTime;
	if(hero.startGenerateEquipment == 0){
	  hero.startGenerateEquipment = Date.now();
	}else restEquipmentTime = restEquipmentTime - (Date.now() - hero.startGenerateEquipment);
	if(restEquipmentTime < 1000){
	  if(hero.filledEquipmentSlot < hero.generatedEquipmentSlot){
		if(hero.filledEquipmentSlot < 0) hero.filledEquipmentSlot = 0;
		hero.filledEquipmentSlot += 1;
		hero.startGenerateEquipment += generateEquipmentTime;
		updateDwellersStatus("collector", hero.filledEquipmentSlot, "start");
		showGenerateNote("equipment");
	  }
	  let count = Math.floor((restEquipmentTime*-1) / 3600 / 1000 / setting.equipmentGenerateHour);
	  if(count >= 1 && hero.filledEquipmentSlot < hero.generatedEquipmentSlot){
		hero.filledEquipmentSlot += 1;
		updateDwellersStatus("collector", hero.filledEquipmentSlot, "start");
	  }	  
	}
	updateGenerateIcon("equipment");
	if(hero.filledEquipmentSlot < hero.generatedEquipmentSlot) componentAction ("equipment-timer", "replaceText", offlineTimeText(restEquipmentTime/1000));
	else componentAction ("equipment-timer", "clearText", "", true);
  };
  
  var updateSavingBalance = function(){
	let tokenInBank = new Decimal(hero.tokenInBank);
	let unlockBanker = hero.unlockDwellers.filter(item => item.currentAbility === "banker");
	let incomePerPeriod = new Decimal(0);
	
	for(let i=0;i<unlockBanker.length;i++){
	  let bankerAbility = unlockBanker[i].ability.find(item => item.name === "banker");
	  let bankerGenerator = new Decimal(setting.baseBankTokenIncome).mul(Math.pow(2, (bankerAbility.level - 1)));
	  incomePerPeriod = incomePerPeriod.plus(bankerGenerator);
	}
	calculateGenerateTokenInBank();
	
	if(!$("#bank-area-div").hasClass("d-none")){
	  let restTime = (setting.bankTokenGenerateHour * 3600) - Math.floor((Date.now() - hero.tokenInBankLastGenerate) / 1000);
	  componentAction ("current-token", "replaceText", numberFormat(hero.token));
	  componentAction ("savings-balance", "replaceText", numberFormat(hero.tokenInBank));
	  componentAction ("token-income-per-period", "replaceText", numberFormat(incomePerPeriod));
	  componentAction ("rest-time-token-generation", "replaceText", offlineTimeText(restTime));
	}
  };
  
  var upgradeDwellersAbility = function(unlockDwellers){
	let hourWorkingTime = Math.floor((Date.now() - unlockDwellers.lastWorkingTime)/1000/3600);
	let activeAbility = unlockDwellers.currentAbility;

	switch(activeAbility){
	  case "soldier":
		break;
	  default:
	    if(hourWorkingTime > 0){
	      let dwellersAbility = unlockDwellers.ability.find(item => item.name === activeAbility);
	      if(dwellersAbility){
		    dwellersAbility.exp += hourWorkingTime;
		    unlockDwellers.lastWorkingTime += (hourWorkingTime * 3600 * 1000);
		    while(dwellersAbility.exp >= dwellersAbility.maxExp){
		      dwellersAbility.level += 1;
		      dwellersAbility.exp -= dwellersAbility.maxExp;
			  dwellersAbility.maxExp = Math.ceil(dwellersAbility.level / 5) * setting.baseDwellersAbilityHour;
	        }
 	      }  
	    }
		break;
	};
  };
  
  var calcTotalProduceLaborCoin = function(){
	if(hero.unlockLabor.length > 0){
	  let totalLaborPrize = new Decimal(0);
	  for(let i=0;i<hero.unlockLabor.length;i++){
	    totalLaborPrize = totalLaborPrize.plus(hero.unlockLabor[i].currentPrize);
 	  }
	  totalLaborPrize = new Decimal(100).plus(hero.bonusCoinLaborYield).plus(hero.bonusAllCoinPercentage).div(100).mul(totalLaborPrize).floor();
	  componentAction("total-produce-labor","replaceText",numberFormat(totalLaborPrize));
	  return totalLaborPrize;
	}return new Decimal(0);
  };
  
  var produceLaborCoin = function(idleLoop=1){
	let totalLaborPrize = new Decimal(calcTotalProduceLaborCoin());
	dungeonBattleLog = '<img src="assets/images/coin-labor.svg" class="image-size"></img>&nbsp;Coin Master Yield '+numberFormat(totalLaborPrize)+'&nbsp;<img src="assets/images/coin.svg" class="image-size-2"></img><br/>';
	writeDungeonBattleLog(dungeonBattleLog,totalLaborPrize);
	hero.coin = new Decimal(totalLaborPrize).mul(idleLoop).plus(hero.coin);
	hero.totalGainCoin = new Decimal(totalLaborPrize).mul(idleLoop).plus(hero.totalGainCoin);
	addedCoin = true;
	updateHeroCoin();
  };
  
  var showLaborFee = function(laborId){
	return new Promise(function(resolve, reject){
	  let totalUpgradeFee = new Decimal(updateUpgradeLevelFeeLabor(laborId));
	  resolve(totalUpgradeFee);
	});
  };
  
  var calcEnhanceLaborFee = function(laborId){
	let unlockLabor = hero.unlockLabor.find(item => item.id === laborId);
	if(unlockLabor){
	  let calcEnhanceFee = new Decimal(unlockLabor.baseFee).mul(setting.laborEnhanceMultiplier);
	  let calcEnhancePrize = new Decimal(unlockLabor.basePrize).mul(setting.laborEnhanceMultiplier);
	  let newObjEnhanceLabor = {
	    enhanceFee: calcEnhanceFee,
	    enhancePrize: calcEnhancePrize,
	  };
	  return newObjEnhanceLabor;
	}
  };
  
  var checkLaborName = function(laborId){
	let unlockLabor = hero.unlockLabor.find(item => item.id === laborId);
	if(unlockLabor){
	  let laborGrade = unlockLabor.grade;
	  if(laborGrade == 0) laborGrade = 1;
	  let index = ((laborGrade-1) * 26) + (laborId * 1);
	  return labor[index];
	};
  };
  
  var showLaborArea = function(){
	if(hero.highestFloor >= unlockNewFeatureFloor("labor")){
	  if(!$("#labor-unlock-div").hasClass("d-none")) componentAction("labor-unlock-div","addClass","d-none");
	  let appendLaborDiv = "";	  
	  for(let i=0;i<hero.countLabor;i++){
		let unlockLabor = hero.unlockLabor[i];
		let laborPrize = new Decimal(calcTotalLaborPrize(i,"current"));
		let nextLaborPrize = new Decimal(calcTotalLaborPrize(i,"next"));
		let upgradeFee = new Decimal(0);
	    let upgradeText = '';
	    let upgradeMultiplier = '';
		let availableLabor = false;
		let addLaborText = '&nbsp;(+' + numberFormat(nextLaborPrize) + ')';
		let buttonText = '';
		let laborName = checkLaborName(i);
		
		if(unlockLabor && unlockLabor.level > 0){
		  if(unlockLabor.level < setting.maxLaborLevel){
			upgradeText = 'Level Up x';
			
			showLaborFee(i).then(values => {
			  upgradeFee = new Decimal(values);  
		    }).catch(err => {
			  console.log("Failed to connect");
		    });
			buttonText = '<img src="assets/images/levelup.svg" class="image-size-2">&nbsp;<span id="upgrade-labor-text-' + i + '">' + upgradeText + '</span><span id="level-labor-upgrade-multiplier-' + i + '">' + upgradeMultiplier + '</span> - <span id="upgrade-labor-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin';
		  }else{
			upgradeText = 'Enhance';
			let enhanceData = calcEnhanceLaborFee(i);
			upgradeFee = new Decimal(enhanceData["enhanceFee"]);
			addLaborText = '&nbsp;(+' + numberFormat(enhanceData["enhancePrize"]) + ')';
			buttonText = '<img src="assets/images/enhance.svg" class="image-size-2">&nbsp;<span id="upgrade-labor-text-' + i + '">' + upgradeText + '</span><span id="level-labor-upgrade-multiplier-' + i + '"></span> - <span id="upgrade-labor-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin';
		  }
		  if(unlockLabor.level >= setting.maxLaborLevel){
			addLaborText = "";
		  }
		}else{
		  upgradeFee = new Decimal(100).sub(hero.bonusCoinLaborUpgradeFee).div(100).mul(unlockLabor.baseFee).ceil();
		  upgradeText = 'Unlock';
		  buttonText = '<img src="assets/images/levelup.svg" class="image-size-2">&nbsp;<span id="upgrade-labor-text-' + i + '">' + upgradeText + '</span><span id="level-labor-upgrade-multiplier-' + i + '"></span> - <span id="upgrade-labor-fee-' + i + '">' + numberFormat(upgradeFee) + '</span> Coin';
		}
		if( !$( "#labor-area-" + i ).length){
		  if(i>0){
			if(hero.unlockLabor[i-1].level > 0) availableLabor = true;
		  }else availableLabor = true;
		  
		  let searchLaborLevelBuy = maxLaborLevelBuy.find(item => item.id === i);
		
		  if(!searchLaborLevelBuy){
		    let newObjMaxLaborLevelBuy = {
		      id: i,
			  grade: unlockLabor.grade,
		      maxLevelBuy: 0
		    };
		    maxLaborLevelBuy.push(newObjMaxLaborLevelBuy);
		  }else{
			searchLaborLevelBuy.grade = unlockLabor.grade;
			searchLaborLevelBuy.maxLevelBuy = 0;
		  }
		  
		  if(availableLabor){
	        appendLaborDiv = '<div id="labor-area-' + i + '" class="row border-top rounded-card">';
		    appendLaborDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6 v-center-flex">';
		    appendLaborDiv += '<span id="labor-name-' + i + '">' + laborName + '</span>&nbsp;-&nbsp;Lv&nbsp;<span id="labor-level-' + i + '">' + unlockLabor.level + '</span>';
		    appendLaborDiv += '</div>';
		    appendLaborDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6 v-center-flex">';
		    appendLaborDiv += 'Yield&nbsp;:&nbsp;<span id="current-labor-prize-' + i + '">' + numberFormat(laborPrize) + '</span><span id="next-labor-prize-' + i + '">'+addLaborText+'</span>&nbsp;Coin';
		    appendLaborDiv += '</div>';
		    appendLaborDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
		    appendLaborDiv += '<button id="upgrade-labor-button-' + i + '" class="upgrade-level-button upgrade-labor" value="' + i + '">'+buttonText+'</button>';
		    appendLaborDiv += '</div>';
		    appendLaborDiv += '</div>';
			
			if(hero.settingOrderLabor == "asc"){
			  $("#labor-area-div").append(appendLaborDiv).off('click','#upgrade-labor-button-'+i).on('click','#upgrade-labor-button-'+i, function(){
			    upgradeLevelLabor(this);
			  });
			}else{
			  $("#labor-area-div").prepend(appendLaborDiv).off('click','#upgrade-labor-button-'+i).on('click','#upgrade-labor-button-'+i, function(){
			    upgradeLevelLabor(this);
			  });	
			}
		  }else i = hero.countLabor;
		}else updateLabor(false,i);
	  }
	  calcTotalProduceLaborCoin();
	}else{
	  if( !$( "#labor-unlock-div").length){
	    let appendLaborDiv = '<div id="labor-unlock-div" class="rounded-card unlock-info middle-align">Unlock at stage '+unlockNewFeatureFloor("labor")+'</div>';
	    $("#labor-area-div").append(appendLaborDiv);
	  }  
	}
	if(!$("#labor-area-div").hasClass("d-none")) calcHeightScrollDiv("labor");
  };
  
  var showShopAreaDesc = function(shopData){
	let appendShopDiv = "";
	switch(shopData){
	  case "DPC":
	    appendShopDiv += 'Increase ' + permanentShopCalculation("DPC") + '% ' +  shopData;
		break;
	  case "DPS":
	    appendShopDiv += 'Increase ' + permanentShopCalculation("DPS") + '% ' +  shopData;
		break;	
	  case "Coin":
	    appendShopDiv += 'Increase ' + permanentShopCalculation("Coin") + '% ' +  shopData;
		break;
	  default:
		switch(shopData.typeName){
		  case "Gods Slot":
			appendShopDiv += 'Increase ' + shopData.bonusValue + ' ' +  shopData.typeName;
			break;
		  case "Ticket":
			appendShopDiv += 'Buy 1 Skill ' +  shopData.typeName;
			break;
		  case "Instant Coin":
			appendShopDiv += 'Buy 1 ' +  shopData.typeName;
			break;
		  case "DPC":
			appendShopDiv += 'Increase ' + permanentShopCalculation("DPC") + '% ' +  shopData.typeName;
			break;
		  case "DPS":
			appendShopDiv += 'Increase ' + permanentShopCalculation("DPS") + '% ' +  shopData.typeName;
			break;	
		  case "Coin":
			appendShopDiv += 'Increase ' + permanentShopCalculation("Coin") + '% ' +  shopData.typeName;
			break;	
		  case "Orbs":
			appendShopDiv += 'Increase ' + permanentShopCalculation("Orbs") + '% ' +  shopData.typeName;
			break;		
		  default:
			appendShopDiv += 'Increase ' + shopData.bonusValue + '% ' +  shopData.typeName;
			break;
		};
		break;
	};
	return appendShopDiv;
  };
  
  var showShopArea = function(){
	let appendShopDiv = '';
	let restTempBonusShopDpcTime = hero.tempBonusShopDpcTime-Date.now();
	let restTempBonusShopDpsTime = hero.tempBonusShopDpsTime-Date.now();
	let restTempBonusShopCoinTime = hero.tempBonusShopCoinTime-Date.now();
	
	let cleanShop = removeDuplicateArray(shop, e => e.typeName);
	componentAction ("total-token", "replaceText", numberFormat(hero.token));
	componentAction ("bonus-shop-dpc-percentage", "replaceText", numberFormat(hero.bonusShopDpcPercentage));
	componentAction ("bonus-shop-dps-percentage", "replaceText", numberFormat(hero.bonusShopDpsPercentage));
	componentAction ("bonus-shop-coin-percentage", "replaceText", numberFormat(hero.bonusShopCoinPercentage));
	componentAction ("bonus-shop-orbs-percentage", "replaceText", numberFormat(hero.bonusShopOrbsPercentage));
	componentAction ("temp-bonus-shop-dpc-time", "replaceText", offlineTimeText(restTempBonusShopDpcTime/1000));
	componentAction ("temp-bonus-shop-dps-time", "replaceText", offlineTimeText(restTempBonusShopDpsTime/1000));
	componentAction ("temp-bonus-shop-coin-time", "replaceText", offlineTimeText(restTempBonusShopCoinTime/1000));
	componentAction ("hero-gods-slot", "replaceText", hero.activeGodsSlot+" Slot");
	
	for(let i=0;i<cleanShop.length;i++){
	  let classDiv = "d-none";
	  if(cleanShop[i].typeName == "Gods Slot") $( "#shop-area-" + i ).remove();
	  if( !$( "#shop-area-" + i ).length){
		if(cleanShop[i].feature != "" && hero.highestFloor >= unlockNewFeatureFloor(cleanShop[i].feature)) classDiv = "";
	    let arrayShopData = shop.filter(item => item.typeName === cleanShop[i].typeName);
		appendShopDiv += '<div id="shop-area-' + i + '" class="row border-top rounded-card '+classDiv+'">';
	    appendShopDiv += '<div id="shop-desc-'+cleanShop[i].typeName.toLowerCase()+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		appendShopDiv += showShopAreaDesc(cleanShop[i]);
	    appendShopDiv += '</div>';
		
		for(let a=0;a<arrayShopData.length;a++){
		  let textBtnShop = '';
		  let disableButton = '';
		  let arrayClassDiv = "";
		  if(arrayShopData[a].duration == 0){
			if(cleanShop[i].typeName == "Gods Slot"){
		      if(hero.activeGodsSlot == setting.maxActiveGodsSlot){
				textBtnShop = "Maxed";
				disableButton = 'disabled';
			  }
			  else textBtnShop += arrayShopData[a].unit+' -&nbsp;<img src="assets/images/token.svg" class="image-size"></img>&nbsp;'+numberFormat(arrayShopData[a].token);
		    }else{
			  if(cleanShop[i].typeName == "Ticket" && hero.highestFloor < unlockNewFeatureFloor(cleanShop[i].feature,arrayShopData[a].unit)) arrayClassDiv = "d-none";
			  textBtnShop += arrayShopData[a].unit+' -&nbsp;<img src="assets/images/token.svg" class="image-size"></img>&nbsp;'+numberFormat(arrayShopData[a].token);
			}
		  }else textBtnShop += arrayShopData[a].duration+' '+arrayShopData[a].unit+' -&nbsp;<img src="assets/images/token.svg" class="image-size"></img>&nbsp;'+numberFormat(arrayShopData[a].token);
		  appendShopDiv += '<div id="shop-area-detail-'+i+'-'+a+'" class="col-xl-3 col-lg-3 col-md-6 col-sm-6 col-12 '+arrayClassDiv+'">';
	      appendShopDiv += '<button id="shop-button-' + i + '-' + a + '" class="shop-button-class" value="' + arrayShopData[a].id + '"' + disableButton + '><span id ="button-desc-' + i + '-' + a + '" class="middle-content v-center-flex">' + textBtnShop + '</span></button>';
	      appendShopDiv += '</div>';
		}
		appendShopDiv += '</div>';
	  }else{
		if(hero.highestFloor >= unlockNewFeatureFloor(cleanShop[i].feature)) componentAction("shop-area-"+i,"removeClass","d-none");
		let arrayShopData = shop.filter(item => item.typeName === cleanShop[i].typeName);
		for(let a=0;a<arrayShopData.length;a++){
		  if(hero.highestFloor >= unlockNewFeatureFloor(cleanShop[i].feature,arrayShopData[a].unit)) componentAction("shop-area-detail-"+i+"-"+a,"removeClass","d-none"); 
		}
	  }
	}
	$("#shop-area-div").append(appendShopDiv).off('click','.shop-button-class').on('click','.shop-button-class',function(){
	  shopTradeToken(this); 
	});
	if(!$("#shop-area-div").hasClass("d-none")) calcHeightScrollDiv("shop");
  };
  
  var showPrestigeArea = function(){
	if(hero.maxFloor >= unlockNewFeatureFloor("artifact")){
	  $("#unlock-prestige-area-div").remove();
	  if(!$("#prestige-area-div").length){  
	    let appendPrestigeDiv = '<div id="prestige-area-div" class="row border-top rounded-card prestige-button text-center col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mx-0">';
		appendPrestigeDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Prestige</div>';
		appendPrestigeDiv += '</div>';

		$("#hero-area-div").append(appendPrestigeDiv).on('click','#prestige-area-div',function(){
		  startPrestige(); 
		});
	  }		  
	}else{
	  if(!$("#unlock-prestige-area-div").length){  
	    let appendPrestigeDiv = '<div id="unlock-prestige-area-div" class="row border-top rounded-card unlock-info text-center col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mx-0">';
		appendPrestigeDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Unlock Prestige at stage 100</div>';
		appendPrestigeDiv += '</div>';

		$("#hero-area-div").append(appendPrestigeDiv);
	  }
	}		
  };
  
  var showArea = function(pageName){
	componentAction (pageName+"-div", "removeClass", "d-none");
	componentAction (pageName, "updateClass", "cursor-button,active");
	switch(pageName){
	  case "cave":
	    removeNotifIcon("gameplay-div");
	    removeNotifIcon("cave");
		break;
	  case "tower":
	    removeNotifIcon("gameplay-div");
	    removeNotifIcon("tower");
		break;	
	  case "barracks":
	    removeNotifIcon("town-div");
	    removeNotifIcon("barracks");
		break;	
	  case "pet":
	    removeNotifIcon("town-div");
	    removeNotifIcon("pet");
		break;
	  case "companion":
	    removeNotifIcon("town-div");
	    removeNotifIcon("companion");
		break;
	  case "house":
	    removeNotifIcon("town-div");
	    removeNotifIcon("house");
		break;
	  case "bank":
	    removeNotifIcon("town-div");
	    removeNotifIcon("bank");
		break;	
	  case "equipment":
	    removeNotifIcon("town-div");
	    removeNotifIcon("warehouse");
		break;
	  case "tavern":
	    removeNotifIcon("town-div");
	    removeNotifIcon("tavern");
		break;
	  case "canteen":
	    removeNotifIcon("town-div");
	    removeNotifIcon("canteen");
	    break;
	  case "gods":
	    removeNotifIcon("town-div");
	    removeNotifIcon("gods");
		break;
	};
  };
  
  var updateArtifactArea = function(){
	saveGame();
	$("#artifact-area-div").empty();
	showArtifactArea($("#artifact-filter").val().toLowerCase(),$("#artifact-sorting").val().toLowerCase());  
  };
  
  var updateArtifactMultiplier = function(){
	switch(multiplierArtifact){
	  case 0:
	    multiplierArtifact = 1;
		break;
	  case 1:
	    multiplierArtifact = 10;
		break;
	  case 10:
	    multiplierArtifact = 100;
		break;
	  case 100:
	    multiplierArtifact = 0;
		break;	
	};
	if(multiplierArtifact == 0) componentAction("artifact-multiplier","replaceText","Max");
	else componentAction("artifact-multiplier","replaceText","x"+multiplierArtifact);
	
	arrayArtifactLevel = [];
	updateArtifactArea();
  };
  
  var formulaArtifactUpgradeFee = function(artifactId){
	let upgradeFee = new Decimal(0);
	return new Decimal(calcNextUpgradeArtifactFee(artifactId));  
  };
  
  var showArtifactArea = function(selectedFilterArtifact=null,selectedSortingArtifact=null){
	showArea("artifact");
	componentAction("count-current-artifact","replaceText",hero.countArtifact);
	componentAction("count-max-artifact","replaceText",artifact.length);
	let listArtifact = hero.unlockArtifact;
	$("#span-artifact-filter").empty(); 
	$("#span-artifact-filter").append(createArtifactFilter()).off('change',"#artifact-filter").on('change',"#artifact-filter",function(){
	  filterArtifact(this.value);
	});
	$("#span-artifact-sorting").empty(); 
	$("#span-artifact-sorting").append(createArtifactSorting()).off('change',"#artifact-sorting").on('change',"#artifact-sorting",function(){
	  sortingArtifact(this);
	});
	if(selectedFilterArtifact==null){
	  $("#artifact-filter").val("all");
	}else{
	  $("#artifact-filter").val(selectedFilterArtifact);  
	  if(selectedFilterArtifact!="all") listArtifact = listArtifact.filter(item => item.type === selectedFilterArtifact);
	}
	if(selectedSortingArtifact==null){
	  $("#artifact-sorting").val("type");
	  sortingArtifact();
	}else{
	  $("#artifact-sorting").val(selectedSortingArtifact);
	}
	let totalGainOrbs = new Decimal(hero.totalGainOrbs);
	let cleanArtifact = cleanDuplicateArray(availableArtifact);
	let unlockFee = new Decimal(calcNextUnlockArtifactFee()).mul(100-hero.bonusArtifactUnlockFeePercentage).div(100).ceil();
	componentAction ("total-orbs", "replaceText", numberFormat(hero.orbs));
	componentAction ("total-artifact-damage", "replaceText", numberFormat(hero.artifactDamagePercentage));
	if(cleanArtifact.length > 0) componentAction ("unlock-artifact-fee", "replaceText", numberFormat(unlockFee)+" Orbs");
	else{
	  componentAction ("total-orbs-div", "removeClass", "pt-3");
	  componentAction ("unlock-artifact-text", "replaceText", "Maxed");
	  componentAction ("unlock-artifact-hyphen", "replaceText", "");
	  componentAction ("unlock-artifact-button", "addClass", "skill-disabled");
	  componentAction ("unlock-artifact-fee", "clearText", "");
	  $("#unlock-artifact-button").prop('disabled', true);
	}
	
	for(let i=0; i<listArtifact.length; i++){
	  let unlockArtifact = listArtifact[i];
	  let unlockArtifactId = unlockArtifact.id;
	  let artifactData = artifact.find(item => item.id === unlockArtifactId);
	  let upgradeFee = formulaArtifactUpgradeFee(unlockArtifactId);
	  let currentDamageText = artifactData.calcDamage+numberFormat(unlockArtifact.damage*1)+artifactData.descDamage;
	  let nextDamage = 0;
	  let searchArrayArtifactLevel = arrayArtifactLevel.find(item => item.artifactId === unlockArtifactId);;
	  let availableLevel = multiplierArtifact;
	  
	  if(multiplierArtifact > 0) nextDamage = (artifactData.baseDamage * multiplierArtifact) + (unlockArtifact.damage*1);
	  else if(multiplierArtifact == 0) nextDamage = (artifactData.baseDamage * searchArrayArtifactLevel.maxLevel) + (unlockArtifact.damage*1);
	  
	  let nextDamageText = "=>"+artifactData.calcDamage+numberFormat(nextDamage)+artifactData.descDamage;
	  
	  availableLevel = searchArrayArtifactLevel.maxLevel;
	  
	  if( !$( "#artifact-area-" + unlockArtifactId ).length){
		let appendArtifactDiv = '<div class="row col-xl-4 col-lg-6 col-md-6 col-sm-12 col-12 p-1">';
			appendArtifactDiv += '<div id="artifact-area-' + unlockArtifactId + '" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0">';
			appendArtifactDiv += '<div class="col-xl-7 col-lg-7 col-md-7 col-sm-7 col-7 v-center-flex">';
			appendArtifactDiv += '<img src="assets/images/'+artifactData.type.toLowerCase()+'.svg" title="'+artifactData.type+'" class="image-size"></img>&nbsp;<span id="artifact-name-' + unlockArtifactId + '">' + artifactData.name + '</span>&nbsp;Lv&nbsp;<span id="artifact-level-' + unlockArtifactId + '">' + unlockArtifact.level + '</span>';
			appendArtifactDiv += '&nbsp;<span id="upgrade-artifact-level-' + unlockArtifactId + '" class="good-info">+'+availableLevel+'</span>';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '<div class="col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 v-center-flex">';
			appendArtifactDiv += '<span id="artifact-current-damage-text-' + unlockArtifactId + '">' + currentDamageText + '</span>&nbsp;<span id="artifact-nexr-damage-text-' + unlockArtifactId + '" class="good-info">' + nextDamageText + '</span>';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex">';
			appendArtifactDiv += '<span id="artifact-desc-' + unlockArtifactId + '">' + artifactData.description + ' ' + artifactData.baseDamage + artifactData.descDamage + ' / level</span>';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex">';
			appendArtifactDiv += '<div class="col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10 no-padding v-center-grid">';
		if(unlockArtifact.level < artifactData.maxLevel || artifactData.maxLevel == 0) appendArtifactDiv += '<button id="upgrade-artifact-button-' + unlockArtifactId + '" class="upgrade-level-button" value="' + unlockArtifactId + '"><img src="assets/images/upgrade.svg" class="image-size-2"></img>&nbsp;<span id="upgrade-artifact-fee-' + unlockArtifactId + '">Upgrade - ' + numberFormat(upgradeFee) + ' Orbs</span></button>';
		else appendArtifactDiv += '<button id="upgrade-artifact-button-' + unlockArtifactId + '" class="upgrade-level-button" disabled><span id="upgrade-artifact-fee-' + unlockArtifactId + '">Maxed</span></button>';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '<div id="sell-artifact-div-' + unlockArtifactId + '" class="col-xl-2 col-lg-2 col-md-2 col-sm-2 col-2 no-padding">';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '</div>';
			appendArtifactDiv += '</div>';

		$("#artifact-area-div").append(appendArtifactDiv).off('click','#upgrade-artifact-button-'+unlockArtifactId).on('click','#upgrade-artifact-button-'+unlockArtifactId,function(){
		  upgradeLevelArtifact(unlockArtifactId); 
		});
		
		let sellArtifactDiv = '<button id="sell-artifact-button-' + unlockArtifactId + '" class="upgrade-level-button btn-secondary" value="' + unlockArtifactId + '"><img src="assets/images/trade.svg" class="image-size-2-static"></img></button>';
		$("#sell-artifact-div-"+unlockArtifactId).append(sellArtifactDiv).on('click','#sell-artifact-button-'+unlockArtifactId,function(){
		  confirmSellArtifact(this); 
		});
		
	  }else{
		componentAction ("artifact-level-"+unlockArtifactId, "replaceText", unlockArtifact.level);
		if(unlockArtifact.level < artifactData.maxLevel || artifactData.maxLevel == 0) componentAction ("upgrade-artifact-fee-"+unlockArtifactId, "replaceText", "Upgrade - "+numberFormat(upgradeFee)+" Orbs");
		else{
		  componentAction ("upgrade-artifact-fee-"+unlockArtifactId, "replaceText", "Maxed");
		  $("#upgrade-artifact-button-"+unlockArtifactId).prop('disabled', true);
		}
	  }		  
	}
	
	calcHeightScrollDiv("artifact");
  };
  
  var cleanDuplicateArray = function(listArray){
	let seen = new Set();
	let cleanArray = listArray.filter(el => {
	  let duplicate = seen.has(el);
	  seen.add(el);
	  return !duplicate;
	}); 
	return cleanArray;	
  };
  
  var checkNextUnlockPartner = function(currentPartnerId){
	let currentPartnerData = partner.find(item => item.id === currentPartnerId);
	let nextUnlockPartner = hero.highestUnlockPartner.find(item => item.id === currentPartnerId);
	let totalUpgradeFee = new Decimal(0);
	let nextPartnerIsReady = true;
	let newReqLevel = 0;
	let prevPartnerId = -1;
	let prevPartnerName = "";
	let partnerId = currentPartnerId;

	while(nextUnlockPartner && nextUnlockPartner.status != "Battling"){
	  let nextPartnerId = partnerId + 1;
	  if(nextPartnerId >= partner.length) break;
	  let partnerData = partner.find(item => item.id === partnerId);
	  let nexPartnerData = partner.find(item => item.id === nextPartnerId);
	  let reqUnlockLevel = nexPartnerData.unlockReq;
		
	  for(let i=0;i<reqUnlockLevel;i++){
	    let upgradeFee = new Decimal(formulaUpgradePartnerFee(i,partnerData.basePrice));
		totalUpgradeFee = totalUpgradeFee.plus(upgradeFee);
	  }
	  partnerId +=1;
	  nextPartnerIsReady = false;
	  nextUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	}
	
	if(currentPartnerId > 0){
	  prevPartnerId = currentPartnerId - 1;
	  let prevPartnerData = partner.find(item => item.id === prevPartnerId);
	  if(!nextPartnerIsReady){
	    let tempUpgradeFee = new Decimal(0);
	    newReqLevel = currentPartnerData.unlockReq;
	  
	    while(tempUpgradeFee.lessThan(totalUpgradeFee)){
		  let upgradeFee = formulaUpgradePartnerFee(newReqLevel,prevPartnerData.basePrice);
	      tempUpgradeFee = tempUpgradeFee.plus(upgradeFee);
		  newReqLevel += 1;
	    }
	  }
	  prevPartnerName = prevPartnerData.name;
	}else{
	  if(!nextPartnerIsReady){
		let tempUpgradeFee = new Decimal(0);
		newReqLevel = currentPartnerData.unlockReq;
		
		while(tempUpgradeFee.lessThan(totalUpgradeFee)){
		  newReqLevel += 1;
		  let upgradeFee = formulaUpgradeHeroFee(newReqLevel-1);
	      tempUpgradeFee = tempUpgradeFee.plus(upgradeFee);
		}
	  }
	  prevPartnerName = "Hero";
	}
	if(newReqLevel % 5 != 0) newReqLevel = Math.ceil(newReqLevel/5)*5;

	let newObjUnlockNewPartner = {
	  unlockReq: newReqLevel,
	  prevPartnerId: prevPartnerId,
	  prevPartnerName: prevPartnerName,
	  nextPartnerId: partnerId,
	};
	return newObjUnlockNewPartner;
  };
  
  var checkDuplicateArtifact = function(){
	let seen = new Set();
	let cleanArtifact = hero.unlockArtifact.filter(el => {
	  let duplicate = seen.has(el.id);
	  seen.add(el.id);
	  return !duplicate;
	});
	if(hero.countArtifact != cleanArtifact.length){
	  hero.countArtifact = cleanArtifact.length;
	  updateAchievement(8);
	  hero.unlockArtifact = [];
	  hero.unlockArtifact = cleanArtifact;
	}
	sortingArtifact();
  };
  
  var checkDuplicateAdventure = function(objAdventureSlot){
	let seen = new Set();
	let cleanAdventure = objAdventureSlot.filter(el => {
	  let duplicate = seen.has(el.slotId);
	  seen.add(el.slotId);
	  return !duplicate;
	});
	objAdventureSlot = [];
	objAdventureSlot = cleanAdventure;
	return objAdventureSlot;
  };
  
  var showProfileArea = function(){
	lastActiveMenu = 'profile';
	showArea("profile");
	componentAction ("profile-user-id", "inputText", hero.userId);
	componentAction ("profile-user-name", "inputText", hero.userName);  
  };
  
  var showStatisticArea = function(){
	let highestPartnerLevelString = '';
	showArea("statistic");
	componentAction ("stat-first-datetime", "replaceText", dateFormat(hero.firstPlayDateTime));
	componentAction ("stat-online-duration", "replaceText", offlineTimeText(hero.totalOnlineDuration));
	componentAction ("stat-offline-duration", "replaceText", offlineTimeText(hero.totalOfflineDuration));
	componentAction ("stat-percentage-bonus-coin", "replaceText", numberFormat(hero.percentageBonusCoin));
	componentAction ("stat-online-gain-coin", "replaceText", numberFormat(hero.totalGainCoin));
	componentAction ("stat-offline-gain-coin", "replaceText", numberFormat(hero.totalOfflineCoin));
	componentAction ("stat-spent-coin", "replaceText", numberFormat(hero.totalSpentCoin));
	componentAction ("stat-total-click", "replaceText", numberFormat(hero.totalClick));
	componentAction ("stat-percentage-bonus-dpc", "replaceText", numberFormat(hero.percentageBonusDpc));
	componentAction ("stat-highest-dpc", "replaceText", numberFormat(hero.highestDpc));
	componentAction ("stat-crit-chance", "replaceText", numberFormat(calcTotalCritChance()*100));
	componentAction ("stat-crit-damage", "replaceText", numberFormat(calcTotalCritDamage().mul(100)));
	componentAction ("stat-percentage-bonus-dps", "replaceText", numberFormat(hero.percentageBonusDps));
	componentAction ("stat-highest-dps", "replaceText", numberFormat(hero.highestDps));
	componentAction ("stat-highest-floor", "replaceText", numberFormat(hero.highestFloor));
	componentAction ("stat-total-prestige", "replaceText", numberFormat(hero.totalCountPrestige));
	componentAction ("stat-percentage-bonus-orbs", "replaceText", numberFormat(hero.percentageBonusOrbs));
	componentAction ("stat-total-gain-orbs", "replaceText", numberFormat(hero.totalGainOrbs));
	componentAction ("stat-total-spent-orbs", "replaceText", numberFormat(hero.totalSpentOrbs));
	componentAction ("stat-total-artifact-unlock", "replaceText", numberFormat(hero.totalArtifactUnlock));
	componentAction ("stat-highest-hero-level", "replaceText", numberFormat(hero.highestHeroLevel));
	componentAction ("stat-highest-weapon-level", "replaceText", numberFormat(hero.highestWeaponLevel));
	
	for(let i=0;i<hero.highestUnlockPartner.length;i++){
	  let partnerId = hero.highestUnlockPartner[i].id;
	  let partnerLevel = hero.highestUnlockPartner[i].level;
	  let partnerDps = hero.highestUnlockPartner[i].dps;
	  let partnerData = partner.find(item => item.id === partnerId);
	  highestPartnerLevelString += partnerData.name+" - Level "+partnerLevel+" - DPS "+numberFormat(partnerDps)+"\n";
	}
	componentAction ("stat-highest-partner-level", "replaceText", highestPartnerLevelString);
	calcHeightScrollDiv("statistic");
  };
  
  var showAchievementArea = function(){
	let highestPartnerLevelString = '';
	let availableReward = false;
	showArea("achievement");
	componentAction ("achievement-token", "replaceText", numberFormat(hero.token));
	
	if( !$( "#collect-all-achievement-div" ).length){
	  let appendAllAchievementDiv = '<div id="collect-all-achievement-div" class="row border-top rounded-card p-0 mx-0 border-0">';
	  appendAllAchievementDiv += '<button id="collect-all-achievement-button" class="use-skill-button achievement-button">Collect All Achievement</button>';
	  appendAllAchievementDiv += '</div>';
	  $("#achievement-area-div").append(appendAllAchievementDiv).off('click','#collect-all-achievement-button').on('click','#collect-all-achievement-button',function(){
	    collectAllAchievementReward(); 
	  });
	}
	
	for(let i=0;i<hero.achievement.length;i++){
	  let unlockAchievement = hero.achievement.find(item => item.id === i);
	  let achievementData = achievement.find(item => item.id === i);
	  let achievementReward = (unlockAchievement.level%2==0 ? (unlockAchievement.level+1): unlockAchievement.level);
	  let achievementBalance = new Decimal(unlockAchievement.balance);
	  let achievementTarget = new Decimal(unlockAchievement.target);
	  let disableButton = '';
	  let buttonText = '';
	  let achievementLevel = unlockAchievement.level;
	  let notifIconClass = "upgrade-level-button";
	  
	  if(unlockAchievement.level < achievementData.maxLoop){
	    if(achievementBalance.lessThan(achievementTarget)){
		  disableButton = 'disabled';
		  buttonText = 'Next Reward - ' + numberFormat(achievementReward) + ' Token';
		  notifIconClass = 'use-skill-button skill-disabled';
	    }else{
		  buttonText = 'Collect Reward - ' + numberFormat(achievementReward) + ' Token';
		  notifIconClass = "achievement-button";
		  availableReward = true;
		}
	  }else{
		disableButton = 'disabled';
		buttonText = 'Maxed';  
	  }
	  if(achievementLevel == 0) achievementLevel = "";
	  
	  if( !$( "#achievement-area-" + i ).length){
		let appendAchievementDiv = '<div id="achievement-area-' + i + '" class="row border-top no-gutters rounded-card">';
		appendAchievementDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-11 col-10 py-3">';
		if(disableButton != 'disabled') appendAchievementDiv += '<div id="achievement-notif-'+i+'" class="notif-icon">';
		appendAchievementDiv += '<span id="achievement-name-' + i + '" class="strong">' + achievementData.name + '</span>';
		if(disableButton != 'disabled') appendAchievementDiv += '</div>';
		appendAchievementDiv += '</div>';
		if(unlockAchievement.level == 0) appendAchievementDiv += '<div id="achievement-image-' + i + '" class="col-xl-1 col-lg-1 col-md-1 col-sm-1 col-2 right-align achievement-bg-bw">';
		else appendAchievementDiv += '<div id="achievement-image-' + i + '" class="col-xl-1 col-lg-1 col-md-1 col-sm-1 col-2 right-align achievement-bg-color">';
		appendAchievementDiv += '<div class="middle-align pt-10x">';
		appendAchievementDiv += '<span id="achievement-level-' + i + '">' + achievementLevel + '</span>';
		appendAchievementDiv += '</div>';
		appendAchievementDiv += '</div>';
		appendAchievementDiv += '<div class="col-xl-8 col-lg-8 col-md-8 col-sm-12 col-12 animate-bar no-padding mt-2-5-cond">';
		appendAchievementDiv += '<div class="progress-bar-div">';
		appendAchievementDiv += '<span id="achievement-count-' + i + '">' + numberFormat(unlockAchievement.balance) + '</span> / <span id="achievement-target-' + i + '">'+ numberFormat(unlockAchievement.target)+ '</span>';
		appendAchievementDiv += '</div>';
		appendAchievementDiv += '<div id="achievement-bar-' + i + '" class="progress-bar achievement-progress-bar-color">&nbsp;</div>';
		appendAchievementDiv += '</div>';
		appendAchievementDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		appendAchievementDiv += '<button id="achievement-button-' + i + '" class="mt-1 '+notifIconClass+'" value="' + i + '"' + disableButton + '><span id="achievement-reward-' + i + '">' + buttonText + '</span></button>';
		appendAchievementDiv += '</div>';
		appendAchievementDiv += '</div>';
		$("#achievement-area-div").append(appendAchievementDiv).off('click','#achievement-button-'+i).on('click','#achievement-button-'+i,function(){
		  collectAchievementReward(this.value); 
	    });
	  }else{
		componentAction ("achievement-level-"+i, "replaceText", achievementLevel);
		componentAction ("achievement-count-"+i, "replaceText", numberFormat(unlockAchievement.balance));
		componentAction ("achievement-target-"+i, "replaceText", numberFormat(unlockAchievement.target));
		componentAction ("achievement-reward-"+i, "replaceText", buttonText);
		if(unlockAchievement.level > 0) componentAction ("achievement-image-"+i, "updateClass", "achievement-bg-bw,achievement-bg-color");
		if(disableButton == ''){
		  $("#achievement-button-"+i).prop('disabled', false);
		  componentAction("achievement-button-"+i,"removeClass","use-skill-button skill-disabled");
		  componentAction("achievement-button-"+i,"addClass","achievement-button");
		  componentAction("achievement-notif-"+i,"addClass","notif-icon");
		}else{
		  $("#achievement-button-"+i).prop('disabled', true);
		  componentAction("achievement-button-"+i,"addClass","use-skill-button skill-disabled");
		  componentAction("achievement-button-"+i,"removeClass","achievement-button");
		  componentAction("achievement-notif-"+i,"removeClass","notif-icon");
		}
	  }
	  
	  let currentBalance = new Decimal(unlockAchievement.balance).sub(unlockAchievement.prevTarget);
	  let currentTarget = new Decimal(unlockAchievement.target).sub(unlockAchievement.prevTarget);
	  let newAchievementBar = currentBalance.div(currentTarget).mul(100);
	  if(newAchievementBar.greaterThan(100)) newAchievementBar = 100;
	  componentAction ("achievement-bar-"+i, "animate", newAchievementBar);
	}
	
	if(availableReward) componentAction ("collect-all-achievement-button", "updateClass", "skill-disabled,achievement-button");
	else componentAction ("collect-all-achievement-button", "updateClass", "achievement-button,skill-disabled");
	
	calcHeightScrollDiv("achievement");
  };
  
  var startTowerBattle = function(towerId,towerFloor){
	if(towerDpsTimeout) towerDpsTimeout = clearTimeout(towerDpsTimeout);
	if(!towerDpsTimeout){
	  let heroTowerDps = new Decimal(calcTotalDps(true,"tower"));
	  let weaponDamage = new Decimal(calcTotalWeaponDamage());
	  let totalTowerDamage = heroTowerDps.plus(weaponDamage);
	  if(totalTowerDamage.greaterThan(0)){
		let towerManagerHpPercentage = new Decimal(100).sub(hero.bonusTowerHp).div(100);
		currentTowerManagerHp = new Decimal(setting.towerEnemyHpMultiplier).pow(towerFloor-1).mul(setting.baseTowerEnemyHp).mul(towerManagerHpPercentage);
		componentAction("tower-current-enemy-hp,tower-max-enemy-hp","replaceText",numberFormat(currentTowerManagerHp));
		componentAction("tower-enemy-name","replaceText","Tower Guardian "+towerFloor);
		lastTowerDpsHit = Date.now();
		selectedTowerId = towerId;
		selectedTowerFloor = towerFloor;
		loopTowerDpsTimer();
	  }else towerDpsTimeout = clearTimeout(towerDpsTimeout);
	}
  };
  
  var checkTowerRewardImg = function(material){
	let prizeImg = "";
	switch(material.toLowerCase()){
	  case "equipment-sphere":
		prizeImg = "sphere";
		break;
	  case "equipment":
		prizeImg = "equipment-color";
		break;
	  case "treasure":
		prizeImg = "chest";
		break;
	  default:
		prizeImg = material;
		break;
	};
	return prizeImg;
  };
  
  var viewTowerReward = function(towerId, arrayTowerReward){
	let currentReward;
	switch(towerId){
	  case 4:
	    let percentage = arrayTowerReward.dropPercentageView[arrayTowerReward.dropPercentageView.length-1];
		if(percentage < 10) percentage = numberFormat(percentage);
		else percentage = Math.round(percentage);
		currentReward = percentage+"% of "+arrayTowerReward.grade[arrayTowerReward.grade.length-1];
		break;
	  default:
	    currentReward = arrayTowerReward;
		break;
	};
	return currentReward;	
  };
  
  var checkTowerReward = function(towerId, selectedFloor){
	let towerData = tower.find(item => item.id === towerId);
	let currentReward = new Decimal(0);
	switch(towerId){
	  case 0:
	  case 1:
	  case 2:
	  case 3:
	  case 5:
		if(towerData.multiplierType == "%") currentReward = new Decimal(towerData.multiplierValue).div(100).pow(selectedFloor-1).mul(towerData.basePrice);
		else currentReward = new Decimal(towerData.multiplierValue).mul(selectedFloor-1).plus(towerData.basePrice);
		return currentReward.floor();
		break;
	  case 4:
	    let towerManagerHp = new Decimal(setting.towerEnemyHpMultiplier).pow(selectedFloor-1).mul(setting.baseTowerEnemyHp);
		let exponent = Math.floor(Decimal.log10(towerManagerHp));
		if(exponent<1)exponent = 1;
		let newObjDropRate;
		
		let selectedTowerEquipmentDropRate = towerEquipmentDropRate.find(item => item.towerFloor === selectedFloor);
		if(selectedTowerEquipmentDropRate) newObjDropRate = selectedTowerEquipmentDropRate;
		else{
		  let lowerGradeEquipmentList = gradeEquipment.filter(item => item.weaponExponent <= exponent);
		  let nextGradeEquipmentList;
		  if(lowerGradeEquipmentList.length == 0){
		    lowerGradeEquipmentList.push(gradeEquipment[0]);
		    nextGradeEquipmentList = gradeEquipment.filter(item => item.id > 0);
		  }else{
		    nextGradeEquipmentList = gradeEquipment.filter(item => item.weaponExponent > exponent);
		  }
		  let nextGrade = nextGradeEquipmentList[0].name;
		  let nextGradeExponent = nextGradeEquipmentList[0].weaponExponent;
		
		  let equipmentDropRateData = equipmentDropRate.find(item => item.id === (lowerGradeEquipmentList.length-1));
		  let highestGrade = lowerGradeEquipmentList[lowerGradeEquipmentList.length-1].name;
		  let tempEquipmentDropRate = JSON.parse(JSON.stringify(equipmentDropRateData.dropPercentage));
		  newObjDropRate = {
			towerFloor: selectedFloor, 
		    grade: equipmentDropRateData.grade,
		    dropPercentage: tempEquipmentDropRate,
		    dropPercentageView: [],
		    dropQty: equipmentDropRateData.dropQty,
		  };
		  for(let i=0;i<tempEquipmentDropRate.length;i++){
		    let viewEquipmentDropRate = 0;
		    if(tempEquipmentDropRate[i] < 100){
			  viewEquipmentDropRate = tempEquipmentDropRate[i] * exponent / nextGradeExponent;
			  newObjDropRate.dropPercentage[i] = newObjDropRate.dropPercentage[i] * exponent / nextGradeExponent;
		    }else viewEquipmentDropRate = tempEquipmentDropRate[i] * (exponent+2) / nextGradeExponent;
		    newObjDropRate.dropPercentageView.push(viewEquipmentDropRate);
		  }
		  
		  towerEquipmentDropRate.push(newObjDropRate);
		}
		return newObjDropRate;
		break;
	};
	
  };
  
  var getTowerReward = function(towerId, towerReward, usedKey=1){
	if(towerId != 4 && towerId != 6 && towerId != 7) towerReward = new Decimal(usedKey).mul(towerReward);
	
	switch(towerId){
	  case 0:
		hero.coin = new Decimal(hero.coin).plus(towerReward);
		hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(towerReward);
	    addedCoin = true;
		break;
	  case 1:
	    hero.orbs = new Decimal(hero.orbs).plus(towerReward);
		break;
	  case 2:
	    hero.spiritStone = (hero.spiritStone*1) + (towerReward*1);
		break;
	  case 3:
	    hero.sphere = (hero.sphere*1) + (towerReward*1);
		break;
	  case 4:
	    let towerRewardArray = towerReward;
		insertNewUnlockEquipment(true,-1,towerRewardArray,true,(usedKey*1));
		break;
	  case 5:
	    hero.soul = (hero.soul*1) + (towerReward*1);
		break;		
	  case 6:
	    /*treasure*/
		break;
	  case 7:
		/*gems*/
		break;
	};
	if(towerId != 4){
	  $("#modalActionTower").modal("show");
	  componentAction("tower-information-div", "replaceText", "Congratz, you managed to beat the tower manager and you can repeatedly clear this tower floor",true);
	  componentAction("tower-information-ok-button","inputValue","success",true);
	}
	updateTask(27);
	showDetailTowerArea(towerId,true);
	$("#tower-battle-area-"+towerId).remove();
  };
  
  var actionTower = function(e){
	let towerId = parseInt(e.id.replace('action-tower-button-',''));
	let towerFloor = parseInt(e.value,10);
	let unlockTower = hero.unlockTower.find(item => item.id === towerId);
	let towerData = tower.find(item => item.id === towerId);
	let heroTowerDps = new Decimal(calcTotalDps(true,"tower"));
	let weaponDamage = new Decimal(calcTotalWeaponDamage());
	let totalTowerDamage = heroTowerDps.plus(weaponDamage);
	  
	let canRunTower = true;
	let notificationAlert = "";
	
	if(totalTowerDamage.lessThanOrEqualTo(0)){
	  canRunTower = false;
	  notificationAlert = "You must have at least 1 elite to get started";
	}else if(unlockTower.availableKey <= 0){
	  canRunTower = false;
	  notificationAlert = "You don't have enough key to enter the tower";
	}else if(towerId == 4 && hero.countBackpack == hero.maxBackpack){
	  canRunTower = false;
	  notificationAlert = "Your backpack is full. Please give 1 slot for the prize";
	}
	if(canRunTower){
	  if(towerFloor <= unlockTower.currentFloor){ 
	    $("#modalClearTower").modal("show"); 
		componentAction("ti","inputText",towerId);
		componentAction("fn","inputText",towerFloor);
		componentAction("used-key","inputText",unlockTower.availableKey);
	  }else{
	    $("#tower-area-div").empty();
	    componentAction("accordionSidebar","addClass","d-none");
	    componentAction("sidebarToggleTop","addClass","d-none");
	    let towerName = towerData.name;
	    let towerImg = towerName.toLowerCase().split(' ').join('-');
	    let prizeImg = checkTowerRewardImg(towerData.material.toLowerCase());
	    let towerReward = checkTowerReward(towerId,towerFloor);
		let currentReward = viewTowerReward(towerId, towerReward);
		
	    let appendTowerActionDiv = '<div id="tower-battle-area-'+towerId+'" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1">';
	    appendTowerActionDiv += '<div class="row col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 m-0 middle-align v-center-flex">';
	    appendTowerActionDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	    appendTowerActionDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	    appendTowerActionDiv += '<img src="assets/images/'+towerImg+'.svg" class="medium-img">';
	    appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">'+towerName+'</div>';
	    appendTowerActionDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Prize :&nbsp;'+numberFormat(currentReward)+'&nbsp;<img src="assets/images/'+prizeImg+'.svg" class="image-size-2"></img></div>';
	    appendTowerActionDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Selected Floor : '+towerFloor+'</div>';
	    appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '<div class="row col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 m-0 px-0">';
	    appendTowerActionDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0 h-fix">';
	    appendTowerActionDiv += '<div class="enemy-area">';
        appendTowerActionDiv += '<div class="enemy-name">';
	    appendTowerActionDiv += '<span id="tower-enemy-name"></span>';
	    appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '<div id="tower-timer-bar" class="timer-bar">&nbsp;</div>';
	    appendTowerActionDiv += '<div id="tower-enemy-hp" class="animate-bar">';
	    appendTowerActionDiv += '<div class="enemy-hp-text">';
	    appendTowerActionDiv += '<span id="tower-current-enemy-hp"></span> / <span id="tower-max-enemy-hp"></span>';
	    appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '<div id="tower-progress-bar" class="progress-bar-hp">&nbsp;</div>';
	    appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '</div>';
        appendTowerActionDiv += '</div>';
	    appendTowerActionDiv += '<div id="tower-battle-log-div" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 pt-1 px-0 h-tower-battle"></div>';
	    appendTowerActionDiv += '</div>';
	    $("#tower-area-div").append(appendTowerActionDiv);
	  
	    ifvisible.off('blur');
	    calcHeightTowerBattleDiv("h-tower-battle");
	  
	    restTowerBossTimer = (setting.baseTowerTimeLimit + (hero.bonusTowerTimeLimit*1)) * 1000 / setting.gameSpeed;
	    lastTowerBossTimer = Date.now();
	    componentAction ("tower-timer-bar", "animate", 100);
	    componentAction ("tower-timer-bar", "addClass", "timer-bar-bgcolor");
	    startTowerBattle(towerId,towerFloor);
	  }
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", notificationAlert);  
	}
  };
  
  var showDetailTowerArea = function(towerId,forceRun){
	towerId = parseInt(towerId,10);
	let towerData = tower.find(item => item.id === towerId);
	let unlockTower = hero.unlockTower.find(item => item.id === towerId);
	let towerName = towerData.name;
	let towerImg = towerName.toLowerCase().split(' ').join('-');
	if(unlockTower){
	  selectedTowerFloor = -1;
	  selectedTowerId = -1;	
	  $("#tower-area-div").empty();
	  componentAction("close-detail-tower-div","removeClass","d-none",forceRun);
	  let appendTowerDetailDiv = '<div id="tower-detail-area-'+towerId+'" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1">';
	  appendTowerDetailDiv += '<div class="row col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 m-0 middle-align v-center-flex">';
	  appendTowerDetailDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	  appendTowerDetailDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	  appendTowerDetailDiv += '<img src="assets/images/'+towerImg+'.svg" class="medium-img">';
	  appendTowerDetailDiv += '</div>';
	  appendTowerDetailDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">'+towerName+'</div>';
	  appendTowerDetailDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Prize :&nbsp;'+firstLetterFormat(towerData.material,"uppercase","-").replace("-"," ")+'</div>';
	  appendTowerDetailDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Available Key : '+unlockTower.availableKey+"/"+setting.availableKeyEachTower+'</div>';
	  appendTowerDetailDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Complete Floor : '+unlockTower.currentFloor+'</div>';
	  appendTowerDetailDiv += '</div>';
	  appendTowerDetailDiv += '</div>';
	  appendTowerDetailDiv += '<div class="row col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 m-0 h-tower-floor">';
	  for(let i=unlockTower.currentFloor+9;i>=0;i--){
		let number = i+1;
		let currentReward;
		let towerAction = "";
		let actionClass = "";
		let buttonClass = "";
		
		if(number <= unlockTower.currentFloor){
		  towerAction = "Clear";
		  buttonClass = "skill-active";
		}else if(number == (unlockTower.currentFloor)+1) towerAction = "Battle";
		
		if(towerAction == "") actionClass = "d-none";
		let currentRewardArray = checkTowerReward(towerId,i+1);
		currentReward = viewTowerReward(towerId, currentRewardArray);
		let prizeImg = checkTowerRewardImg(towerData.material.toLowerCase());
		
		appendTowerDetailDiv += '<div id="tower-floor-'+i+'" class = "row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card v-center-flex">';
		appendTowerDetailDiv += '<div class = "col-xl-1 col-lg-1 col-md-1 col-sm-1 col-2">'+number+'.&nbsp;</div>';
		appendTowerDetailDiv += '<div class = "col-xl-7 col-lg-7 col-md-7 col-sm-7 col-6">'+numberFormat(currentReward)+'&nbsp;';
		appendTowerDetailDiv += '<img src="assets/images/'+prizeImg+'.svg" class="image-size-2"></img>';
		appendTowerDetailDiv += '</div>';
		appendTowerDetailDiv += '<div class = "col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4">';
		appendTowerDetailDiv += '<button id="action-tower-button-'+towerId+'" class="upgrade-level-button action-tower '+actionClass+' '+buttonClass+'" value="'+number+'">'+towerAction+'</button>';
		appendTowerDetailDiv += '</div>';
		appendTowerDetailDiv += '</div>';
	  }
	  appendTowerDetailDiv += '</div>';
	  appendTowerDetailDiv += '</div>';
	  
	  $("#tower-area-div").append(appendTowerDetailDiv).off('click','.action-tower').on('click','.action-tower',function(){
		actionTower(this);
	  });
	  checkCssSetting();
	  calcHeightTowerBattleDiv("h-tower-floor");
	  scrollTheDiv("tower-floor-"+unlockTower.currentFloor,"end");
	  calcHeightScrollDiv("tower");
	}
  };
  
  var showCaveArea = function(){
	showArea("cave");
	componentAction("cave-hero-token","replaceText",numberFormat(hero.token));
	if(hero.highestFloor >= unlockNewFeatureFloor("cave")){
	  if(hero.countArmy > 0){
	    if($("#cave-unlock-div").length) $("#cave-unlock-div").remove();
		let caveText = "Please ask bartender in tavern to start the quest";

		if(!checkAvailableRunQuest()) caveText = "Your all army is dead. Please use heal item or buy it from the bartender in the tavern";
		
	    if( !$( "#cave-area" ).length){
	      let contentQuestDiv = '<div id="cave-area" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1">';
		  contentQuestDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1 unlock-info v-center-flex">';
		  contentQuestDiv += '<span id="cave-text">'+caveText+'</span>&nbsp;<button id="meet-bartender" class="upgrade-level-button w-auto">Go To Tavern</button>';
		  contentQuestDiv += '</div>';
	      contentQuestDiv += showCaveContentDiv("caveArea");
	      contentQuestDiv += '</div>';
	      if(contentQuestDiv != "") $("#cave-area-div").append(contentQuestDiv).off("click",".unlock-slot").on("click",".unlock-slot",function(){
		    confirmUnlockCaveNewSlot(this.id);
		  }).off("click","#meet-bartender").on("click","#meet-bartender",function(){
			hideAllContent();
			hideAllMenu();
			showMenu("town");
			showTavernArea("cave");
		  });
	    }else componentAction("cave-text","replaceText",caveText);
	  }else{
		if( !$( "#cave-empty-army-div").length){
		  let appendCaveDiv = showEmptyArmy("cave");
	      $("#cave-area-div").append(appendCaveDiv);
		}
	  }
	}else{
	  if( !$( "#cave-unlock-div").length){
	    let appendCaveDiv = '<div id="cave-unlock-div" class="rounded-card unlock-info middle-align">Unlock this cave at stage ' + unlockNewFeatureFloor("cave") + ' </div>';
	    $("#cave-area-div").append(appendCaveDiv);
	  }	
	}
	calcHeightScrollDiv("cave");  
  };
  
  var confirmUnlockCaveNewSlot = function(divId){
	let arrayDivId = divId.replace("cave-slot-","").split("-");
	let caveId = parseInt(arrayDivId[0],10);
	let caveSlot = parseInt(arrayDivId[1],10);
	
	let unlockCave = hero.unlockCave.find(item => item.id === caveId);
	if(unlockCave.availableSlot < 3){
	  if(caveSlot == unlockCave.availableSlot){
	    let caveData = cave.find(item => item.id === caveId);
	    let heroToken = new Decimal(hero.token);
	    let unlockFee = new Decimal(caveSlot).mul(setting.defaultUnlockCaveSlotFee);
	    if(heroToken.greaterThanOrEqualTo(unlockFee)){
		  $("#modalConfirmUnlockCaveSlot").modal("show");
	      let modalDesc = "Are you sure want to unlock "+caveData.name+" slot for "+(caveSlot*setting.defaultUnlockCaveSlotFee)+" token ?";
	      componentAction("unlock-cave-slot-desc","replaceText",modalDesc);
	      componentAction("unlock-cave-slot-ok-button","inputText",divId.replace("cave-slot-",""));
	    }else{
		  $("#modalNotification").modal("show");
	      componentAction ("notification-text", "replaceText", "You don't have enough token");  
	    }
	  }else if(caveSlot > unlockCave.availableSlot){
	    $("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "You must unlock previous cave slot first");
	  }
	}
  };
  
  var unlockCaveNewSlot = function(value){
	let arrayValue = value.split("-");
	let caveId = parseInt(arrayValue[0],10);
	let caveSlot = parseInt(arrayValue[1],10);
	
	let unlockCave = hero.unlockCave.find(item => item.id === caveId);
	if(caveSlot == unlockCave.availableSlot){
	  let caveData = cave.find(item => item.id === caveId);
	  let heroToken = new Decimal(hero.token);
	  let unlockFee = new Decimal(caveSlot).mul(setting.defaultUnlockCaveSlotFee);
	  if(heroToken.greaterThanOrEqualTo(unlockFee)){
		hero.token = heroToken.sub(unlockFee);
		unlockCave.availableSlot += 1;
		componentAction("cave-slot-"+value,"replaceText","------");
		componentAction("cave-slot-"+value,"removeClass","cursor-button");
		componentAction("cave-hero-token","replaceText",numberFormat(hero.token));
		saveGame();
	  }else{
		$("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "You don't have enough token");  
	  }
	}else if(caveSlot > unlockCave.availableSlot){
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You must unlock previous cave slot first");
	}
  };
  
  var setSizeModalStartQuest = function(){
	if($(window).width() >= 576){;
	  let newModalWidth = $(window).width() * 0.75;
	  $('.modal-dialog').css({"max-width":(newModalWidth)});
	  $('.modal-dialog').css({"width":(newModalWidth)});
	}else calcDefaultModalWidth();  
  };
  
  var showDetailCaveArea = function(caveId,page){
	caveId = parseInt(caveId,10);  
	$("#modalConfirmStartQuest").modal('show');
	componentAction("start-quest-cave-id","inputText",caveId);
	componentAction("start-quest-army-id","clearArea","");
	setSizeModalStartQuest();
	$("#modal-start-quest").empty();
	let divId = "quest-army";
	
	let availableArmy = hero.unlockArmy.filter(item => item.status === "Resting");
	let infoQuestDiv = "";
	if(availableArmy.length > 0){
	  let selectedCave = cave.find(item => item.id === caveId);
	  infoQuestDiv ='<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-1 pt-1 unlock-info">Which army will you appoint to run quest in '+selectedCave.name+'?</div>';
	  infoQuestDiv += showPopupArmy(availableArmy,divId);
	  
	  if(infoQuestDiv != "") $("#modal-start-quest").append(infoQuestDiv).off("click",".camp-army-area").on("click",".camp-army-area",function(){
	    selectArmy(this.id,divId);
	  });
	  componentAction("start-quest-ok-button","removeClass","d-none");
	}else{
	  infoQuestDiv = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-1 pt-1 unlock-info">You do not have any idle army</div>';
	  if(infoQuestDiv != "") $("#modal-start-quest").append(infoQuestDiv);
	  componentAction("start-quest-ok-button","addClass","d-none");
	  
	}
  };
  
  var showPopupArmy = function(availableArmy,divId){
	let popupArmyDiv = "";
	for(let i=0;i<availableArmy.length;i++){
	  let unlockArmy = availableArmy[i];	  
	  let arrayStatArmy = calcArmyStat(unlockArmy.id);
	  let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);

	  let armyHp =  arrayStatArmy["armyHp"];
	  let armyMaxHp =  arrayStatArmy["armyMaxHp"];
	  let percentageHp = (armyHp / armyMaxHp) * 100;
	  let armyAtk =  arrayStatArmy["armyAtk"];
	  let armyDef =  arrayStatArmy["armyDef"];
	  let armyAgi =  arrayStatArmy["armyAgi"];
	  let armyDex =  arrayStatArmy["armyDex"];
	  let armyCritChance =  arrayStatArmy["armyCritChance"];
	  let armyCritDmg =  arrayStatArmy["armyCritDmg"];
	  let armyCritDef =  arrayStatArmy["armyCritDef"];

	  let buttonClass = "d-none";
	  if(unlockArmyStat.point > 0) buttonClass = "";
	  let warningClass = "d-none";
	  let dangerClass = "d-none";
	  
	  if(percentageHp <= hero.settingDangerPercentageHP) dangerClass = "";
	  else if(percentageHp <= hero.settingWarningPercentageHP) warningClass = "";
		
	  popupArmyDiv += '<div class="row col-xl-4 col-lg-6 col-md-6 col-sm-6 col-12 p-1">';
	  popupArmyDiv += '<div id="'+divId+'-' + unlockArmy.id + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0 cursor-button camp-army-area">';
	  popupArmyDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-1">';
	  popupArmyDiv += '<img src="assets/images/'+unlockArmy.currentType.toLowerCase()+'.svg" class="image-size" title="'+unlockArmy.currentType.toLowerCase()+'"></img>&nbsp;'+unlockArmy.name+'&nbsp;&nbsp;&nbsp;';
	  popupArmyDiv += '<img src="assets/images/'+unlockArmy.status.toLowerCase().replace(" ","-")+'.svg" class="image-size" title="'+unlockArmy.status.toLowerCase().replace(" ","-")+'"></img>&nbsp;'+unlockArmy.status;
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/life.svg" class="image-size" title="HP"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-hp-'+unlockArmy.id+'">'+numberFormat(armyHp)+'</span>&nbsp;/&nbsp;<span id="popup-maxHp-'+unlockArmy.id+'">'+numberFormat(armyMaxHp)+'</span>&nbsp;';
	  popupArmyDiv += '<img id="popup-img-warning-' + unlockArmy.id + '" src="assets/images/warning.svg" class="image-size '+warningClass+'" title="Warning"></img>';
	  popupArmyDiv += '<img id="popup-img-danger-' + unlockArmy.id + '" src="assets/images/danger.svg" class="image-size '+dangerClass+'" title="Danger"></img>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/attack.svg" class="image-size" title="Attack"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-atk-'+unlockArmy.id+'">'+numberFormat(armyAtk)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/defence.svg" class="image-size" title="Defence"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-def-'+unlockArmy.id+'">'+numberFormat(armyDef)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/agility.svg" class="image-size" title="Agility"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp';
	  popupArmyDiv += '&nbsp;<span id="popup-agi-'+unlockArmy.id+'">'+numberFormat(armyAgi)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/dexterity.svg" class="image-size" title="Dexterity"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-dex-'+unlockArmy.id+'">'+numberFormat(armyDex)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/crit-chance.svg" class="image-size" title="Crit Chance"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-crit-chance-'+unlockArmy.id+'">'+numberFormat(armyCritChance)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/crit-dmg.svg" class="image-size" title="Crit Dmg"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-crit-damage-'+unlockArmy.id+'">'+numberFormat(armyCritDmg)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';

	  popupArmyDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mb-1">';
	  popupArmyDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-2 v-center-flex px-0"><img src="assets/images/crit-def.svg" class="image-size" title="Crit Def"></img></div>';
	  popupArmyDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-10 v-center-flex px-0">:&nbsp;';
	  popupArmyDiv += '&nbsp;<span id="popup-crit-defence-'+unlockArmy.id+'">'+numberFormat(armyCritDef)+'</span>&nbsp;';
	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';

	  popupArmyDiv += '</div>';
	  popupArmyDiv += '</div>';
	}
	return popupArmyDiv;
  };
  
  var selectArmy = function(selectedArmyId,divId){
	let armyId = parseInt(selectedArmyId.replace(divId+"-",""),10);
	componentAction(selectedArmyId,"updateClass","rounded-card,selected-rounded-card");
	switch(divId){
	  case "quest-army":
	    componentAction(divId+"-"+$("#start-quest-army-id").val(),"updateClass","selected-rounded-card,rounded-card");
	    componentAction("start-quest-army-id","inputText",armyId);
		break;
	  case "heal-army":
	    let arrayExistingValue = $("#use-item-ok-button").val().split("=");
		if(arrayExistingValue[1] != armyId) componentAction(divId+"-"+arrayExistingValue[1],"updateClass","selected-rounded-card,rounded-card");
		componentAction("use-item-ok-button","inputText",arrayExistingValue[0]+"="+armyId);
		break;
	}
  };
  
  var updateCaveUsedSlot = function(caveId,action){
	let unlockCave = hero.unlockCave.find(item => item.id === caveId);
	switch(action){
	  case "+":
	    unlockCave.usedSlot += 1;
		break;
	  case "-":
	    unlockCave.usedSlot -= 1;
		break;	
	}
  };
  
  var startQuest = function(caveId,armyId){ 
	caveId = parseInt(caveId,10);
	armyId = parseInt(armyId,10);
	if(armyId < 0){
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You must choose the army before start the quest.");
	  componentAction("notification-ok-button","inputText","sq="+caveId);
	}else{
	  let caveData = cave.find(item => item.id === caveId);
	  let unlockCave = hero.unlockCave.find(item => item.id === caveId);
	  if(unlockCave.availableSlot > unlockCave.usedSlot){
		let selectedSlot = -1;
		for(let i=0;i<unlockCave.availableSlot;i++){
		  let searchArmy = hero.unlockArmy.find(item => item.caveId === caveId && item.caveSlot === i);
		  if(!searchArmy || searchArmy === undefined){
			selectedSlot = i;
		    i = unlockCave.availableSlot;
		  }
		}
	    let nextQty = hero.countBackpack + caveData.dropMaxQty;
	    if(nextQty <= hero.maxBackpack){
	      let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	      let startQuestTime = Date.now();
	      let questTime = (setting.defaultCaveQuestHour * 3600 * 1000) / setting.gameSpeed;
	      let endQuestTime = startQuestTime + questTime;
	  
	      unlockArmy.status = "On Quest";
	      unlockArmy.endQuestTime = endQuestTime;
	      unlockArmy.caveId = caveId;
		  unlockArmy.caveSlot = selectedSlot;
		  updateCaveUsedSlot(caveId,"+");
	      if(unlockArmy.caveId >= 0) startQuestTimer(armyId);
	      updateCaveStatus(caveId);
		  saveGame();
	    }else if(hero.countBackpack >= hero.maxBackpack){
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "Your backpack has no room for new "+caveData.dropItemType)
	    }else{
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "Your backpack is almost full. You may not be able to get all the "+caveData.dropItemType)  
	    }
	  }else{
		$("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "No available slot left to run quest in this cave")    
	  }
	} 
  };
  
  var showTowerArea = function(){
	unlockNewTower();  
	showArea("tower");
	$("#tower-area-div").empty();
	stopTowerBossTimer();
	componentAction("close-detail-tower-div","addClass","d-none");
	componentAction("reset-tower-timer","replaceText",offlineTimeFormat(restResetTimer()));
	
	for(let i=0;i<tower.length;i++){
	  let towerData = tower[i];
	  let towerId = towerData.id;
	  let unlockTower = hero.unlockTower.find(item => item.id === towerId);
	  
	  if( !$( "#tower-area-" + towerId ).length){
		let towerName = towerData.name;
		let towerImg = towerName.toLowerCase().split(' ').join('-');
		let appendTowerDiv = '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-4 col-6 p-1">';
		appendTowerDiv += '<div id="tower-area-' + towerId + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 rounded-card middle-align">';
		appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		appendTowerDiv += '<img id="tower-image-'+towerId+'" src="assets/images/'+towerImg+'.svg" class="medium-img cursor-button tower-area">';
		appendTowerDiv += '</div>';
		appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">'+towerName+'</div>';
		appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Prize :&nbsp;'+firstLetterFormat(towerData.material,"uppercase","-").replace("-"," ")+'</div>';
		if(hero.highestFloor >= towerData.unlockReqFloor && towerData.unlockReqFloor > 0){
		  appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex middle-content">Available Key : <span id="available-key-'+towerId+'">'+unlockTower.availableKey+"</span>/"+setting.availableKeyEachTower+'&nbsp;&nbsp;<img id="add-key-'+towerId+'" src="assets/images/plus.svg" class="hide-menu cursor-button add-key"></img></div>';
		  appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Complete Floor : '+unlockTower.currentFloor+'</div>';
		}else{
		  appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12"></div>';
		  appendTowerDiv += '<div class = "col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12"></div>';
		}
		appendTowerDiv += '</div>';
		if(hero.highestFloor < towerData.unlockReqFloor || towerData.unlockReqFloor == 0){
		  appendTowerDiv += '<div class="m-0 tower-overlay v-center-grid">';
		  if(towerData.unlockReqFloor == 0) appendTowerDiv += '<div class="middle-align good-info">--== Coming Soon ==--</div>';
		  else appendTowerDiv += '<div class="middle-align unlock-info">Unlock at stage '+towerData.unlockReqFloor+'</div>';
		  appendTowerDiv += '</div>';
		}
		appendTowerDiv += '</div>';
		
		$("#tower-area-div").append(appendTowerDiv).off('click','#tower-image-'+towerId).on('click','#tower-image-'+towerId,function(){
		  showDetailTowerArea(towerId);
		}).off('click','#add-key-'+towerId).on('click','#add-key-'+towerId,function(){
		  chooseBuyTowerKey(towerId);
		});
	  }else{
		componentAction("available-key-"+towerId,"replaceText",unlockTower.availableKey);
	  }
	}
	calcHeightScrollDiv("tower");
  };
  
  var showDailyTaskArea = function(){
	showTaskTab("daily");
	
	for(let i=0; i<hero.dailyTask.task.length; i++){
	  let unlockDailyTask = hero.dailyTask.task[i];
	  let unlockDailyTaskId = unlockDailyTask.id;
	  let dailyTaskData = dailyTask.find(item => item.id === unlockDailyTaskId);
	  if(unlockDailyTask.count == null || unlockDailyTask.count == NaN) unlockDailyTask.count = 0;
	  
	  if( !$( "#daily-task-area-" + unlockDailyTaskId ).length){
		let appendDailyTaskDiv = '<div id="daily-task-area-' + unlockDailyTaskId + '" class="row border-top rounded-card">';
			appendDailyTaskDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-10 col-10 v-center">';
			appendDailyTaskDiv += '<span id="daily-task-name-' + unlockDailyTaskId + '" class="strong">' + dailyTaskData.name + ' ('+dailyTaskData.prize+' Token)</span>';
			appendDailyTaskDiv += '</div>';
			appendDailyTaskDiv += '<div class="col-xl-1 col-lg-1 col-md-1 col-sm-2 col-2 right-align v-center">';
		if(unlockDailyTask.complete) appendDailyTaskDiv += '<span id="daily-task-complete-' + unlockDailyTaskId + '"><img src="assets/images/complete.svg" height="20px"></img></span>';
		else appendDailyTaskDiv += '<span id="daily-task-complete-' + unlockDailyTaskId + '" class="d-none"><img src="assets/images/complete.svg" height="20px"></img></span>';
			appendDailyTaskDiv += '</div>';
			appendDailyTaskDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 v-center">';
			appendDailyTaskDiv += '<span id="daily-task-desc-' + unlockDailyTaskId + '">' + dailyTaskData.description + ' ' + numberFormat(dailyTaskData.required) + ' ' + dailyTaskData.unit+'</span>';
			appendDailyTaskDiv += '</div>';		  
			appendDailyTaskDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 v-center animate-bar no-padding">';
			appendDailyTaskDiv += '<div class="progress-bar-div">';
			appendDailyTaskDiv += '<span id="current-count-' + unlockDailyTaskId + '">' + numberFormat(unlockDailyTask.count) + '</span> / '+ numberFormat(dailyTaskData.required);
			appendDailyTaskDiv += '</div>';
			appendDailyTaskDiv += '<div id="daily-task-bar-' + unlockDailyTaskId + '" class="progress-bar daily-task-progress-bar-color">&nbsp;</div>';
			appendDailyTaskDiv += '</div>';
			appendDailyTaskDiv += '</div>';

		$("#daily-task-area-div").append(appendDailyTaskDiv);
	  }else{
		componentAction ("current-count-"+unlockDailyTaskId, "replaceText", unlockDailyTask.count);
		if(unlockDailyTask.complete) componentAction ("daily-task-complete-"+unlockDailyTaskId, "removeClass", "d-none");
	  }
	  let newDailyTaskBar = unlockDailyTask.count / dailyTaskData.required * 100;
	  componentAction ("daily-task-bar-"+unlockDailyTaskId, "animate", newDailyTaskBar);
	}
	if(!hero.token) hero.token = new Decimal(0);
	componentAction ("hero-token", "replaceText", numberFormat(hero.token));
	calcHeightScrollDiv("daily-task");
  };
  
  var showWeeklyTaskArea = function(){
	showTaskTab("weekly");
	
	for(let i=0; i<hero.weeklyTask.task.length; i++){
	  let unlockWeeklyTask = hero.weeklyTask.task[i];
	  let unlockWeeklyTaskId = unlockWeeklyTask.id;
	  let weeklyTaskData = dailyTask.find(item => item.id === unlockWeeklyTaskId);
	  let weeklyPrize = weeklyTaskData.prize * setting.weeklyTaskMultiplier;
	  let weeklyDesc = "";
	  let weeklyCountRequired = weeklyTaskData.required * setting.weeklyTaskMultiplier;
	  if(unlockWeeklyTaskId == 0){
		weeklyCountRequired = weeklyTaskData.required;
		weeklyDesc = weeklyTaskData.description.replace("daily","weekly")+ ' ' + numberFormat(weeklyTaskData.required) + ' ' + weeklyTaskData.unit;
	  }else weeklyDesc = weeklyTaskData.description + ' ' + numberFormat(weeklyCountRequired) + ' ' + weeklyTaskData.unit;
	  if(unlockWeeklyTask.count == null || unlockWeeklyTask.count == NaN) unlockWeeklyTask.count = 0;
	  
	  if( !$( "#weekly-task-area-" + unlockWeeklyTaskId ).length){
		let appendWeeklyTaskDiv = '<div id="weekly-task-area-' + unlockWeeklyTaskId + '" class="row border-top rounded-card">';
			appendWeeklyTaskDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-10 col-10 v-center">';
			appendWeeklyTaskDiv += '<span id="weekly-task-name-' + unlockWeeklyTaskId + '" class="strong">' + weeklyTaskData.name + ' ('+weeklyPrize+' Token)</span>';
			appendWeeklyTaskDiv += '</div>';
			appendWeeklyTaskDiv += '<div class="col-xl-1 col-lg-1 col-md-1 col-sm-2 col-2 right-align v-center">';
		if(unlockWeeklyTask.complete) appendWeeklyTaskDiv += '<span id="weekly-task-complete-' + unlockWeeklyTaskId + '"><img src="assets/images/complete.svg" height="20px"></img></span>';
		else appendWeeklyTaskDiv += '<span id="weekly-task-complete-' + unlockWeeklyTaskId + '" class="d-none"><img src="assets/images/complete.svg" height="20px"></img></span>';
			appendWeeklyTaskDiv += '</div>';
			appendWeeklyTaskDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 v-center">';
			appendWeeklyTaskDiv += '<span id="artifact-desc-' + unlockWeeklyTaskId + '">' + weeklyDesc +'</span>';
			appendWeeklyTaskDiv += '</div>';		  
			appendWeeklyTaskDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 v-center animate-bar no-padding">';
			appendWeeklyTaskDiv += '<div class="progress-bar-div">';
			appendWeeklyTaskDiv += '<span id="current-weekly-count-' + unlockWeeklyTaskId + '">' + numberFormat(unlockWeeklyTask.count) + '</span> / '+ numberFormat(weeklyCountRequired);
			appendWeeklyTaskDiv += '</div>';
			appendWeeklyTaskDiv += '<div id="weekly-task-bar-' + unlockWeeklyTaskId + '" class="progress-bar daily-task-progress-bar-color">&nbsp;</div>';
			appendWeeklyTaskDiv += '</div>';
			appendWeeklyTaskDiv += '</div>';

		$("#weekly-task-area-div").append(appendWeeklyTaskDiv);
	  }else{
		componentAction ("current-weekly-count-"+unlockWeeklyTaskId, "replaceText", unlockWeeklyTask.count);
		if(unlockWeeklyTask.complete) componentAction ("weekly-task-complete-"+unlockWeeklyTaskId, "removeClass", "d-none");
	  }
	  let newWeeklyTaskBar = unlockWeeklyTask.count / weeklyCountRequired * 100;
	  componentAction ("weekly-task-bar-"+unlockWeeklyTaskId, "animate", newWeeklyTaskBar);
	}
	if(!hero.token) hero.token = new Decimal(0);
	componentAction ("hero-token", "replaceText", numberFormat(hero.token));
	calcHeightScrollDiv("daily-task","weekly-task");
  };
  
  var showMonthlyTaskArea = function(){
	showTaskTab("monthly");
	
	for(let i=0; i<hero.monthlyTask.task.length; i++){
	  let unlockMonthlyTask = hero.monthlyTask.task[i];
	  let unlockMonthlyTaskId = unlockMonthlyTask.id;
	  let monthlyTaskData = dailyTask.find(item => item.id === unlockMonthlyTaskId);
	  let monthlyPrize = monthlyTaskData.prize * setting.monthlyTaskMultiplier;
	  let monthlyDesc = "";
	  let monthlyCountRequired = monthlyTaskData.required * setting.monthlyTaskMultiplier;;
	  if(unlockMonthlyTaskId == 0){
		monthlyCountRequired = monthlyTaskData.required;
		monthlyDesc = monthlyTaskData.description.replace("daily","monthly")+ ' ' + numberFormat(monthlyTaskData.required) + ' ' + monthlyTaskData.unit;
	  }else monthlyDesc = monthlyTaskData.description + ' ' + numberFormat(monthlyCountRequired) + ' ' + monthlyTaskData.unit;
	  if(unlockMonthlyTask.count == null || unlockMonthlyTask.count == NaN) unlockMonthlyTask.count = 0;
	  
	  if( !$( "#monthly-task-area-" + unlockMonthlyTaskId ).length){
		let appendMonthlyTaskDiv = '<div id="monthly-task-area-' + unlockMonthlyTaskId + '" class="row border-top rounded-card">';
			appendMonthlyTaskDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-10 col-10 v-center">';
			appendMonthlyTaskDiv += '<span id="monthly-task-name-' + unlockMonthlyTaskId + '" class="strong">' + monthlyTaskData.name + ' ('+monthlyPrize+' Token)</span>';
			appendMonthlyTaskDiv += '</div>';
			appendMonthlyTaskDiv += '<div class="col-xl-1 col-lg-1 col-md-1 col-sm-2 col-2 right-align v-center">';
		if(unlockMonthlyTask.complete) appendMonthlyTaskDiv += '<span id="monthly-task-complete-' + unlockMonthlyTaskId + '"><img src="assets/images/complete.svg" height="20px"></img></span>';
		else appendMonthlyTaskDiv += '<span id="monthly-task-complete-' + unlockMonthlyTaskId + '" class="d-none"><img src="assets/images/complete.svg" height="20px"></img></span>';
			appendMonthlyTaskDiv += '</div>';
			appendMonthlyTaskDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 v-center">';
			appendMonthlyTaskDiv += '<span id="artifact-desc-' + unlockMonthlyTaskId + '">' + monthlyDesc +'</span>';
			appendMonthlyTaskDiv += '</div>';		  
			appendMonthlyTaskDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 v-center animate-bar no-padding">';
			appendMonthlyTaskDiv += '<div class="progress-bar-div">';
			appendMonthlyTaskDiv += '<span id="current-monthly-count-' + unlockMonthlyTaskId + '">' + numberFormat(unlockMonthlyTask.count) + '</span> / '+ numberFormat(monthlyCountRequired);
			appendMonthlyTaskDiv += '</div>';
			appendMonthlyTaskDiv += '<div id="monthly-task-bar-' + unlockMonthlyTaskId + '" class="progress-bar daily-task-progress-bar-color">&nbsp;</div>';
			appendMonthlyTaskDiv += '</div>';
			appendMonthlyTaskDiv += '</div>';

		$("#monthly-task-area-div").append(appendMonthlyTaskDiv);
	  }else{
		componentAction ("current-monthly-count-"+unlockMonthlyTaskId, "replaceText", unlockMonthlyTask.count);
		if(unlockMonthlyTask.complete) componentAction ("monthly-task-complete-"+unlockMonthlyTaskId, "removeClass", "d-none");
	  }
	  let newMonthlyTaskBar = unlockMonthlyTask.count / monthlyCountRequired * 100;
	  componentAction ("monthly-task-bar-"+unlockMonthlyTaskId, "animate", newMonthlyTaskBar);
	}
	if(!hero.token) hero.token = new Decimal(0);
	componentAction ("hero-token", "replaceText", numberFormat(hero.token));
	calcHeightScrollDiv("daily-task","monthly-task");
  };
  
  var showGodsArea = function(selectedGodsId=null,clearDiv=false){
	showGodsTab("gods");
	if(clearDiv) componentAction("gods-area-div","clearText","");
	if(hero.highestFloor >= unlockNewFeatureFloor("gods")){
	  if(hero.unlockFragment.length > 0){
		$("#god-unlock-div").remove();
	    let tempUnlockFragment = [];
	    if(hero.unlockGods.length > 0){
	      hero.unlockGods.sort((a, b) => (a.isActive < b.isActive) ? 1 : (a.isActive === b.isActive) ? ((a.id > b.id) ? 1 : -1) : -1 );
	      for(let i=0;i<hero.unlockGods.length;i++){
		    tempUnlockFragment.push(hero.unlockGods[i].id);
	      }
	    }
		if(hero.unlockFragment.length > 0){
		  hero.unlockFragment.sort((a, b) => (a.id > b.id) ? 1 : -1);
		  for(let i=0;i<hero.unlockFragment.length;i++){
		    let indexId = tempUnlockFragment.indexOf(hero.unlockFragment[i].id);
		    if (indexId === -1){
			  tempUnlockFragment.push(hero.unlockFragment[i].id);
		    }
		  }
		}
	
	    for(let i=0; i<tempUnlockFragment.length; i++){
	      let fragmentId = tempUnlockFragment[i];
	      let godsData = gods.find(item => item.id === fragmentId);
		  let unlockFragment = hero.unlockFragment.find(item => item.id === fragmentId);
		  let unlockGods = hero.unlockGods.find(item => item.id === fragmentId);
		  let godsLevel = 0;
		  let godsImage = "";
		  let godsDesc = godsData.desc;
		  let godsDamage = 0;
		  let awakeningDamage = 0;
		  let disableButton = "";
		  let textActivateGods = "";
		  let styleActivateButton = "d-none";
		  let godsActiveStyle = '';
		  let godsMaxLevel = godsData.maxLevel;
		  let upgradeClass = "skill-active";
		  let activateClass = "skill-active";

		  if(godsData.gender == "M") godsImage = "gods";
		  else godsImage = "goddess";
	  
	      if(unlockGods){
		    godsLevel = unlockGods.level;
		    godsImage += "-color";
			
			if(godsData.awakeningMultiplier > 0){
			  if(unlockGods.level % godsData.maxLevel == 0) godsDamage = godsData.maxLevel * godsData.levelMultiplier;
		      else godsDamage = (unlockGods.level % godsData.maxLevel) * godsData.levelMultiplier;
			}else godsDamage = unlockGods.damage;
			awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
		    if(unlockGods.isActive){
		      textActivateGods = "Deactivate";
		      godsActiveStyle = "active-bg-color";
		    }else{
			  textActivateGods = "Activate";
			  let activeGodsCount = checkActiveGods();
			  if(activeGodsCount == hero.activeGodsSlot && godsLevel > 0) activateClass = "skill-disabled";
			}
		    styleActivateButton = "";
			godsMaxLevel = unlockGods.awakeningLevel * godsData.maxLevel;
	      }
		  
		  if(godsData.awakeningMultiplier > 0){
		    if(!unlockGods){ godsDesc = godsDesc.replace("x%",godsDamage+"(+"+godsData.levelMultiplier+")%").replace("z",awakeningDamage+"(+"+godsData.awakeningMultiplier+")");}
			else if(unlockGods.level < godsMaxLevel){godsDesc = godsDesc.replace("x%",godsDamage+"(+"+godsData.levelMultiplier+")%").replace("z",awakeningDamage);}
		    else godsDesc = godsDesc.replace("x%",godsDamage+"(-"+(godsDamage-godsData.levelMultiplier)+")%").replace("z",awakeningDamage+"(+"+godsData.awakeningMultiplier+")");
		  }else{
			godsDesc = godsDesc.replace("x%",godsDamage+"(+"+godsData.levelMultiplier+")%");
		  }
		  let targetFragment = Math.ceil((godsLevel+1)/5)*10;
		  let buttonText = "";
		  if(godsLevel == 0) buttonText = "Summon Gods";
		  else buttonText = "Upgrade Lv "+(godsLevel+1);
		  if(unlockFragment.count < targetFragment){
			disableButton = "disabled";
			upgradeClass = "skill-disabled";
		  }
		  if(godsLevel >= godsMaxLevel){
			if(unlockGods.awakeningLevel < godsData.maxReincarnateLevel){
			  buttonText = "Reincarnate";
			  targetFragment = setting.baseReincarnateFragment * unlockGods.awakeningLevel;
			}else{
			  buttonText = "Maxed";
			  disableButton = "disabled";
			  upgradeClass = "cursor-default";
			}
		  }

		  if( !$( "#gods-area-" + unlockFragment.id ).length){
		    let appendGodsDiv = '<div id="gods-area-' + unlockFragment.id + '" class="row border-top rounded-card no-gutters mx-1 ' + godsActiveStyle + '">';
			    appendGodsDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 middle-align '+godsImage+'">';
				appendGodsDiv += '<img id="gods-image-' + unlockFragment.id + '" src="assets/images/'+godsImage+'.svg" class="'+godsImage+' invisible"></img>';
				appendGodsDiv += '</div>';
				appendGodsDiv += '<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8">';
				appendGodsDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
				appendGodsDiv += godsData.name + ' Lv <span id="gods-level-' + unlockFragment.id + '">' + godsLevel + '</span> / <span id="gods-max-level-' + unlockFragment.id + '">' + godsMaxLevel + '</span>';
				appendGodsDiv += '</div>';
				appendGodsDiv += '<div id="gods-desc-' + unlockFragment.id + '" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">'+godsDesc+'</div>';
				appendGodsDiv += '</div>';
				appendGodsDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 animate-bar no-padding mt-1">';
				appendGodsDiv += '<div class="progress-bar-div">';
				appendGodsDiv += '<span id="gods-count-' + unlockFragment.id + '">' + numberFormat(unlockFragment.count) + '</span> / <span id="gods-target-' + unlockFragment.id + '">'+ numberFormat(targetFragment)+ '</span>';
				appendGodsDiv += '</div>';
				appendGodsDiv += '<div id="gods-bar-' + unlockFragment.id + '" class="progress-bar gods-progress-bar-color">&nbsp;</div>';
				appendGodsDiv += '</div>';
				appendGodsDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 pr-05">';
				appendGodsDiv += '<button id="summon-gods-button-' + unlockFragment.id + '" class="upgrade-level-button mt-1 '+upgradeClass+'" value="' + unlockFragment.id + '"' + disableButton + '><span id="summon-gods-text-' + unlockFragment.id + '">' + buttonText + '</span></button>';
				appendGodsDiv += '</div>';
				appendGodsDiv += '</div>';

		    $("#gods-area-div").append(appendGodsDiv).off('click','#summon-gods-button-'+unlockFragment.id).on('click','#summon-gods-button-'+unlockFragment.id,function(){
		      summonGods(this); 
		    });	

		    appendGodsDiv = '<div id="activate-gods-div-'+unlockFragment.id+'" class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 pl-05 ' + styleActivateButton + '">';
		    appendGodsDiv += '<button id="activate-gods-button-' + unlockFragment.id + '" class="upgrade-level-button mt-1 '+activateClass+'" value="' + unlockFragment.id + '"><span id ="activate-text-' + unlockFragment.id + '">' + textActivateGods + '</span></button>';
		    appendGodsDiv += '</div>';
		  
		    $("#gods-area-"+unlockFragment.id).append(appendGodsDiv).off('click','#activate-gods-button-'+unlockFragment.id).on('click','#activate-gods-button-'+unlockFragment.id,function(){
			  activateGods(this); 
		    });
	      }else{
		    $("#gods-image-"+unlockFragment.id).attr("src", "assets/images/"+godsImage+".svg");
			if(godsActiveStyle == ""){
			  componentAction ("gods-area-"+unlockFragment.id, "updateClass", "active-bg-color,unactive-bg-color");
			}else componentAction ("gods-area-"+unlockFragment.id, "updateClass", "unactive-bg-color,active-bg-color");
			
		    componentAction ("gods-level-"+unlockFragment.id, "replaceText", godsLevel);
			componentAction ("gods-max-level-"+unlockFragment.id, "replaceText", godsMaxLevel);
		    componentAction ("gods-target-"+unlockFragment.id, "replaceText", targetFragment);
			componentAction ("gods-count-"+unlockFragment.id, "replaceText", unlockFragment.count);
			componentAction ("gods-desc-"+unlockFragment.id, "replaceText", godsDesc);
			if(unlockFragment.count < targetFragment) $("#summon-gods-button-"+unlockFragment.id).prop('disabled', true);
			else $("#summon-gods-button-"+unlockFragment.id).prop('disabled', false);
			
		    if(styleActivateButton=="")componentAction ("activate-gods-div-"+unlockFragment.id, "removeClass", "d-none");
			if(unlockGods){
			  if(unlockGods.level < godsMaxLevel)componentAction ("summon-gods-text-"+unlockFragment.id, "replaceText", "Upgrade Lv "+(unlockGods.level+1));
			  else{
				if(unlockGods.awakeningLevel < godsData.maxReincarnateLevel){
				  componentAction ("summon-gods-text-"+unlockFragment.id, "replaceText", "Reincarnate");
				}else{
			      componentAction ("summon-gods-text-"+unlockFragment.id, "replaceText", "Maxed");
			      $("#summon-gods-button-"+unlockFragment.id).prop('disabled', true);
				}
			  }
			  componentAction("activate-gods-button-"+unlockFragment.id,"replaceText",textActivateGods);
			  if(activateClass == "skill-active") componentAction("activate-gods-button-"+unlockFragment.id,"updateClass","skill-disabled,skill-active");
			  else componentAction("activate-gods-button-"+unlockFragment.id,"updateClass","skill-active,skill-disabled");
		    }
	      }
		  let newFragmentBar = unlockFragment.count / targetFragment * 100;
		  if(newFragmentBar > 100) newFragmentBar = 100;
		  componentAction ("gods-bar-"+unlockFragment.id, "animate", newFragmentBar);
	    }
	  }else{
		if( !$( "#god-unlock-div").length){
	      let appendGodsDiv = '<div id="god-unlock-div" class="rounded-card unlock-info middle-align">Exchange Gods Fragment First at the Temple</div>';
	      $("#gods-area-div").append(appendGodsDiv);
	    }  
	  }
	}else{
	  if( !$( "#god-unlock-div").length){
	    let appendGodsDiv = '<div id="god-unlock-div" class="rounded-card unlock-info middle-align">Unlock this gods at stage ' + unlockNewFeatureFloor("gods") + ' </div>';
	    $("#gods-area-div").append(appendGodsDiv);
	  }
	}
	/*if(selectedGodsId != null){
	  var elem = document.getElementById("summon-gods-button-"+selectedGodsId);
	  if(!isInViewport(elem, "gods")){
	    $("#gods-area-"+selectedGodsId)[0].scrollIntoView({
          behavior: "instant", /* or "smooth" or "auto" */
          /*block: "start" /* or "end" */
	    /*});
	  }
	}*/
	calcHeightScrollDiv("gods");
  };
  
  var showTempleArea = function(){
	showGodsTab("temple");
	
	if(hero.highestFloor >= unlockNewFeatureFloor("gods")){
	  insertAvailableGods();
      let disableButton = '';
      let buttonText = 'Exchange Gods Fragment';
      if(hero.soul < setting.soulEachFragment) disableButton = 'disabled';
	  let dropDownList = ["All=All Soul","1="+(setting.soulEachFragment*1)+" Soul"];
	
	  if(!$( "#temple-area" ).length){
	    let appendTempleDiv = '<div id="temple-area" class="row border-top rounded-card no-gutters mx-1">';
		    appendTempleDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 middle-align">';
		    appendTempleDiv += '<img src="assets/images/temple.svg" class="medium-img"></img>';
		    appendTempleDiv += '</div>';
			appendTempleDiv += '<div id="temple-info" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 py-1 unlock-info">';
			appendTempleDiv += 'You will get 1 soul for each monster / boss that you defeated';
			appendTempleDiv += '</div>';
			appendTempleDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 animate-bar no-padding">';
		    appendTempleDiv += '<div class="progress-bar-div">';
		    appendTempleDiv += '<span id="soul-count">' + numberFormat(hero.soul) + '</span> / <span id="soul-target">'+ numberFormat(setting.soulEachFragment)+ '</span>';
		    appendTempleDiv += '</div>';
		    appendTempleDiv += '<div id="soul-bar" class="progress-bar soul-progress-bar-color">&nbsp;</div>';
			appendTempleDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 mt-2">';
		    appendTempleDiv += createDropDownList(dropDownList,'fragment-count');
			appendTempleDiv += '</div>';
		    appendTempleDiv += '<button id="soul-button" class="upgrade-level-button mt-2"' + disableButton + '><span id="soul-trade">' + buttonText + '</span></button>';
		    appendTempleDiv += '</div>';
		    appendTempleDiv += '</div>';
	    $("#temple-area-div").append(appendTempleDiv).off('click','#soul-button').on('click','#soul-button',function(){
	      confirmTradeGodsFragment($("#fragment-count").val()); 
	    });
	  }else{
	    componentAction ("soul-count", "replaceText", numberFormat(hero.soul));
	    if(hero.soul >= setting.soulEachFragment) $("#soul-button").prop('disabled', false);
	    else $("#soul-button").prop('disabled', true);
	  }
	  let newSoulBar = hero.soul / setting.soulEachFragment * 100;
	  if(newSoulBar > 100) newSoulBar = 100;
	  componentAction ("soul-bar", "animate", newSoulBar);
	}else{
	  if( !$( "#temple-unlock-div").length){
	    let appendTempleDiv = '<div id="temple-unlock-div" class="rounded-card unlock-info middle-align">Unlock this temple at stage ' + unlockNewFeatureFloor("gods") + ' </div>';
	    $("#temple-area-div").append(appendTempleDiv);
	  }
	}
	calcHeightScrollDiv("gods");
  };
  
  var insertAchievement = function(){
	if(hero.achievement.length == 0){
	  for(let i=0;i<achievement.length;i++){
	    let newObjectAchievement = {
		  id: achievement[i].id,
		  level: 0,
		  prevTarget: 0,
		  target: achievement[i].baseTarget,
		  balance: 0
	    };
	    hero.achievement.push(newObjectAchievement);
	  }
	}
  };
  
  var insertTask = function(){
	let isInsertNewDailyTask = false;
	let isInsertNewWeeklyTask = false;
	let isInsertNewMonthlyTask = false;
	let date = new Date();

	let currentDailyTaskDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	if(!hero.dailyTask || hero.dailyTask.length == 0) isInsertNewDailyTask = true;
	else{
	  if(hero.dailyTask.date >= 0){
	    let msPerDay = 1000 * 60 * 60 * 24;
		let dateDiff = Math.floor((currentDailyTaskDate -  hero.dailyTask.date) / msPerDay);
		if(dateDiff > 0)isInsertNewDailyTask = true;
	  }
	}

	let currentWeekDay = date.getDay(); /* 1 = Monday */
	let startWeek = date.setDate(date.getDate() - currentWeekDay + 1);
	let startWeekPeriod = Date.UTC(new Date(startWeek).getFullYear(), new Date(startWeek).getMonth(), new Date(startWeek).getDate());
	let endWeek = date.setDate(date.getDate() + 6);
	let endWeekPeriod = Date.UTC(new Date(endWeek).getFullYear(), new Date(endWeek).getMonth(), new Date(endWeek).getDate());
	
	if(!hero.weeklyTask || hero.weeklyTask.length == 0) isInsertNewWeeklyTask = true;
	else{
	  if(hero.weeklyTask.startPeriod > 0 && hero.weeklyTask.endPeriod > 0){
		if(startWeekPeriod != hero.weeklyTask.startPeriod && endWeekPeriod != hero.weeklyTask.endPeriod) isInsertNewWeeklyTask = true;
	  }
	}

	let currentMonth = "0"+(date.getMonth()+1)+""+date.getFullYear();
	currentMonth = currentMonth.slice(-6);
	if(!hero.monthlyTask || hero.monthlyTask.length == 0) isInsertNewMonthlyTask = true;
	else{
	  if(currentMonth.localeCompare(hero.monthlyTask.monthPeriod) != 0) isInsertNewMonthlyTask = true;
	}
	
	if(isInsertNewDailyTask || isInsertNewWeeklyTask || isInsertNewMonthlyTask){
	  let heroDailyTask = [];
	  let heroWeeklyTask = [];
	  let heroMonthlyTask = [];
	  let availableDailyTask = [];
	  let availableTask = [];
	  let addDailyTask = true;
	
	  for(let i=1;i<dailyTask.length;i++){
		addDailyTask = true;
		switch(dailyTask[i].id){
		  case 12:
		  case 18:
		  case 19:
		    if(hero.unlockPet.length == 0) addDailyTask = false;
		    break;
		  case 13:
		  case 14:
		  case 15:
		  case 16:
		  case 17:
		    let zoneId = dailyTask[i].id - 13;
		    let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
			if(!unlockZone) addDailyTask = false;
		    break;
		  case 20:
		  case 21:
		    if(hero.highestFloor < unlockNewFeatureFloor("barracks")) addDailyTask = false;
			break;
		  case 22:
		  case 23:
		  case 24:
		    if(hero.highestFloor < unlockNewFeatureFloor("gods")) addDailyTask = false;
			break;
		  case 25:
		  case 26:
		    if(hero.highestFloor < unlockNewFeatureFloor("barracks")) addDailyTask = false;
			break;
		  case 27:
		    if(hero.highestFloor < unlockNewFeatureFloor("tower")) addDailyTask = false;
			break;
		  case 28:
		    if(hero.highestFloor < unlockNewFeatureFloor("labor")) addDailyTask = false;
			break;
		}
		if(addDailyTask) availableDailyTask.push(dailyTask[i].id);
	  }
	  if(isInsertNewDailyTask || isInsertNewWeeklyTask || isInsertNewMonthlyTask){
		showNotifIcon("gameplay-div");
		showNotifIcon("daily-task");  
	  }
	  if(isInsertNewDailyTask){
		hero.dailyTask = [];
		if( $( "#daily-task-area-div" ).length) $("#daily-task-area-div").empty();
		availableTask = availableDailyTask.map((x) => x);
	    for(let i=0;i<setting.dailyTaskCount;i++){	
	      let unlockDailyTaskId = availableTask[Math.floor(Math.random() * availableTask.length)];
	      let unlockIndex = availableTask.indexOf(unlockDailyTaskId);
	      if (unlockIndex !== -1){
		    availableTask.splice(unlockIndex, 1);
		    let newObjectDailyTask = {
	          id: unlockDailyTaskId,
	          count: 0,
	          complete : false,
	        };
	        heroDailyTask.push(newObjectDailyTask);
	      }
	    }
	  
	    let newObjectDailyTask = {
	      id: 0,
	      count: 0,
	      complete : false,
	    };
	    heroDailyTask.push(newObjectDailyTask);
	  
	    hero.dailyTask = {
	      date: currentDailyTaskDate,
	      task: heroDailyTask,
	    };
		showNotifIcon("daily-tab-button");
	  }
	  
	  if(isInsertNewWeeklyTask){
		hero.weeklyTask = [];
		if( $( "#weekly-task-area-div" ).length) $("#weekly-task-area-div").empty();
		availableTask = availableDailyTask.map((x) => x);
		for(let i=0;i<setting.weeklyTaskCount;i++){	
	      let unlockWeeklyTaskId = availableTask[Math.floor(Math.random() * availableTask.length)];
	      let unlockIndex = availableTask.indexOf(unlockWeeklyTaskId);
	      if (unlockIndex !== -1){
		    availableTask.splice(unlockIndex, 1);
		    let newObjectWeeklyTask = {
	          id: unlockWeeklyTaskId,
	          count: 0,
	          complete : false,
	        };
	        heroWeeklyTask.push(newObjectWeeklyTask);
	      }
	    }
		let newObjectWeeklyTask = {
	      id: 0,
	      count: 0,
	      complete : false,
	    };
	    heroWeeklyTask.push(newObjectWeeklyTask);
		hero.weeklyTask = {
	      startPeriod: startWeekPeriod,
		  endPeriod: endWeekPeriod,
	      task: heroWeeklyTask,
	    };
		showNotifIcon("weekly-tab-button");
	  }
	  if(isInsertNewMonthlyTask){
		hero.monthlyTask = [];
		if( $( "#monthly-task-area-div" ).length) $("#monthly-task-area-div").empty();
		availableTask = availableDailyTask.map((x) => x);
		for(let i=0;i<setting.monthlyTaskCount;i++){	
	      let unlockMonthlyTaskId = availableTask[Math.floor(Math.random() * availableTask.length)];
	      let unlockIndex = availableTask.indexOf(unlockMonthlyTaskId);
	      if (unlockIndex !== -1){
		    availableTask.splice(unlockIndex, 1);
		    let newObjectMonthlyTask = {
	          id: unlockMonthlyTaskId,
	          count: 0,
	          complete : false,
	        };
	        heroMonthlyTask.push(newObjectMonthlyTask);
	      }
	    }
		let newObjectMonthlyTask = {
	      id: 0,
	      count: 0,
	      complete : false,
	    };
	    heroMonthlyTask.push(newObjectMonthlyTask);
		hero.monthlyTask = {
	      monthPeriod: currentMonth,		  
	      task: heroMonthlyTask,
	    };
		showNotifIcon("monthly-tab-button");
	  }
	  updateTask(1);
	}
  };
  
  var calcMaxDailyLimitBuyTowerKey = function(){
	return ((hero.checkInLevel + 1) * setting.baseDailyLimitBuyTowerKey);
  };
  
  var calculateTokenTowerKey = function(totalTowerKey=1,updateValue=false){
	totalTowerKey = parseInt(totalTowerKey,10);
	
	let totalToken = new Decimal(totalTowerKey).mul(setting.baseTokenBuyTowerKey);
	let heroToken = new Decimal(hero.token);
	
	if(totalToken.greaterThan(heroToken)){
	  let maxTowerKey = heroToken.div(setting.baseTokenBuyTowerKey).floor();
	  totalToken = maxTowerKey.mul(setting.baseTokenBuyTowerKey);
	  if(updateValue) componentAction("buy-tower-key","inputText",maxTowerKey);
	}else if(updateValue) componentAction("buy-tower-key","inputText",totalTowerKey);
	
	componentAction("token-buy-tower-key","replaceText",totalToken);
	
	return totalToken;
  };
  
  var chooseBuyTowerKey = function(towerId){
	let towerData = tower.find(item => item.id === towerId);
	if(towerData) componentAction("tower-name-buy-key","replaceText",towerData.name);
	componentAction("current-daily-limit-buy-tower-key","replaceText",hero.dailyBuyTowerKey);
	componentAction("max-daily-limit-buy-tower-key","replaceText",numberFormat(calcMaxDailyLimitBuyTowerKey()));
	calculateTokenTowerKey(1,true);
	
	/*if(calcMaxDailyLimitBuyTowerKey() > hero.dailyBuyTowerKey){
	  componentAction("token-buy-tower-key","replaceText",numberFormat(calculateTokenTowerKey(1)));
	  componentAction("buy-tower-key","inputText",1);
	}else{
	  componentAction("token-buy-tower-key","replaceText",numberFormat(calculateTokenTowerKey(0)));
	  componentAction("buy-tower-key","inputText",0);
	}*/
	buyTowerKeyId = towerId;
	$('#modalBuyTowerKey').modal("show");
  };
  
  var confirmBuyTowerKey = function(towerKey){
	towerKey = parseInt(towerKey,10);
	if(towerKey > 0){
	  let totalToken = new Decimal(calculateTokenTowerKey(towerKey));
	  let heroToken = new Decimal(hero.token);
	  $('#modalBuyTowerKey').modal('hide');
	  if(heroToken.greaterThanOrEqualTo(totalToken)){
	    let towerData = tower.find(item => item.id === buyTowerKeyId);
	    let keyUnit = "key";
	    if(towerKey > 1) keyUnit = "keys";
	    componentAction("confirm-buy-tower-key-desc","replaceText","Are you sure want to spend "+numberFormat(totalToken)+" token to buy "+numberFormat(towerKey)+" "+keyUnit+" of "+towerData.name+" ?");
	    componentAction("confirm-buy-tower-key-ok-button","inputText",towerKey);
	    $('#modalConfirmBuyTowerKey').modal('show');
	  }else{
	    componentAction("notification-text","replaceText","You don't have enough token to spend");
	    componentAction("notification-ok-button","inputText","btk="+towerKey);
	    $('#modalNotification').modal('show');
	  }
	}else{
	  $('#modalBuyTowerKey').modal('hide');
	  componentAction("notification-text","replaceText","You must buy at least 1 tower key");
	  componentAction("notification-ok-button","inputText","btk="+towerKey);
	  $('#modalNotification').modal('show');
	}
  };
  
  var buyTowerKey = function(towerKey,prevModal){
	towerKey = parseInt(towerKey,10);
	if(towerKey > 0){
	  let totalToken = new Decimal(calculateTokenTowerKey(towerKey));
	  let heroToken = new Decimal(hero.token);
	  $('#modalBuyTowerKey').modal('hide');
	  if(heroToken.greaterThanOrEqualTo(totalToken)){
	    let unlockTower = hero.unlockTower.find(item => item.id === buyTowerKeyId);
	    if(unlockTower){
		  unlockTower.availableKey += (towerKey*1);
		  hero.token = heroToken.sub(totalToken);
		  hero.dailyBuyTowerKey += (towerKey*1);
		  saveGame();
		  showTowerArea();
	    }
	  }else{
	    $('#modalBuyTowerKey').modal('hide');
	    componentAction("notification-text","replaceText","You don't have enough token to spend");
	    componentAction("notification-ok-button","inputText","btk="+towerKey);
	    $('#modalNotification').modal('show');
	  }
	}else{
	  $('#modalBuyTowerKey').modal('hide');
	  componentAction("notification-text","replaceText","You must buy at least 1 tower key");
	  componentAction("notification-ok-button","inputText","btk="+towerKey);
	  $('#modalNotification').modal('show');
	}
  };
  
  var addTowerKey = function(){
	let date = new Date();
	let currentTowerDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	let newTowerKey = false;
	
	for(let i=0;i<tower.length;i++){
	  let unlockTower = hero.unlockTower.find(item => item.id === i);
	  if(unlockTower){
		let msPerDay = 1000 * 60 * 60 * 24;
		let dateDiff = Math.floor((currentTowerDate -  unlockTower.date) / msPerDay);
		if(dateDiff > 0){
		  unlockTower.availableKey = setting.availableKeyEachTower;
		  unlockTower.date = currentTowerDate;
		  newTowerKey = true;
		  hero.dailyBuyTowerKey = 0;
		}else i=tower.length;
	  }else unlockNewTower(); 
	}
	if(newTowerKey){
	  showNotifIcon("tower");
	}
  };
  
  var unlockNewPet = function(petId=-1){
	if(petId == -1){
      for(let i=0;i<pet.length;i++){
		let unlockPet = hero.unlockPet.find(item => item.id === i);
		if(hero.highestFloor >= pet[i].unlockReqFloor && !unlockPet){
		  petId = i;
		  i = pet.length;
		}
	  }
	}	
	if(petId >= 0){
	  let unlockPet = hero.unlockPet.find(item => item.id === petId);
	  if(!unlockPet){
	    let petData = pet.find(item => item.id === petId);
	    let canUnlockNewPet = false;
		
	    switch(petId){
		  case 1:
		    if(hero.highestWeaponLevel > 0 && hero.highestFloor >= petData.unlockReqFloor) canUnlockNewPet = true;
		    break;
		  case 2:
		    if(hero.highestFloor >= petData.unlockReqFloor) canUnlockNewPet = true;
		    break;  
		  default:
		    if(petId >= 3){
			  let partnerId = petId - 3;
			  let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
			
			  if(unlockPartner && hero.highestFloor >= petData.unlockReqFloor) canUnlockNewPet = true;
		    }else canUnlockNewPet = true;
		    break;
	    }
	    
	    if(canUnlockNewPet && !unlockPet){
		  if(hero.countPet == 0) unlockNewFeatures("pet");
		    hero.countPet++;
		    let newObjPet = {
		    id: petId,
		    level: 1,
		    currExp: 0,
		    currBonus: petData.multiplierBonus,
		    adventureZone: -1,
		    adventureSlot: -1,
		    statusAdventure: '',
		    collectReward: ''
		  };
		  hero.unlockPet.push(newObjPet);
		  componentAction("pet-area-div","clearText","");
		  if(!$("#pet-div").hasClass("d-none"))showPetArea();
	    }
	    if(hero.countPet == 1) unlockNewAdventureArea();
	  }
	}
  };
  
  var unlockNewAdventureArea = function(zoneId=-1){
	if(zoneId == -1){
      for(let i=hero.countZone;i<zone.length;i++){
		let zoneData = zone.find(item => item.id === i);
		if(i == 0){
		  zoneId = i;
		}else{
		  let prevZoneId = i - 1;
		  let prevZone = hero.unlockZone.find(item => item.id === prevZoneId);
		  if(prevZone.level >= zoneData.unlockReqLevel) zoneId = i;	  
		}
		i = zone.length;
	  }
	}
	if(zoneId >= 0){
	  let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	  let zoneData = zone.find(item => item.id === zoneId);
	  if(!unlockZone) insertNewUnlockZone(zoneId,zoneData);
	}
  };
  
  var unlockNewDwellers = function(newDwellers=1,abilityName="",isDefault=false,updateGame=false){
	let name = '';
	let dwellersAbility = [];
	let unlockDwellersCount = hero.unlockDwellers.filter(item => item.currentAbility === abilityName && item.isDefault === true);
	if (unlockDwellersCount < newDwellers) newDwellers -= unlockDwellersCount;
	else newDwellers = 0;
	for(let i=0;i<newDwellers;i++){
	  let duplicateName = true;
	  while(duplicateName){
	    let random = Math.random() * 100;
	    if(random <= 50) name = dwellers.male[Math.floor(Math.random() * dwellers.male.length)];
	    else name = dwellers.female[Math.floor(Math.random() * dwellers.female.length)];
	  
	    let unlockDwellers = hero.unlockDwellers.find(item => item.name === name);
		if(!unlockDwellers) duplicateName = false;
	  }
	  if(abilityName!=""){
		switch(abilityName.toLowerCase()){
		  case 'soldier':
		    dwellersAbility = {
			  name: abilityName,
			  level: 1,
			  exp: 0,
			  maxExp: 10,
			  hp: 50,
			  atk: 1,
			  def: 1,
			  agi: 1,
			  dex: 1,
			  critDam: 1,
			  critDef: 1,
			  critChance: 1,
			  statPoint: 5,
			};
			break;
		  default:
		    dwellersAbility = {
			  id: 0,
			  name: abilityName,
			  level: 1,
			  exp: 0,
			  maxExp: 1,
			};
			break;
		};
	  }
	  let statusTime = 0;
	  let dwellersStatus = "idle";
	  switch(abilityName.toLowerCase()){
	    case 'trainer':
		  if(hero.trainingZone){
		    let trainingSlot = hero.trainingZone.trainingSlot.find(item => item.slotId === i);
		    if(trainingSlot){
			  statusTime = trainingSlot.startTraining;
			  dwellersStatus = "working";
		    }
		  }
		  break;
	    case 'warlords':
		  if(i <= hero.filledCompanionSlot){
		    statusTime = hero.startGenerateCompanion;
		    dwellersStatus = "working";
		  }
		  break;
	    case 'handler':
		  /*pet*/
		  break;
	    case 'cleric':
		  let activeGodsCount = checkActiveGods();
		  let slotId = activeGodsCount - 1;
		  if(slotId >= 0 && slotId == i){
		    statusTime = Date.now();
		    dwellersStatus = "working";
	 	  }
		  break;
	    case 'banker':
		  statusTime = Date.now();
		  dwellersStatus = "working";
		  break;
	    case 'treasure hunter':
		  statusTime = Date.now();
		  dwellersStatus = "working";
		  break;
	    case 'collector':
		  if(i <= hero.filledEquipmentSlot){
		    statusTime = Date.now();
		    dwellersStatus = "working";
		  }
		  break;
	  };
	  let newObjDwellers = {
		id: hero.countDwellers,
		name: name,
		grade: 1,
		level: 1,
		isDefault: isDefault,
		status: dwellersStatus,
		currentAbility: abilityName,
		slotId: i,
		lastChangeAbility: 0,
		statusTime: statusTime,
		ability: [],
	  };
	  newObjDwellers.ability.push(dwellersAbility);
	  hero.unlockDwellers.push(newObjDwellers);
	  hero.countDwellers += 1;
	  newDwellersRole = true;
	}
  };
  
  var updateDwellersStatus = function(abilityName, slotId, actionType){
	let unlockDwellers = hero.unlockDwellers.find(item => item.currentAbility === abilityName && item.slotId === slotId);
	if(unlockDwellers){
	  switch(actionType){
		case "start":
		  unlockDwellers.status = "working";
		  unlockDwellers.statusTime = Date.now();
		  break;
		case "complete":
		  unlockDwellers.status = "idle";
		  unlockDwellers.statusTime = 0;
		  break;
	  }
	}
  };
  
  var unlockNewTower = function(){
	let towerData = tower.filter(item => item.unlockReqFloor <= hero.highestFloor && item.unlockReqFloor > 0);
	for(let i=0;i<towerData.length;i++){
	  let unlockTower = hero.unlockTower.find(item => item.id === towerData[i].id);
	  if(!unlockTower){
		let date = new Date();
		let currentTowerDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
		
		let newObjTower = {
		  id: towerData[i].id,
		  date: currentTowerDate,
		  currentFloor: 0,
		  availableKey: setting.availableKeyEachTower,
	    };
		hero.unlockTower.push(newObjTower);
		if(i==0){
		  let notifText = "Congratz you just unlock your first tower. Do you want to see your tower?";
		  $("#modalNotifNewFeatures").modal("show");
	      componentAction ("notif-features-ok-button", "inputText", "tower");
	      componentAction ("notif-new-feature", "replaceText", notifText, true);
		}
	  }
	}
  };
  
  var checkUnlockNewFeature = function(){
	let nextFeatureData = unlockNewFeature.filter(item => item.unlockReqFloor > hero.highestFloor);
	if(nextFeatureData.length > 0){
	  if(nextUnlockFeature != "" && nextUnlockFeature != nextFeatureData[0].name) componentAction(nextUnlockFeature,"removeClass","lock-icon");	
	  nextUnlockFeature = nextFeatureData[0].name;
	  componentAction(nextFeatureData[0].name	,"addClass","lock-icon");
	  let similarNextUnlockFeature = unlockNewFeature.filter(item => item.unlockReqFloor == nextFeatureData[0].unlockReqFloor && item.name !== nextFeatureData[0].name);
	  for(let i=0;i<similarNextUnlockFeature.length;i++){
	    if(nextUnlockFeature != "") nextUnlockFeature += ",";
		nextUnlockFeature += similarNextUnlockFeature[i].name;
	    componentAction(similarNextUnlockFeature[i].name,"addClass","lock-icon");
	  }
	}
  };
  
  var unlockNewFeatureFloor = function(featureName, detailName=""){
	if(featureName != undefined){
	  switch(featureName){
	    case "skill":
		  if(detailName == "" || detailName == "All Skill")return skill[0].unlockReqFloor;
		  else{
			let skillData = skill.find(item => item.name === detailName);
			return skillData.unlockReqFloor;
		  }
		  break;
	    default:
	      let unlockNewFeatureData = unlockNewFeature.find(item => item.name === featureName);
		  return (unlockNewFeatureData.unlockReqFloor*1);
		  break;
	  };
	}else return 0;
  };
  
  var unlockNewFeatures = function(featureName="",selectedFloor=-1){
	let newFeature = "";
	let notifText = "";
	let newDwellers = 0;
	let abilityDwellersName = '';
	if(featureName != ""){
	  switch(featureName){
		case "pet":
		  newFeature = "pet";
		  newDwellers = 1;
		  abilityDwellersName = 'handler';
		  notifText = "Congratz you just unlock your first pet. Do you want to see your pet?";
		  break;
	  };
	}else{
	  if(hero.highestFloor == unlockNewFeatureFloor("tower")) unlockNewTower();
	  let unlockDwellers;
	  let currentFloor = 0;
	  if(selectedFloor == -1) currentFloor = hero.highestFloor;
	  else currentFloor = selectedFloor * 1;
	  
	  switch(currentFloor){
		case unlockNewFeatureFloor("labor"):
		  if(hero.countLabor == 0){
		    insertNewUnlockLabor();
			showNotifIcon("labor-tab-button");
		  }
		  break;
		case unlockNewFeatureFloor("barracks"):
		  unlockDwellers = hero.unlockDwellers.filter(item => item.currentAbility === "trainer");
	      if(hero.activeTrainingSlot == 0 || unlockDwellers.length == 0){
			newDwellers = 1;
			abilityDwellersName = 'trainer';
		    newFeature = "barracks";
		    hero.activeTrainingSlot = 1;
			hero.trainingZone = {
		      level: 1,
		      reqMaterial: [],
			  buildingTime: 0,
			  maxSlot: 1,
			  trainingSlot: [],
		    };
			for(let i=0;i<hero.highestUnlockPartner.length;i++){
			  let highestUnlockPartner = hero.highestUnlockPartner[i];
			  let partnerId = highestUnlockPartner.id;
			  let partnerData = partner.find(item => item.id === partnerId);
			  insertPartnerAbility(partnerId, partnerData.type);
			}
		  }
		  break;
		case unlockNewFeatureFloor("house"):
		  unlockDwellers = hero.unlockDwellers.filter(item => item.currentAbility === "banker");
		  if((hero.tokenInBankLastGenerate == 0 && hero.tokenInBank == 0) || unlockDwellers.length == 0){
		    newDwellers = 1;
		    abilityDwellersName = 'banker';
		    newFeature = "house & dwellers";
		    hero.tokenInBankLastGenerate = Date.now();
		  }
		  break;
		case unlockNewFeatureFloor("companion"):
		  insertAvailableCompanion();
		  unlockDwellers = hero.unlockDwellers.filter(item => item.currentAbility === "warlords");
		  if(hero.activeCompanionSlot == 0 || unlockDwellers.length == 0){
			newFeature = "companion";
			newDwellers = 2;
			abilityDwellersName = 'warlords';
			if(hero.activeCompanionSlot == 0)hero.activeCompanionSlot = 1;
			insertNewUnlockCompanion();
		  }
		  break;
		case unlockNewFeatureFloor("equipment"):
		  unlockDwellers = hero.unlockDwellers.filter(item => item.currentAbility === "collector");
		  if(hero.countItem == 0 || unlockDwellers.length == 0){
			newFeature = "equipment";
			newDwellers = 1;
			abilityDwellersName = 'collector';
		    hero.activeEquipmentSlot = 1;
			hero.maxBackpack = 10;
			hero.maxWarehouse = 25;
			insertNewUnlockEquipment();
			insertAutoSellEquipment();
		  }
		  break;
		case unlockNewFeatureFloor("tavern"):
		  if(nextUnlockFeature == "camp,tavern") newFeature = "tavern";
		  break;
		case unlockNewFeatureFloor("cave"):
		  if(!hero.unlockCave) hero.unlockCave = [];
		  if(hero.unlockCave.length == 0){
		    for(let i=0;i<cave.length;i++){
			  let unlockCave = hero.unlockCave.find(item => item.id === cave[i].id);
			  if(!unlockCave){
			    let newObjCave = {
			      id: cave[i].id,
			      availableSlot: 1,
				  usedSlot: 0,
			    };
			    hero.unlockCave.push(newObjCave);
			  }
		    }
		    newFeature = "cave";
			hireArmy(true);
		  }
		  break;
	    case unlockNewFeatureFloor("gods"):
		  unlockDwellers = hero.unlockDwellers.filter(item => item.currentAbility === "cleric");
	      if(hero.activeGodsSlot == 0 || unlockDwellers.length == 0){
		    newFeature = "gods";
			newDwellers = 1;
			abilityDwellersName = 'cleric';
		    if(hero.activeGodsSlot == 0)hero.activeGodsSlot = 1;
		  }
		  insertAvailableGods();
		  break;
	  };
	  notifText = "Congratz you just unlock "+firstLetterFormat(newFeature,"uppercase")+" feature. Do you want to see your "+firstLetterFormat(newFeature,"uppercase")+"?";
	  checkUnlockNewFeature();
	}
	refreshMenu();
	insertAvailableArtifact();
	if(newDwellers > 0) unlockNewDwellers(newDwellers,abilityDwellersName,true);
	
	if(newFeature != "" && selectedFloor == -1){
	  $("#modalNotifNewFeatures").modal("show");
	  componentAction ("notif-features-ok-button", "inputText", newFeature);
	  componentAction ("notif-new-feature", "replaceText", notifText, true);
	}
  };
  
  var showTaskTab = function(tabName){
	showArea("daily-task");
	switch(tabName){
	  case 'daily':
	    removeNotifIcon("daily-tab-button");
	    componentAction ("daily-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("weekly-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("monthly-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("daily-task-area-div", "removeClass", "d-none");
	    componentAction ("weekly-task-area-div", "addClass", "d-none");
		componentAction ("monthly-task-area-div", "addClass", "d-none");
		break;
	  case 'weekly':
	    removeNotifIcon("weekly-tab-button");
	    componentAction ("daily-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("weekly-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("monthly-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("daily-task-area-div", "addClass", "d-none");
	    componentAction ("weekly-task-area-div", "removeClass", "d-none");
		componentAction ("monthly-task-area-div", "addClass", "d-none");
		break;
	  case 'monthly':
	    removeNotifIcon("monthly-tab-button");
	    componentAction ("daily-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("weekly-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("monthly-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
	    componentAction ("daily-task-area-div", "addClass", "d-none");
	    componentAction ("weekly-task-area-div", "addClass", "d-none");
		componentAction ("monthly-task-area-div", "removeClass", "d-none");
		break;
	};
	removeNotifIcon("daily-task");
	removeNotifIcon("gameplay-div");
  };
  
  var showBarracksTab = function(tabName){
	showArea("barracks");  
	switch(tabName){
	  case 'barracks':
	    componentAction ("barracks-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("camp-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("training-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("barracks-area-div", "removeClass", "d-none");
		componentAction ("camp-area-div", "addClass", "d-none");
	    componentAction ("training-area-div", "addClass", "d-none");
		break;
	  case 'camp':
	    componentAction ("barracks-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("camp-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("training-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("barracks-area-div", "addClass", "d-none");
		componentAction ("barracks-header3", "updateClass", "d-flex,d-none");
		componentAction ("camp-area-div", "removeClass", "d-none");
	    componentAction ("training-area-div", "addClass", "d-none");
		break;	
	  case 'training':
	    componentAction ("barracks-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("camp-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("training-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
	    componentAction ("barracks-area-div", "addClass", "d-none");
		componentAction ("barracks-header3", "updateClass", "d-flex,d-none");
		componentAction ("camp-area-div", "addClass", "d-none");
	    componentAction ("training-area-div", "removeClass", "d-none");
		break;
	}	
  };
  
  var showBankTab = function(tabName){
	showArea("bank");  
	switch(tabName){
	  case 'bank':
	    componentAction ("bank-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("treasure-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("bank-area-div", "removeClass", "d-none");
	    componentAction ("treasure-area-div", "addClass", "d-none");
		break;
	  case 'treasure':
	    componentAction ("bank-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("treasure-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
	    componentAction ("bank-area-div", "addClass", "d-none");
	    componentAction ("treasure-area-div", "removeClass", "d-none");
		break;
	}	
  };
  
  var calcCountStorage = function(){
	let listBackpack = hero.unlockItem.filter(item => item.storageType === "backpack" && item.qty > 0);
	hero.countBackpack = listBackpack.length;
	let listWarehouse = hero.unlockItem.filter(item => item.storageType === "warehouse" && item.qty > 0);
	hero.countWarehouse = listWarehouse.length;  
  };
  
  var refreshWarehouseNotifIcon = function(tabName){
	let unlockItem = hero.unlockItem.filter(item => item.storageType === tabName && item.newItem === true);
	let countItem = unlockItem.length;
	for(let i=0;i<countItem;i++){
	  unlockItem[i].newItem = false;
	  removeNotifIcon(tabName+"-item-area-"+unlockItem[i].id);
	}
	removeNotifIcon(tabName+"-tab-button");
	removeNotifIcon("warehouse");
	removeNotifIcon("town-div");
  };
  
  var showWarehouseTab = function(tabName){
	$("#span-item-filter").empty(); 
	$("#span-item-filter").append(createItemFilter()).off('change',"#item-filter").on('change',"#item-filter",function(){
	  filterItem(this.value,tabName);
	});
	$("#span-item-sorting").empty(); 
	$("#span-item-sorting").append(createItemSorting()).off('change',"#item-sorting").on('change',"#item-sorting",function(){
	  sortingItem(this);
	});
	
	componentAction("hero-sphere","replaceText",numberFormat(hero.sphere));
	componentAction("hero-blueprint","replaceText",numberFormat(hero.blueprint));
	$("#warehouse-header3").empty();
	componentAction("warehouse-header3","updateClass","d-flex,d-none");
	showArea("warehouse");
	calcCountStorage();
	refreshWarehouseNotifIcon(tabName);
	
	componentAction("warehouse-desc","replaceText","("+hero.countWarehouse+" / "+hero.maxWarehouse+")");
	componentAction("backpack-desc","replaceText","("+hero.countBackpack+" / "+hero.maxBackpack+")");
	
	switch(tabName){
	  case 'warehouse':
	    componentAction ("warehouse-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("backpack-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("warehouse-area-div", "removeClass", "d-none");
	    componentAction ("backpack-area-div", "addClass", "d-none");
		break;
	  case 'backpack':
	    componentAction ("warehouse-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("backpack-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
	    componentAction ("warehouse-area-div", "addClass", "d-none");
	    componentAction ("backpack-area-div", "removeClass", "d-none");
		break;
	}
  };
  
  var showPetTab = function(tabName){
	showArea("pet");  
	switch(tabName){
	  case 'pet':
	    componentAction ("pet-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("area-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("pet-area-div", "removeClass", "d-none");
	    componentAction ("adventure-area-div", "addClass", "d-none");
		break;
	  case 'area':
	    componentAction ("pet-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("area-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
	    componentAction ("pet-area-div", "addClass", "d-none");
	    componentAction ("adventure-area-div", "removeClass", "d-none");
		break;
	}	
  };
  
  var showGodsTab = function(tabName){
	showArea("gods"); 
	componentAction("active-slot-gods","replaceText",checkActiveGods());
	componentAction("max-slot-gods","replaceText",hero.activeGodsSlot);	
	switch(tabName){
	  case 'gods':
	    componentAction ("gods-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
		componentAction ("temple-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	    componentAction ("gods-area-div", "removeClass", "d-none");
	    componentAction ("temple-area-div", "addClass", "d-none");
		break;
	  case 'temple':
	    componentAction ("gods-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
		componentAction ("temple-tab-button", "updateClass", "tab-button-unactive,tab-button-active");
	    componentAction ("gods-area-div", "addClass", "d-none");
	    componentAction ("temple-area-div", "removeClass", "d-none");
		break;
	}
  };
  
  var scrollTheDiv = function(divId,scrollType="start"){
	$("#"+divId)[0].scrollIntoView({
	  behavior: "instant", /* or "smooth" or "auto" */
	  block: scrollType /* or "end" */
	});  
  };
  
  var closeBarracksHeader = function(partnerId){
	componentAction("barracks-header3","updateClass","d-flex,d-none");
	componentAction("barracks-partner-area-"+partnerId,"updateClass","selected-rounded-card,rounded-card");
	calcHeightScrollDiv("barracks");
  };
  
  var showBarracksDetailInfo = function(){
	if(!$("#partner-spirit-stone").hasClass("d-none")){ 
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "* Elite level follows the total level of the base dps, ability damage, crit chance and crit damage \n * You can get spirit stone from tower & daily check in prize \n * Spirit stone are needed to upgrade elite status \n * You can get elite fragment from daily check in prize \n * Elite fragment are needed to enhance the elite"); 
	}else if(!$("#partner-sphere").hasClass("d-none")){ 
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "* You can get gear from tower, sell equipment & daily check in prize \n * Gear are needed to upgrade the equipment \n * You can get blueprint from daily check in prize \n * Blueprint are needed to enhance the equipment"); 
	}else if(!$("#partner-ability").hasClass("d-none")){ 
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "* Each elite will have 5 ability (Accurate, Burst, Common, Vast & Rapid) \n * You need to activate the ability to increase the point & level \n * One hero can only activate 1 ability at the same time \n * Each ability have each status and level \n * The smaller the interval value, the faster the ability is launched \n * You can train your ability in training ground \n * Each completed training will increase the maximum ability level by 100 level \n * You need prestige to send back elites to fight in the world \n * Ability damage only calculates elite dps but does not calculate equipment dps \n * If elite have 100 DPS and ability have 3 for interval, 80% for accuracy and 60% for damage then ability will launch every 3 seconds with 80% accuracy and the damage is 60");
	}
  };
  
  var showDetailPartner = function(e){
	let partnerId = parseInt(e.id.replace("barracks-partner-area-",""),10);
	if(compareDivId != partnerId){
 	  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	  if(highestUnlockPartner){
	    let partnerData = partner.find(item => item.id === partnerId);
		let spiritStone = hero.spiritStone;
		let partnerFragment = hero.partnerFragment;
		let equipmentSphere = hero.sphere;
		let equipmentBlueprint = hero.blueprint;
		$("#barracks-header3").empty();
	    componentAction("barracks-header3","updateClass","d-none,d-flex");
	    componentAction("barracks-partner-area-"+partnerId,"updateClass","rounded-card,selected-rounded-card");
	    if(compareDivId != null) componentAction("barracks-partner-area-"+compareDivId,"updateClass","selected-rounded-card,rounded-card");
	    compareDivId = partnerId;
	
		let appendDetailPartner = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 px-0">';
		appendDetailPartner += '<div id="partner-spirit-stone" class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 m-0 px-0 mb-1">';
		appendDetailPartner += '<img src="assets/images/spirit-stone.svg" class="image-size-2"></img>&nbsp;Spirit Stone :&nbsp;<span id="total-spirit-stone">'+numberFormat(spiritStone)+'</span>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div id="partner-fragment" class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 m-0 px-0 mb-1">';
		appendDetailPartner += '<img src="assets/images/elite-fragment.svg" class="image-size-2"></img>&nbsp;Elite Fragment :&nbsp;<span id="total-partner-fragment">'+numberFormat(partnerFragment)+'</span>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div id="partner-sphere" class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 m-0 px-0 mb-1">';
		appendDetailPartner += '<img src="assets/images/gear.svg" class="image-size-2"></img>&nbsp;Gear :&nbsp;<span id="total-partner-sphere">'+numberFormat(equipmentSphere)+'</span>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div id="partner-blueprint" class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 m-0 px-0 mb-1">';
		appendDetailPartner += '<img src="assets/images/blueprint.svg" class="image-size-2"></img>&nbsp;Blueprint :&nbsp;<span id="total-partner-blueprint">'+numberFormat(equipmentBlueprint)+'</span>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div id="partner-ability" class="row col-xl-11 col-lg-11 col-md-11 col-sm-11 col-11 m-0 px-0 mb-1">Elite Ability</div>';
		appendDetailPartner += '<div class="row col-xl-1 col-lg-1 col-md-1 col-sm-1 col-1 m-0 px-0 mb-1">';
		appendDetailPartner += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 right-content v-center-flex">';
		appendDetailPartner += '<img id="barracks-detail-info" src="assets/images/info-color.svg" class="image-size cursor-button">';
		appendDetailPartner += '</div>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div class="rounded-card m-0 col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		appendDetailPartner += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 pb-1 p-0 border-bottom-only">';
		appendDetailPartner += '<div class="col-xl-11 col-lg-11 col-md-11 col-sm-11 col-11 v-center-flex px-0 font-weight-bolder">';
		appendDetailPartner += '<img src="assets/images/' + partnerData.type.toLowerCase() + '.svg" class="image-size-static"></img>&nbsp;' + partnerData.name ;
		appendDetailPartner += '&nbsp;&nbsp;&nbsp;<img id="partner-status-image-'+partnerId+'" src="assets/images/' + highestUnlockPartner.status.toLowerCase() + '.svg" class="image-size-static">&nbsp;';
		appendDetailPartner += '<span id="partner-status-text-'+partnerId+'">'+highestUnlockPartner.status+'</span>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div class="row col-xl-1 col-lg-1 col-md-1 col-sm-1 col-1 close-barracks-header3">';
		appendDetailPartner += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 right-align cursor-button">X</div>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '</div>';
		
		appendDetailPartner += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0">';
		appendDetailPartner += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 px-0 v-center-flex">';
		appendDetailPartner += '<h6 id="stat-partner-tab-'+partnerId+'" class="partner-tab mx-0 rounded-card tab-button-active cursor-button font-weight-bold text-primary v-center-flex middle-content">Stat</h6>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 px-0">';
		appendDetailPartner += '<h6 id="equipment-partner-tab-'+partnerId+'" class="partner-tab mx-0 rounded-card tab-button-unactive cursor-button font-weight-bold text-primary middle-align">Equipment</h6>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 px-0">';
		appendDetailPartner += '<h6 id="ability-partner-tab-'+partnerId+'" class="partner-tab mx-0 rounded-card tab-button-unactive cursor-button font-weight-bold text-primary middle-align">Ability</h6>';
		appendDetailPartner += '</div>';
		appendDetailPartner += '</div>';
		
		appendDetailPartner += '<div id="detail-partner-area" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0"></div>';
		
		appendDetailPartner += '</div>';
		appendDetailPartner += '</div>';
		
		$("#barracks-header3").append(appendDetailPartner).off('click','.partner-tab').on('click','.partner-tab',function(){
		  showDetailPartnerArea(this); 
		}).off('.click','.close-barracks-header3').on('click','.close-barracks-header3',function(){
		  closeBarracksHeader(partnerId);
		}).off('.click','#barracks-detail-info').on('click','#barracks-detail-info',function(){
		  showBarracksDetailInfo();
		});
		showDetailPartnerStat(partnerId);
	  }
	}else{
	  componentAction("barracks-partner-area-"+compareDivId,"updateClass","selected-rounded-card,rounded-card");
	  compareDivId = null;
	  componentAction("barracks-header3","updateClass","d-flex,d-none");
	}
	calcHeightScrollDiv("barracks");
	scrollTheDiv("barracks-partner-area-"+partnerId);
  };
  
  var closeAllDetailPartnerArea = function(partnerId){
	componentAction("stat-partner-tab-"+partnerId,"updateClass","tab-button-active,tab-button-unactive");
	componentAction("equipment-partner-tab-"+partnerId,"updateClass","tab-button-active,tab-button-unactive");
	componentAction("ability-partner-tab-"+partnerId,"updateClass","tab-button-active,tab-button-unactive");
  };
  
  var showPartnerGradeInfo = function(partnerId){
	let partnerData = partner.find(item => item.id === partnerId);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let appendEnhanceBenefitDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	appendEnhanceBenefitDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">'+partnerData.name+' Enhance Benefit</div>';
	
	for(let i=1;i<=10;i++){
	  let benefitId = partnerData["benefitId"+i];
	  let enhanceLevelPartnerData = enhanceLevelPartner.find(item => item.id === i);
	  let benefitPartnerData = benefitPartner.find(item => item.id === benefitId);
	  let textClass = "text-gray-500";
	  let benefitDesc = "";
	  let benefitTarget = "";
	  let benefitPercentage = benefitPartnerData.benefitPercentage;
	  let multiplierPercentage = 0;
	  
	  if(benefitPartnerData.group == "chance") multiplierPercentage = enhanceLevelPartnerData.chanceMultiplierPercentage / 100;
	  else multiplierPercentage = enhanceLevelPartnerData.benefitMultiplierPercentage / 100;
	  
	  benefitPercentage = benefitPercentage * multiplierPercentage;
	  
	  if(benefitPartnerData.target == "class") benefitTarget = partnerData.type.toLowerCase()+" "+benefitPartnerData.target;
	  else benefitTarget = benefitPartnerData.target;
	  
	  if(i==11) benefitDesc = 'Increase '+benefitPartnerData.type+' damage by '+numberFormat(benefitPercentage)+'% '+benefitTarget+' damage';
	  else benefitDesc = 'Increase '+benefitPartnerData.type+' '+benefitPartnerData.group+' for '+benefitTarget+' by '+numberFormat(benefitPercentage)+'%';
	  
	  if(i<=highestUnlockPartner.enhanceLevel) textClass = "good-info";
	  
	  appendEnhanceBenefitDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 my-1">';
	  appendEnhanceBenefitDiv += '<div class="float-left partner-enhance-div '+textClass+'">'+i+'. '+enhanceLevelPartnerData.name +'</div>';
	  appendEnhanceBenefitDiv += '<div class="float-left '+textClass+'">:&nbsp;&nbsp;</div>';
	  appendEnhanceBenefitDiv += '<div class="d-table '+textClass+'">'+benefitDesc +'</div>';
	  appendEnhanceBenefitDiv += '</div>';
	}
	appendEnhanceBenefitDiv += '</div>';
	
	$("#modalInformation").modal("show");
	$("#information-div").empty();
	$("#information-div").append(appendEnhanceBenefitDiv); 
  };
  
  var enhancePartner = function(partnerId){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	if(highestUnlockPartner){
	  let nextEnhanceLevel = highestUnlockPartner.enhanceLevel+1;
	  let nextEnhanceLevelPartnerData = enhanceLevelPartner.find(item => item.id === nextEnhanceLevel);
	  let requiredPartnerFragment = nextEnhanceLevelPartnerData.requiredFragment;
	  if(hero.partnerFragment >= requiredPartnerFragment){
	    let partnerData = partner.find(item => item.id === partnerId);
		let benefitId = partnerData["benefitId"+nextEnhanceLevel];
		let benefitPartnerData = benefitPartner.find(item => item.id === benefitId);
		let benefitPercentage = new Decimal(benefitPartnerData.benefitPercentage);
		let sameClassPartner;
		let selectedHighestUnlockPartner;
		
		if(benefitPartnerData.group == "chance") benefitPercentage = benefitPercentage.mul(nextEnhanceLevelPartnerData.chanceMultiplierPercentage).div(100);
		else benefitPercentage = benefitPercentage.mul(nextEnhanceLevelPartnerData.benefitMultiplierPercentage).div(100);
		
		switch(benefitId){
		  case 0:
			highestUnlockPartner.enhanceDpsPercentage = new Decimal(highestUnlockPartner.enhanceDpsPercentage).plus(benefitPercentage);
			break;
		  case 1:
		    sameClassPartner = partner.filter(item => item.type === partnerData.type);
			for(let i=0;i<sameClassPartner.length;i++){
			  let selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === sameClassPartner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceDpsPercentage = new Decimal(selectedHighestUnlockPartner.enhanceDpsPercentage).plus(benefitPercentage);
			}
			break;
		  case 2:
		    for(let i=0;i<partner.length;i++){
			  selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceDpsPercentage = new Decimal(selectedHighestUnlockPartner.enhanceDpsPercentage).plus(benefitPercentage);
			  else{
				let newHighestUnlockPartner = createHighestPartner(partner[i].id,null,"waiting");
				newHighestUnlockPartner.enhanceDpsPercentage = new Decimal(benefitPercentage);
				hero.highestUnlockPartner.push(newHighestUnlockPartner);
			  }
			}
			break;
		  case 3:
			hero.enhanceDpsForNormalEnemyPercentage = new Decimal(hero.enhanceDpsForNormalEnemyPercentage).plus(benefitPercentage);
			break;
		  case 4:
		    hero.enhanceDpsForBossEnemyPercentage = new Decimal(hero.enhanceDpsForBossEnemyPercentage).plus(benefitPercentage);
			break;
		  case 5:
			hero.enhanceDpcForNormalEnemyPercentage = new Decimal(hero.enhanceDpcForNormalEnemyPercentage).plus(benefitPercentage);
			break;
		  case 6:
		    hero.enhanceDpcForBossEnemyPercentage = new Decimal(hero.enhanceDpcForBossEnemyPercentage).plus(benefitPercentage);
			break;
		  case 7:
		    hero.enhanceDpcForAllEnemyPercentage = new Decimal(hero.enhanceDpcForAllEnemyPercentage).plus(benefitPercentage);
			break;
		  case 8:
			hero.enhanceAllDamagePercentage = new Decimal(hero.enhanceAllDamagePercentage).plus(benefitPercentage);
			break;
		  case 9:
		    hero.enhanceDpcCritChancePercentage = new Decimal(hero.enhanceDpcCritChancePercentage).plus(benefitPercentage);
			break;
		  case 10:
		    hero.enhanceDpcCritDamagePercentage = new Decimal(hero.enhanceDpcCritDamagePercentage).plus(benefitPercentage);
			break;
		  case 11:
		    hero.enhanceDpsToDpcPercentage = new Decimal(hero.enhanceDpsToDpcPercentage).plus(benefitPercentage);
			break;
		  case 12:
		    highestUnlockPartner.enhanceCritDamagePercentage = new Decimal(highestUnlockPartner.enhanceCritDamagePercentage).plus(benefitPercentage);
			break;
		  case 13:
		    sameClassPartner = partner.filter(item => item.type === partnerData.type);
			for(let i=0;i<sameClassPartner.length;i++){
			  let selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === sameClassPartner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceCritDamagePercentage = new Decimal(selectedHighestUnlockPartner.enhanceCritDamagePercentage).plus(benefitPercentage);
			}
			break;
		  case 14:
		    for(let i=0;i<partner.length;i++){
			  selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceCritDamagePercentage = new Decimal(selectedHighestUnlockPartner.enhanceCritDamagePercentage).plus(benefitPercentage);
			  else{
				let newHighestUnlockPartner = createHighestPartner(partner[i].id,null,"waiting");
				newHighestUnlockPartner.enhanceCritDamagePercentage = new Decimal(benefitPercentage);
				hero.highestUnlockPartner.push(newHighestUnlockPartner);
			  }
			}
			break;
		  case 15:
		    highestUnlockPartner.enhanceCritChancePercentage = new Decimal(highestUnlockPartner.enhanceCritChancePercentage).plus(benefitPercentage);
			break;
		  case 16:
		    sameClassPartner = partner.filter(item => item.type === partnerData.type);
			for(let i=0;i<sameClassPartner.length;i++){
			  let selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === sameClassPartner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceCritChancePercentage = new Decimal(selectedHighestUnlockPartner.enhanceCritChancePercentage).plus(benefitPercentage);
			}
			break;
		  case 17:
		    for(let i=0;i<partner.length;i++){
			  selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceCritChancePercentage = new Decimal(selectedHighestUnlockPartner.enhanceCritChancePercentage).plus(benefitPercentage);
			  else{
				let newHighestUnlockPartner = createHighestPartner(partner[i].id,null,"waiting");
				newHighestUnlockPartner.enhanceCritChancePercentage = new Decimal(benefitPercentage);
				hero.highestUnlockPartner.push(newHighestUnlockPartner);
			  }
			}
			break;
		  case 18:
			hero.enhanceCoinForNormalEnemyPercentage = new Decimal(hero.enhanceCoinForNormalEnemyPercentage).plus(benefitPercentage);
			break;
		  case 19:
		    hero.enhanceCoinForBossEnemyPercentage = new Decimal(hero.enhanceCoinForBossEnemyPercentage).plus(benefitPercentage);
			break;
		  case 20:
		    hero.enhanceCoinForAllEnemyPercentage = new Decimal(hero.enhanceCoinForAllEnemyPercentage).plus(benefitPercentage);
			break;
		  case 21:
			hero.enhance10CoinChanceForNormalEnemyPercentage = new Decimal(hero.enhance10CoinChanceForNormalEnemyPercentage).plus(benefitPercentage);
			break;
		  case 22:
		    hero.enhance10CoinChanceForBossEnemyPercentage = new Decimal(hero.enhance10CoinChanceForBossEnemyPercentage).plus(benefitPercentage);
			break;
		  case 23:
		    hero.enhance10CoinChanceForAllEnemyPercentage = new Decimal(hero.enhance10CoinChanceForAllEnemyPercentage).plus(benefitPercentage);
			break;
		  case 24:
		    highestUnlockPartner.enhanceAbilityDamagePercentage = new Decimal(highestUnlockPartner.enhanceAbilityDamagePercentage).plus(benefitPercentage);
			break;
		  case 25:
		    sameClassPartner = partner.filter(item => item.type === partnerData.type);
			for(let i=0;i<sameClassPartner.length;i++){
			  let selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === sameClassPartner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceAbilityDamagePercentage = new Decimal(selectedHighestUnlockPartner.enhanceAbilityDamagePercentage).plus(benefitPercentage);
			}
			break;
		  case 26:
		    for(let i=0;i<partner.length;i++){
			  selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceAbilityDamagePercentage = new Decimal(selectedHighestUnlockPartner.enhanceAbilityDamagePercentage).plus(benefitPercentage);
			  else{
				let newHighestUnlockPartner = createHighestPartner(partner[i].id,null,"waiting");
				newHighestUnlockPartner.enhanceAbilityDamagePercentage = new Decimal(benefitPercentage);
				hero.highestUnlockPartner.push(newHighestUnlockPartner);
			  }
			}
			break;
		  case 27:
		    highestUnlockPartner.enhanceAbilityChancePercentage = new Decimal(highestUnlockPartner.enhanceAbilityChancePercentage).plus(benefitPercentage);
			break;
		  case 28:
		    sameClassPartner = partner.filter(item => item.type === partnerData.type);
			for(let i=0;i<sameClassPartner.length;i++){
			  let selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === sameClassPartner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceAbilityChancePercentage = new Decimal(selectedHighestUnlockPartner.enhanceAbilityChancePercentage).plus(benefitPercentage);
			}
			break;
		  case 29:
		    for(let i=0;i<partner.length;i++){
			  selectedHighestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partner[i].id);
			  if(selectedHighestUnlockPartner) selectedHighestUnlockPartner.enhanceAbilityChancePercentage = new Decimal(selectedHighestUnlockPartner.enhanceAbilityChancePercentage).plus(benefitPercentage);
			  else{
				let newHighestUnlockPartner = createHighestPartner(partner[i].id,null,"waiting");
				newHighestUnlockPartner.enhanceAbilityChancePercentage = new Decimal(benefitPercentage);
				hero.highestUnlockPartner.push(newHighestUnlockPartner);
			  }
			}
			break;
		  case 30:
		    hero.enhanceSlashDamagePercentage = new Decimal(hero.enhanceSlashDamagePercentage).plus(benefitPercentage);
			break;
		  case 31:
		    hero.enhanceSlashChancePercentage = new Decimal(hero.enhanceSlashChancePercentage).plus(benefitPercentage);
			break;
		};
		highestUnlockPartner.enhanceLevel += 1;
		hero.partnerFragment -= requiredPartnerFragment;
		componentAction("total-partner-fragment","replaceText",numberFormat(hero.partnerFragment));
		componentAction("partner-image-div-"+partnerId,"removeClass","my-2");
		$("#partner-enhance-div-"+partnerId).empty();
		let starImg = "silver-star";
	    let loopStar = highestUnlockPartner.enhanceLevel;
		let appendPartnerStar = "";
	    if(loopStar > 5){
	      starImg = "golden-star";
	      loopStar -= 5;
	    }
	    for(let j=0;j<loopStar;j++){
	      appendPartnerStar += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
	    }
		$("#partner-enhance-div-"+partnerId).append(appendPartnerStar);
		showDetailPartnerStat(partnerId);
		checkCssSetting();
	  }else{
		$("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "You don't have enough elite fragment to upgrade");
	  }
	}
	saveGame();
  };
  
  var upgradePartnerStat = function(actionType,partnerId){
	let partnerData = partner.find(item => item.id === partnerId);
	let baseDps = partnerData.baseDps;
	let requiredSpiritStone = calcNextRequiredPartnerSpirit(actionType,partnerId);
	
	if(hero.spiritStone >= requiredSpiritStone){
	  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	  switch(actionType){
	    case "dps":
		  highestUnlockPartner.baseDps = calcNextUpgradePartnerStat(actionType,partnerId);
		  highestUnlockPartner.baseDpsLevel += 1;
		  break;
	    case "ability-damage":
		  highestUnlockPartner.baseAbilityDamagePercentage = calcNextUpgradePartnerStat(actionType,partnerId);
		  highestUnlockPartner.abilityDamageLevel += 1;
		  break;
	    case "crit-chance":
		  highestUnlockPartner.baseCritChancePercentage += calcNextUpgradePartnerStat(actionType,partnerId) * 1;
		  highestUnlockPartner.critChanceLevel += 1;
		  break;
	    case "crit-damage":
		  highestUnlockPartner.baseCritDamagePercentage = calcNextUpgradePartnerStat(actionType,partnerId);
		  highestUnlockPartner.critDamageLevel += 1;
		  break;
	  };
	  highestUnlockPartner.upgradeLevel += 1;
	  let upgradeLevel = "+"+highestUnlockPartner.upgradeLevel;
	  hero.spiritStone -= requiredSpiritStone;
	  updateTask(26);
	  showDetailPartnerStat(partnerId);
	  checkCssSetting();
	  componentAction("total-spirit-stone","replaceText",numberFormat(hero.spiritStone));
	  $("#partner-upgrade-level-"+partnerId).text(upgradeLevel);
	  saveGame();
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You don't have enough spirit stone to upgrade");
	}
  };
  
  var showDetailPartnerStat = function(partnerId){
	partnerId = parseInt(partnerId,10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	if(highestUnlockPartner){
	  componentAction("partner-spirit-stone","updateClass","d-none,");
	  componentAction("partner-fragment","updateClass","d-none,");
	  componentAction("partner-sphere","updateClass",",d-none");
	  componentAction("partner-blueprint","updateClass",",d-none");
	  componentAction("partner-ability","updateClass",",d-none");
	  $("#detail-partner-area").empty();
	  let partnerData = partner.find(item => item.id === partnerId);
	  let partnerImg = partnerData.name.toLowerCase();
	  let upgradeLevel = "";
	  if(highestUnlockPartner.upgradeLevel>0) upgradeLevel = "+"+highestUnlockPartner.upgradeLevel;
	  let classImg = "my-2";
	  if(highestUnlockPartner.enhanceLevel > 0) classImg = "";
	  let enhanceLevelPartnerData = enhanceLevelPartner.find(item => item.id === highestUnlockPartner.enhanceLevel);
	  let baseDps = new Decimal(highestUnlockPartner.baseDps);
	  let partnerCritChance = new Decimal(formulaPartnerCritChance(highestUnlockPartner));
	  let nextBaseCritChance = new Decimal(calcNextUpgradePartnerStat("crit-chance",partnerId));
	  let requiredBaseCritChance = new Decimal(calcNextRequiredPartnerSpirit("crit-chance",partnerId));
	  
	  let baseCritDamage = new Decimal(highestUnlockPartner.baseCritDamagePercentage);
	  let baseAbilityDamage = new Decimal(highestUnlockPartner.baseAbilityDamagePercentage);
	  let nextBaseDps = new Decimal(calcNextUpgradePartnerStat("dps",partnerId)).sub(highestUnlockPartner.baseDps);
	  let requiredBaseDps = new Decimal(calcNextRequiredPartnerSpirit("dps",partnerId));
	  let nextBaseAbilityDamage = new Decimal(calcNextUpgradePartnerStat("ability-damage",partnerId)).sub(highestUnlockPartner.baseAbilityDamagePercentage);
	  let requiredBaseAbilityDamage = new Decimal(calcNextRequiredPartnerSpirit("ability-damage",partnerId));
	  
	  let nextBaseCritDamage = new Decimal(calcNextUpgradePartnerStat("crit-damage",partnerId)).sub(highestUnlockPartner.baseCritDamagePercentage);
	  let requiredBaseCritDamage = new Decimal(calcNextRequiredPartnerSpirit("crit-damage",partnerId));
	  let requiredPartnerFragment = 0;
	  let canEnhance = false;
	  if(highestUnlockPartner.enhanceLevel < (enhanceLevelEquipment.length-1)){
	    let nextEnhanceLevelPartnerData = enhanceLevelPartner.find(item => item.id === (highestUnlockPartner.enhanceLevel+1));
	    requiredPartnerFragment = nextEnhanceLevelPartnerData.requiredFragment;
		canEnhance = true;
	  }
	  
	  let appendPartnerStatDiv = '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12">';
	  appendPartnerStatDiv += '<div class="col-xl-3 col-lg-4 col-md-4 col-sm-4 col-4 '+classImg+'">';
	  appendPartnerStatDiv += '<div class="w-100 position-absolute">';
	  appendPartnerStatDiv += '<div class="float-middle partner-div">';
	  appendPartnerStatDiv += '<div class="left-align good-info">'+upgradeLevel+'</div>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '<div class="w-100 middle-align">';
	  appendPartnerStatDiv += '<img id="partner-image-' + partnerId + '" src="assets/images/'+partnerImg+'.svg" class="image-partner right-align"></img>';
	  appendPartnerStatDiv += '</div>';
	  
	  if(highestUnlockPartner.enhanceLevel > 0){
	    appendPartnerStatDiv += '<div class="w-100">';
	    appendPartnerStatDiv += '<div class="star-div position-relative float-middle">';
	    appendPartnerStatDiv += '<div class="w-100 middle-align star-height">';
	    let starImg = "silver-star";
	    let loopStar = highestUnlockPartner.enhanceLevel;
	    if(loopStar > 5){
	      starImg = "golden-star";
	      loopStar -= 5;
	    }
	    for(let j=0;j<loopStar;j++){
	      appendPartnerStatDiv += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
	    }
	    appendPartnerStatDiv += '</div>';
	    appendPartnerStatDiv += '</div>';
	    appendPartnerStatDiv += '</div>';
	  }
	  appendPartnerStatDiv += '</div>';
	  
	  appendPartnerStatDiv += '<div class="col-xl-9 col-lg-8 col-md-8 col-sm-8 col-8 px-0">';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Name : '+ partnerData.name + '</div>';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Grade :&nbsp;'+ enhanceLevelPartnerData.name + '&nbsp;('+highestUnlockPartner.enhanceLevel+'/10)&nbsp;&nbsp;<img src="assets/images/info-color.svg" class="image-size-static cursor-button partner-grade-info"></img></div>';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Type :&nbsp;<img src="assets/images/'+partnerData.type.toLowerCase()+'.svg" class="image-size-static"></img>&nbsp;'+ partnerData.type + '</div>';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Status :&nbsp;<img src="assets/images/'+highestUnlockPartner.status.toLowerCase()+'.svg" class="image-size-static"></img>&nbsp;'+ highestUnlockPartner.status + '</div>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '</div>';
	  
	  appendPartnerStatDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12 px-0">';
	  
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-6 col-12">Base DPS (Lv '+highestUnlockPartner.baseDpsLevel+') :&nbsp;'+numberFormat(baseDps)+'</div>';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-6 col-12">Ability Damage (Lv '+highestUnlockPartner.abilityDamageLevel+') :&nbsp;'+numberFormat(baseAbilityDamage)+'%</div>';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-6 col-12">Crit Chance (Lv '+highestUnlockPartner.critChanceLevel+') :&nbsp;'+numberFormat(partnerCritChance)+'%</div>';
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-6 col-12">Crit Damage (Lv '+highestUnlockPartner.critDamageLevel+') :&nbsp;'+numberFormat(baseCritDamage)+'%</div>';
	  appendPartnerStatDiv += '</div>';
	  
	  appendPartnerStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0">';
	  appendPartnerStatDiv += '<div class="col-xl-3 col-lg-6 col-md-6 col-sm-6 col-12 px-0 pt-1">';
	  appendPartnerStatDiv += '<button id="upgrade-base-dps-'+partnerId+'" class="upgrade-level-button" title="Upgrade Dps" value="'+partnerId+'=dps">';
	  appendPartnerStatDiv += '<div class="v-center-flex">Base DPS&nbsp;(+<span id="next-base-dps-'+partnerId+'">'+numberFormat(nextBaseDps)+'</span>)&nbsp;-&nbsp;<img src="assets/images/spirit-stone.svg" class="image-size-static cursor-button"><span id="required-base-dps-'+partnerId+'">'+numberFormat(requiredBaseDps)+'</span></div>';
	  appendPartnerStatDiv += '</button>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '<div class="col-xl-3 col-lg-6 col-md-6 col-sm-6 col-12 px-0 pt-1">';
	  appendPartnerStatDiv += '<button id="upgrade-base-ability-damage-'+partnerId+'" class="upgrade-level-button" title="Upgrade Ability Damage" value="'+partnerId+'=dps">';
	  appendPartnerStatDiv += '<div class="v-center-flex">Ability Damage&nbsp;(+<span id="next-base-ability-damage-'+partnerId+'">'+numberFormat(nextBaseAbilityDamage)+'</span>%)&nbsp;-&nbsp;<img src="assets/images/spirit-stone.svg" class="image-size-static cursor-button"><span id="required-base-ability-damage-'+partnerId+'">'+numberFormat(requiredBaseAbilityDamage)+'</span></div>';
	  appendPartnerStatDiv += '</button>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '<div class="col-xl-3 col-lg-6 col-md-6 col-sm-6 col-12 px-0 pt-1">';
	  appendPartnerStatDiv += '<button id="upgrade-base-crit-chance-'+partnerId+'" class="upgrade-level-button" title="Upgrade Crit Chance" value="'+partnerId+'=dps">';
	  appendPartnerStatDiv += '<div class="v-center-flex">Crit Chance&nbsp;(+<span id="next-base-crit-chance-'+partnerId+'">'+numberFormat(nextBaseCritChance)+'</span>%)&nbsp;-&nbsp;<img src="assets/images/spirit-stone.svg" class="image-size-static cursor-button"><span id="required-base-crit-chance-'+partnerId+'">'+numberFormat(requiredBaseCritChance)+'</span></div>';
	  appendPartnerStatDiv += '</button>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '<div class="col-xl-3 col-lg-6 col-md-6 col-sm-6 col-12 px-0 pt-1">';
	  appendPartnerStatDiv += '<button id="upgrade-base-crit-damage-'+partnerId+'" class="upgrade-level-button" title="Upgrade Crit Damage" value="'+partnerId+'=dps">';
	  appendPartnerStatDiv += '<div class="v-center-flex">Crit Damage&nbsp;(+<span id="next-base-crit-damage-'+partnerId+'">'+numberFormat(nextBaseCritDamage)+'</span>%)&nbsp;-&nbsp;<img src="assets/images/spirit-stone.svg" class="image-size-static cursor-button"><span id="required-base-crit-damage-'+partnerId+'">'+numberFormat(requiredBaseCritDamage)+'</span></div>';
	  appendPartnerStatDiv += '</button>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0 pt-1">';
	  appendPartnerStatDiv += '<button id="enhance-partner-'+partnerId+'" class="upgrade-level-button" title="Enhance Partner" value="'+partnerId+'=dps">';
	  if(canEnhance) appendPartnerStatDiv += '<div class="v-center-flex">Enhance Partner&nbsp;<img src="assets/images/elite-fragment.svg" class="image-size-static cursor-button"><span id="required-partner-fragment-'+partnerId+'">'+numberFormat(requiredPartnerFragment)+'</span></div>';
	  else appendPartnerStatDiv += '<div class="v-center-flex">Enhance Level Maxed</div>';
	  appendPartnerStatDiv += '</button>';
	  appendPartnerStatDiv += '</div>';
	  appendPartnerStatDiv += '</div>';
	  
	  if(canEnhance){
	    $("#detail-partner-area").append(appendPartnerStatDiv).off('click','.partner-grade-info').on('click','.partner-grade-info',function(){
		  showPartnerGradeInfo(partnerId);
	    }).off('click','#upgrade-base-dps-'+partnerId).on('click','#upgrade-base-dps-'+partnerId,function(){
		  upgradePartnerStat("dps",partnerId);
	    }).off('click','#upgrade-base-ability-damage-'+partnerId).on('click','#upgrade-base-ability-damage-'+partnerId,function(){
		  upgradePartnerStat("ability-damage",partnerId);
	    }).off('click','#upgrade-base-crit-chance-'+partnerId).on('click','#upgrade-base-crit-chance-'+partnerId,function(){
		  upgradePartnerStat("crit-chance",partnerId);
	    }).off('click','#upgrade-base-crit-damage-'+partnerId).on('click','#upgrade-base-crit-damage-'+partnerId,function(){
		  upgradePartnerStat("crit-damage",partnerId);
	    }).off('click','#enhance-partner-'+partnerId).on('click','#enhance-partner-'+partnerId,function(){
		  enhancePartner(partnerId);
	    });
	  }else{
		$("#detail-partner-area").append(appendPartnerStatDiv).off('click','.partner-grade-info').on('click','.partner-grade-info',function(){
		  showPartnerGradeInfo(partnerId);
	    }).off('click','#upgrade-base-dps-'+partnerId).on('click','#upgrade-base-dps-'+partnerId,function(){
		  upgradePartnerStat("dps",partnerId);
	    }).off('click','#upgrade-base-ability-damage-'+partnerId).on('click','#upgrade-base-ability-damage-'+partnerId,function(){
		  upgradePartnerStat("ability-damage",partnerId);
	    }).off('click','#upgrade-base-crit-chance-'+partnerId).on('click','#upgrade-base-crit-chance-'+partnerId,function(){
		  upgradePartnerStat("crit-chance",partnerId);
	    }).off('click','#upgrade-base-crit-damage-'+partnerId).on('click','#upgrade-base-crit-damage-'+partnerId,function(){
		  upgradePartnerStat("crit-damage",partnerId);
	    }).off('click','#enhance-partner-'+partnerId);  
	  }
	  calcHeightScrollDiv("barracks");
	}
  };
  
  var showDetailPartnerEquipmentStat = function(e){
	let arrayEquipment = e.id.replace("-partner-div","").toLowerCase().split("-");
	let equipmentType = arrayEquipment[0];
	let partnerId = parseInt(arrayEquipment[1],10);
	
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	if(highestUnlockPartner){
	  let appendDetailEquipmentStatDiv = "";
	  let buttonValue = "";
	  let minValue = new Decimal(0);
	  let maxValue = new Decimal(0);
	  let actionType;
	  let itemId = highestUnlockPartner[equipmentType+"Id"];
	  let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	  if(unlockItem){
	    let equipmentData = equipment.find(item => item.id === unlockItem.itemId);
		let partnerType = equipmentData.partnerType.toLowerCase();
		if(partnerType=="all")partnerType = "partner";
		let benefitName = "";
		if(equipmentType == "weapon")benefitName = "Dam";
		minValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue);
		maxValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue);
		if(unlockItem.storageType != "warehouse" && unlockItem.storageType != "backpack"){
		  let partnerData = partner.find(item => item.name === unlockItem.storageType);
		  let bonusWeaponPercentage = new Decimal(formulaPartnerWeaponDamage(unlockItem.partnerType));
		  minValue = minValue.mul(bonusWeaponPercentage);
		  maxValue = maxValue.mul(bonusWeaponPercentage);
		}
		let enhanceLevelEquipmentData = enhanceLevelEquipment.find(item => item.id === unlockItem.enhanceLevel);
		let enhanceName = "";
		if(unlockItem.enhanceLevel > 0) enhanceName = "("+enhanceLevelEquipmentData.name+")";
		buttonValue = partnerId+"="+equipmentType+"="+itemId;
		
		actionType = checkNextActionItem(unlockItem);
		let actionDesc = "";
		switch(actionType.toLowerCase()){
		  case "upgrade":
		    let totalSphere = calculateItemSphere(unlockItem);
			let sellSphere = calculateSellSphere(totalSphere);
			actionDesc = '<img src="assets/images/gear.svg" class="image-size mb-05">'+numberFormat(totalSphere);
			break;
		  case "enhance":
		    let totalBlueprint = calculateItemBlueprint(unlockItem);
		    actionDesc = '<img src="assets/images/blueprint.svg" class="image-size mb-05">'+numberFormat(totalBlueprint);
			break;
		};
		
		appendDetailEquipmentStatDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 v-center-flex">';
		appendDetailEquipmentStatDiv += '<img src="assets/images/'+partnerType+'.svg" class="image-size" title="'+equipmentData.partnerType+'"></img>&nbsp'+ equipmentData.name + '</span></div>';
		appendDetailEquipmentStatDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6">'+benefitName+'&nbsp;:&nbsp;' + numberFormat(minValue) + '&nbsp;-&nbsp;' + numberFormat(maxValue) + '</div>';
		appendDetailEquipmentStatDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6">Upgrade Lv :&nbsp;'+unlockItem.upgradeLevel+'</div>';
		appendDetailEquipmentStatDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6">Enhance Lv :&nbsp;'+unlockItem.enhanceLevel+'&nbsp;'+enhanceName+'</div>';
		appendDetailEquipmentStatDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 px-0">';
		appendDetailEquipmentStatDiv += '<button id="unequip-item-button-'+partnerId+'" class="upgrade-level-button" value="' + buttonValue +'">Remove</button>';
		appendDetailEquipmentStatDiv +='</div>';
		appendDetailEquipmentStatDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 px-0">';
		appendDetailEquipmentStatDiv += '<button id="action-item-button-' + partnerId + '" class="upgrade-level-button" value="'+itemId+'">'+actionType+' - '+actionDesc+'</button>';
		appendDetailEquipmentStatDiv +='</div>';
	  }
	  let partnerData = partner.find(item => item.id === partnerId);
	  let availableGradeEquipment = gradeEquipment.filter(item => item.reqFloor <= hero.highestFloor);
	  let maxGradeId = availableGradeEquipment[availableGradeEquipment.length-1].id;
	  let listEquipment = hero.unlockItem.filter(item => item.storageType === "backpack" && (item.partnerType === partnerData.type || item.partnerType === "All") && item.gradeId <= maxGradeId);
		
	  if(listEquipment.length>0){
		appendDetailEquipmentStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 mt-1">';
		for(let i=0;i<listEquipment.length;i++){
		  let backpackMinValue = new Decimal(10).pow(listEquipment[i].exponentValue).mul(listEquipment[i].minValue);
		  let backpackMaxValue = new Decimal(10).pow(listEquipment[i].exponentValue).mul(listEquipment[i].maxValue);
		  let bonusWeaponPercentage = new Decimal(formulaPartnerWeaponDamage(listEquipment[i].partnerType));
		  backpackMinValue = backpackMinValue.mul(bonusWeaponPercentage);
		  backpackMaxValue = backpackMaxValue.mul(bonusWeaponPercentage);
		  buttonValue = partnerId+"="+equipmentType+"="+listEquipment[i].id;
		  let nextMinValue = backpackMinValue.sub(minValue);
		  let nextMaxValue = backpackMaxValue.sub(maxValue);
		  let compareMinValue;
		  let compareMaxValue;
			
		  if(nextMinValue.greaterThan(0)) compareMinValue = '<span class="good-info">(+'+numberFormat(nextMinValue)+")</span>";
		  else compareMinValue = '<span class="unlock-info">(-'+numberFormat(nextMinValue.mul(-1))+")</span>";
		    
		  if(nextMaxValue.greaterThan(0)) compareMaxValue = '<span class="good-info">(+'+numberFormat(nextMaxValue)+")</span>";
		  else compareMaxValue = '<span class="unlock-info">(-'+numberFormat(nextMaxValue.mul(-1))+")</span>";
			
		  appendDetailEquipmentStatDiv += '<div class="row col-xl-3 col-lg-4 col-md-4 col-sm-6 col-12 m-0 rounded-card">';
		  appendDetailEquipmentStatDiv += showEquipmentList(listEquipment[i],"backpack","",compareMinValue,compareMaxValue);
		  appendDetailEquipmentStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		  appendDetailEquipmentStatDiv += '<button id="equip-item-button-' + listEquipment[i].id + '" class="upgrade-level-button equip-item-button" value="' + buttonValue +'">Equip '+listEquipment[i].name+'</button>';
		  appendDetailEquipmentStatDiv += '</div>';
		  appendDetailEquipmentStatDiv += '</div>';
		}
		appendDetailEquipmentStatDiv += '</div>';
	  }else{
		appendDetailEquipmentStatDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 mt-1 unlock-info">No Available '+equipmentType+' to equip';
		appendDetailEquipmentStatDiv += '</div>';
	  }
		
	  componentAction("equipment-stat-div","updateClass","d-none,d-flex");
	  $("#equipment-stat-div").empty();
	  $("#equipment-stat-div").append(appendDetailEquipmentStatDiv).off('click','.equip-item-button').on('click','.equip-item-button',function(){
	    equipItemToPartner(this);
	  }).off('click','#unequip-item-button-' + partnerId).on('click','#unequip-item-button-' + partnerId,function(){
		unequipItemPartner(this.value);
	  }).off('click','#action-item-button-' + partnerId).on('click','#action-item-button-' + partnerId,function(){
		if(hero.settingConfirmSellUpgrade) confirmActionItem(this,unlockItem.storageType,actionType.toLowerCase()); 
		else actionItem(unlockItem.id+"="+actionType.toLowerCase());
	  });
	  checkCssSetting();
	  calcHeightScrollDiv("barracks");
	}
  };
  
  var showDetailPartnerEquipDiv = function(equipmentType,partnerId){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	if(highestUnlockPartner){
	  let itemId = highestUnlockPartner[equipmentType+"Id"];
	  let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	  let equipmentData;
	  if(unlockItem) equipmentData = equipment.find(item => item.id === unlockItem.itemId);
	  let equipmentImg = equipmentType+"-bw";
	  let equipmentUpgradeLevel = 0;
	  let equipmentEnhanceLevel = 0;
	  if(unlockItem){
	    equipmentImg = equipmentData.name.toLowerCase().split(" ").join("-");
		equipmentUpgradeLevel = "+"+unlockItem.upgradeLevel;
		equipmentEnhanceLevel = unlockItem.enhanceLevel;
	  }else{
		equipmentUpgradeLevel = "";
	  }
	 
	  let appendPartnerEquipmentDiv = '<div id="weapon-partner-div-'+partnerId+'" class="col-xl-15 col-lg-15 col-md-3 col-sm-3 col-3 m-0 h-fix text-center rounded-card cursor-button">';	  
	  appendPartnerEquipmentDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	  appendPartnerEquipmentDiv += '<div class="w-100 position-absolute left-align good-info">'+equipmentUpgradeLevel+'</div>';
	  appendPartnerEquipmentDiv += '<div class="w-100 image-equipment2">';
	  appendPartnerEquipmentDiv += '<img id="weapon-image-' + partnerId + '" src="assets/images/'+equipmentImg+'.svg" class="image-equipment2 container-img"></img>';
	  appendPartnerEquipmentDiv += '</div>';
	  if(equipmentEnhanceLevel > 0){
		appendPartnerEquipmentDiv += '<div class="w-100 middle-align star-height">';  
		let starImg = "silver-star";
		let loopStar = equipmentEnhanceLevel;
		if(loopStar > 5){
		  starImg = "golden-star";
		  loopStar -= 5;
		}
		for(let j=0;j<loopStar;j++){
		  appendPartnerEquipmentDiv += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
		}
		appendPartnerEquipmentDiv += '</div>';
	  }
	  appendPartnerEquipmentDiv += '</div>';
	  appendPartnerEquipmentDiv += '</div>';
	  
	  return appendPartnerEquipmentDiv;
	}else return "";
  };
  
  var showDetailPartnerEquipment = function(partnerId){
	partnerId = parseInt(partnerId,10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	if(highestUnlockPartner){
	  componentAction("partner-spirit-stone","updateClass",",d-none");
	  componentAction("partner-fragment","updateClass",",d-none");
	  componentAction("partner-sphere","updateClass","d-none,");
	  componentAction("partner-blueprint","updateClass","d-none,");
	  componentAction("partner-ability","updateClass",",d-none");
	  $("#detail-partner-area").empty();
	  let partnerData = partner.find(item => item.id === partnerId);
	  let partnerImg = partnerData.name.toLowerCase();
	  let upgradeLevel = "";
	  if(highestUnlockPartner.upgradeLevel>0) upgradeLevel = "+"+highestUnlockPartner.upgradeLevel;
	  let classImg = "my-2";
	  if(highestUnlockPartner.enhanceLevel > 0) classImg = "";
	  let enhanceLevelPartnerData = enhanceLevelPartner.find(item => item.id === highestUnlockPartner.enhanceLevel);
	  
	  let appendPartnerEquipmentDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0">';
	  
	  appendPartnerEquipmentDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 p-0">';
	  
	  appendPartnerEquipmentDiv += '<div class="w-100 position-absolute">';
	  appendPartnerEquipmentDiv += '<div class="float-middle partner-div">';
	  appendPartnerEquipmentDiv += '<div class="left-align good-info">'+upgradeLevel+'</div>';
	  appendPartnerEquipmentDiv += '</div>';
	  appendPartnerEquipmentDiv += '</div>';
	  appendPartnerEquipmentDiv += '<div id="partner-image-div" class="w-100 flex-middle-div">';
	  appendPartnerEquipmentDiv += '<img id="partner-image-' + partnerId + '" src="assets/images/'+partnerImg+'.svg" class="image-partner2 right-align "></img>';
	  appendPartnerEquipmentDiv += '</div>';
	  
	  if(highestUnlockPartner.enhanceLevel > 0){
	    appendPartnerEquipmentDiv += '<div class="w-100">';
	    appendPartnerEquipmentDiv += '<div class="star-div position-relative float-middle">';
	    appendPartnerEquipmentDiv += '<div class="w-100 middle-align star-height">';
	    let starImg = "silver-star";
	    let loopStar = highestUnlockPartner.enhanceLevel;
	    if(loopStar > 5){
	      starImg = "golden-star";
	      loopStar -= 5;
	    }
	    for(let j=0;j<loopStar;j++){
	      appendPartnerEquipmentDiv += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
	    }
	    appendPartnerEquipmentDiv += '</div>';
	    appendPartnerEquipmentDiv += '</div>';
	    appendPartnerEquipmentDiv += '</div>';
	  }
	  appendPartnerEquipmentDiv += '</div>';
	  
	  appendPartnerEquipmentDiv += '<div id="partner-equipment-list" class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 px-0">';
	  appendPartnerEquipmentDiv += showDetailPartnerEquipDiv("weapon",partnerId);
	  appendPartnerEquipmentDiv += '</div>';
	  
	  appendPartnerEquipmentDiv += '<div id="equipment-stat-div" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	  appendPartnerEquipmentDiv += '</div>';
	  appendPartnerEquipmentDiv += '</div>';
	  
	  $("#detail-partner-area").append(appendPartnerEquipmentDiv).off('click','.h-fix').on('click','.h-fix',function(){
		showDetailPartnerEquipmentStat(this);
	  });
	  
	  let partnerHeight = calcHeightDiv("weapon-partner-div-"+partnerId);
	  $("#partner-image-div").css({"height":(partnerHeight)+"px"});
	  
	  if(partnerHeight < 50){
		setTimeout(function() {
		  partnerHeight = calcHeightDiv("weapon-partner-div-"+partnerId);
		  $("#partner-image-div").css({"height":(partnerHeight)+"px"});
		}, 50);
	  }
	  checkCssSetting();
	  calcHeightScrollDiv("barracks");
	}
  };
  
  var closeAllDetailAbilityPartner = function(partnerId){
	partnerId = parseInt(partnerId,10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	for(let i=0;i<highestUnlockPartner.ability.length;i++){
	  let unlockPartnerAbility = highestUnlockPartner.ability[i];
	  let abilityId = unlockPartnerAbility.abilityId;
	  componentAction("show-hide-menu-"+partnerId+"-"+abilityId, "updateClass", "show-menu,hide-menu");
	  componentAction("ability-partner-area-"+partnerId+"-"+abilityId,"updateClass","d-flex,d-none");
	}
  };
  
  var showEachAbilityPartner = function(e){
	let divId = e.id.replace("ability-partner-title-","");
	let arrayValue = divId.split("-");
	let partnerId = arrayValue[0];
	let abilityId = arrayValue[1];
	if(!$("#ability-partner-area-"+divId).hasClass("d-none")){
	  componentAction("ability-partner-area-"+divId,"updateClass","d-flex,d-none");
	  componentAction("show-hide-menu-"+divId, "updateClass", "show-menu,hide-menu");
	}else{
	  closeAllDetailAbilityPartner(partnerId);
	  componentAction("ability-partner-area-"+divId,"updateClass","d-none,d-flex");
	  componentAction("show-hide-menu-"+divId, "updateClass", "hide-menu,show-menu");
	}
	scrollTheDiv("ability-partner-title-"+divId);
	scrollTheDiv("barracks-partner-area-"+partnerId);
	calcHeightScrollDiv("barracks");
  };
  
  var updatePartnerAbility = function(partnerId, abilityId){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let unlockPartnerAbility = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	if(unlockPartnerAbility){
	  let newAbilityBar = unlockPartnerAbility.exp / unlockPartnerAbility.maxExp * 100;
	  if(newAbilityBar > 100) newAbilityBar = 100;
	  componentAction ("ability-bar-"+partnerId+"-"+abilityId, "animate", newAbilityBar);
	  componentAction ("ability-exp-"+partnerId+"-"+abilityId, "replaceText", unlockPartnerAbility.exp);
	}
  };
  
  var showDetailPartnerAbillity = function(partnerId){
	partnerId = parseInt(partnerId,10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	if(highestUnlockPartner){
	  componentAction("partner-spirit-stone","updateClass",",d-none");
	  componentAction("partner-fragment","updateClass",",d-none");
	  componentAction("partner-sphere","updateClass",",d-none");
	  componentAction("partner-blueprint","updateClass",",d-none");
	  componentAction("partner-ability","updateClass","d-none,");
	  $("#detail-partner-area").empty();
	  if(highestUnlockPartner.ability.length > 0){
	    let disableSaveButton = 'disabled';
	    let hiddenSaveButton = '';
	    let hiddenActivateButton = '';
	    let textActivateAbility = '';
	    let activeBgColor = 'active-bg-color';
	    let abilityArea = 'd-none';
	    let iconPoint = 'd-none';
	    let trainingTimeClass = 'd-none';
		let appendDetailPartner = "";
		let borderTop = "border-top-only";
		
		appendDetailPartner = '<div id="detail-partner-ability-area" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0">';
		  for(let a=0;a<highestUnlockPartner.ability.length;a++){
			let unlockPartnerAbility = highestUnlockPartner.ability[a];
			let abilityId = unlockPartnerAbility.abilityId;
			disableSaveButton = 'disabled';
			hiddenSaveButton = '';
			hiddenActivateButton = '';
			if(a==0) borderTop = "";
			else borderTop = "border-top-only";
			
			let partnerAbilityData = partnerAbility.find(item => item.id === unlockPartnerAbility.abilityId);
			let abilityTypeData = abilityType.find(item => item.id === partnerAbilityData.abilityTypeId);
			if(unlockPartnerAbility.abilityPoint != unlockPartnerAbility.tempAbilityPoint){
				disableSaveButton = '';
				hiddenSaveButton = '';
				hiddenActivateButton = 'd-none';
			}else{
			  hiddenSaveButton = 'd-none';
			  hiddenActivateButton = '';
			}
			if(unlockPartnerAbility.isActive){
			  textActivateAbility = 'Deactivate';
			  activeBgColor = 'active-bg-color';
			}else{
			  textActivateAbility = 'Activate';
			  activeBgColor = 'unactive-bg-color';
			}
			if(unlockPartnerAbility.abilityPoint > 0) iconPoint = '';
			else iconPoint = 'd-none';
			
			if(unlockPartnerAbility.trainingTime > 0) trainingTimeClass = '';
			else trainingTimeClass = 'd-none';
			
			let showAccuracy = true;
			if(hero.type == "free" && unlockPartnerAbility.accuracy == setting.maxFreeLevelAccuracyAbility) showAccuracy = false;
			else if(hero.type == "premium" && unlockPartnerAbility.accuracy == setting.maxPremiumLevelAccuracyAbility) showAccuracy = false;
			
			let showMenuButton = 'hide-menu';
			let showHideImage = "plus";  
			if(showMenuButton == "show-menu") showHideImage = "minus";
			
			appendDetailPartner += '<div id="ability-partner-title-'+partnerId+'-'+abilityId+'" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 py-1 mx-0 px-0 '+borderTop+' v-center-flex ' + activeBgColor + ' cursor-button ability-partner-title">';
			appendDetailPartner += '<div class="col-xl-11 col-lg-11 col-md-11 col-sm-11 col-11 py-1 v-center-flex ">';
			appendDetailPartner += '<img src="assets/images/' + abilityTypeData.name.charAt(0).toLowerCase() + '.svg" class="image-size-static">&nbsp;';
			appendDetailPartner += '(' + abilityTypeData.name + ')&nbsp;' + partnerAbilityData.name + ' Lv&nbsp;';
			appendDetailPartner += '<span id="ability-partner-level-'+partnerId+'-'+abilityId+'">' + numberFormat(unlockPartnerAbility.abilityLevel) + '</span> /&nbsp;<span id="ability-partner-max-level-'+partnerId+'-'+abilityId+'">' + numberFormat(unlockPartnerAbility.maxLevel) + '</span>';
			appendDetailPartner += '&nbsp;&nbsp;<img id="icon-point-'+partnerId+'-'+abilityId+'" src="assets/images/upgrade.svg" class="image-size-2-static '+iconPoint+'"></img>';
			if(unlockPartnerAbility.newAbility) appendDetailPartner += '&nbsp;&nbsp;<img id="icon-new-'+partnerId+'-'+abilityId+'" src="assets/images/new.svg" class="image-size-2-static"></img>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '<div class="col-xl-1 col-lg-1 col-md-1 col-sm-1 col-1 v-center-flex">';
			appendDetailPartner += '<div id="show-hide-menu-'+partnerId+'-'+abilityId+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 ' + showMenuButton + '">';
			appendDetailPartner += '<img id="show-hide-image-' + partnerId + '" src="assets/images/'+showHideImage+'.svg" class="'+showMenuButton+' invisible"></img>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '</div>';

			appendDetailPartner += '<div id="ability-partner-area-'+partnerId+'-'+abilityId+'" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 ' + activeBgColor + ' ' + abilityArea + '">';
			appendDetailPartner += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 v-center-flex my-1">Accuracy : ';
			if(showAccuracy){
			  appendDetailPartner += '<button id="acc-all-minus-'+partnerId+'-'+abilityId+'" class="down-count partner-ability-stat btn-info" title="Down" value="'+partnerId+'='+abilityId+'=acc=allMinus"><<</button>';
			  appendDetailPartner += '<button id="acc-minus-'+partnerId+'-'+abilityId+'" class="down-count partner-ability-stat btn-info" title="Down" value="'+partnerId+'='+abilityId+'=acc=minus">-</button>';
			}
			appendDetailPartner += '<span id="acc-counter-'+partnerId+'-'+abilityId+'">'+unlockPartnerAbility.accuracy +'</span>%';
			if(showAccuracy){
			  appendDetailPartner += '<button id="acc-plus-'+partnerId+'-'+abilityId+'" class="up-count partner-ability-stat btn-info" title="Up" value="'+partnerId+'='+abilityId+'=acc=plus">+</button>';
			  appendDetailPartner += '<button id="acc-all-plus-'+partnerId+'-'+abilityId+'" class="up-count partner-ability-stat btn-info" title="Up" value="'+partnerId+'='+abilityId+'=acc=allPlus">>></button>';
			}
			appendDetailPartner += '</div>';
			appendDetailPartner += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 v-center-flex my-1">Damage : ';
			appendDetailPartner += '<button id="dam-all-minus-'+partnerId+'-'+abilityId+'" class="down-count partner-ability-stat btn-info" title="Down" value="'+partnerId+'='+abilityId+'=dam=allMinus"><<</button>';
			appendDetailPartner += '<button id="dam-minus-'+partnerId+'-'+abilityId+'" class="down-count partner-ability-stat btn-info" title="Down" value="'+partnerId+'='+abilityId+'=dam=minus">-</button>';
			appendDetailPartner += '<span id="dam-counter-'+partnerId+'-'+abilityId+'">'+unlockPartnerAbility.damage +'</span>%';
			appendDetailPartner += '<button id="dam-plus-'+partnerId+'-'+abilityId+'" class="up-count partner-ability-stat btn-info" title="Up" value="'+partnerId+'='+abilityId+'=dam=plus">+</button>';
			appendDetailPartner += '<button id="dam-all-plus-'+partnerId+'-'+abilityId+'" class="up-count partner-ability-stat btn-info" title="Up" value="'+partnerId+'='+abilityId+'=dam=allPlus">>></button>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 v-center-flex my-1">Interval : ' + unlockPartnerAbility.interval + '</div>';
			appendDetailPartner += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 v-center-flex my-1">Point :&nbsp;';
			appendDetailPartner += '<span id="ability-point-'+partnerId+'-'+abilityId+'">'+unlockPartnerAbility.abilityPoint + '</span></div>';
			appendDetailPartner += '<div id="training-time-div-'+partnerId+'-'+abilityId+'" class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 v-center-flex my-1 '+trainingTimeClass+'">Training Time :&nbsp;';
			appendDetailPartner += '<span id="training-time-text-'+partnerId+'-'+abilityId+'">'+offlineTimeText(unlockPartnerAbility.trainingTime) + '</span></div>';
			appendDetailPartner += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 animate-bar no-padding">';
			appendDetailPartner += '<div class="progress-bar-div">';
			appendDetailPartner += '<span id="ability-exp-'+partnerId+'-'+ abilityId + '">' + numberFormat(unlockPartnerAbility.exp) + '</span> / <span id="ability-max-exp-'+partnerId+'-'+abilityId + '">'+ numberFormat(unlockPartnerAbility.maxExp)+ '</span>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '<div id="ability-bar-'+partnerId+'-'+ abilityId + '" class="progress-bar ability-progress-bar-color">&nbsp;</div>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 px-0">';
			appendDetailPartner += '<button id="save-ability-partner-button-' + partnerId + '-' + abilityId + '" class="upgrade-level-button mt-1 save-ability ' + hiddenSaveButton + '" value="' + partnerId + '=' + abilityId + '"' + disableSaveButton + ' >Save</button>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-12 px-0 mb-1">';
			appendDetailPartner += '<button id="activate-ability-partner-button-' + partnerId + '-' + abilityId + '" class="upgrade-level-button mt-1 activate-ability ' + hiddenActivateButton + '" value="' + partnerId + '=' + abilityId + '">';
			appendDetailPartner += '<span id="activate-ability-partner-text-' + partnerId + '-' + abilityId + '">'+textActivateAbility+'</span>';
			appendDetailPartner += '</button>';
			appendDetailPartner += '</div>';
			appendDetailPartner += '</div>';
		  }
		  if(highestUnlockPartner.ability.length < 5){
			let unlockPartnerAbility = highestUnlockPartner.ability[highestUnlockPartner.ability.length-1];
			let partnerAbilityData = partnerAbility.find(item => item.id === unlockPartnerAbility.abilityId);
			appendDetailPartner += '<div id="unlock-ability-partner-'+partnerId+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 py-1 border-top-only v-center-grid unlock-info">';
			appendDetailPartner += 'Unlock New Ability at '+partnerAbilityData.name+' lv '+setting.reqLevelUnlockNewAbility;
			appendDetailPartner += '</div>';
		  }
		  appendDetailPartner += '</div>';
		  appendDetailPartner += '</div>';
		  $("#detail-partner-area").append(appendDetailPartner).off('click','.ability-partner-title').on('click','.ability-partner-title',function(){
		    showEachAbilityPartner(this); 
		  }).off('click','.partner-ability-stat').on('click','.partner-ability-stat',function(){
		    actionCounterValue(this);
		  }).off('click','.save-ability').on('click','.save-ability',function(){
		    confirmSaveAbilityPartner(this);
		  }).off('click','.activate-ability').on('click', '.activate-ability',function(){
		    confirmActivateAbility(this);
		  });
		  for(let a=0;a<highestUnlockPartner.ability.length;a++){
			let unlockPartnerAbility = highestUnlockPartner.ability[a];
			let abilityId = unlockPartnerAbility.abilityId;
			updatePartnerAbility(partnerId, abilityId);
		  }
	  }
	  calcHeightScrollDiv("barracks");	  
	}
  };
  
  var showDetailPartnerArea = function(e){
	let tabArray = e.id.replace("-partner-tab","").split("-");
	let tabName = tabArray[0];
	let partnerId = tabArray[1];

	closeAllDetailPartnerArea(partnerId);
	if(tabName != "") componentAction(tabName+"-partner-tab-"+partnerId,"updateClass","tab-button-unactive,tab-button-active");
	switch(tabName){
	  case "stat":
	    showDetailPartnerStat(partnerId);
		break;
	  case "equipment":
	    showDetailPartnerEquipment(partnerId);
		break;
	  case "ability":
	    showDetailPartnerAbillity(partnerId);
		break;	
	};
	calcHeightScrollDiv("barracks");
	checkCssSetting();
  };
  
  var showBarracksArea = function(runCalculate=false){
	showBarracksTab('barracks');
	componentAction("barracks-header3","updateClass","d-flex,d-none");
	componentAction("barracks-partner-area-"+compareDivId,"updateClass","selected-rounded-card,rounded-card");
	compareDivId = -1;
	if(runCalculate) calculateAllPartnerAbility();
	
	if(hero.highestFloor >= unlockNewFeatureFloor("barracks")){
	  componentAction("ability-unlock-div","clearText","");
	  let appendBarracksDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	  let tempHighestUnlockPartner = [];
	  if(hero.settingOrderPartner == "asc"){
		for(let i=0;i<hero.highestUnlockPartner.length;i++){
		  tempHighestUnlockPartner.push(hero.highestUnlockPartner[i]);
		}			
	  }else{
		for(let i=hero.highestUnlockPartner.length-1;i>=0;i--){
		  tempHighestUnlockPartner.push(hero.highestUnlockPartner[i]);
		}  
	  }
	  for(let i=0;i<tempHighestUnlockPartner.length;i++){
	    let partnerId = tempHighestUnlockPartner[i].id;
	    let highestUnlockPartner = tempHighestUnlockPartner[i];
	    let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	    let partnerData = partner.find(item => item.id === partnerId);
	    let partnerStatus = '';
		let disableSaveButton = 'disabled';
		let hiddenSaveButton = '';
		let hiddenActivateButton = '';
		let textActivateAbility = '';
		let activeBgColor = 'active-bg-color';
		let showMenuButton = 'hide-menu';
		let abilityArea = 'd-none';
		let iconPoint = 'd-none';
		let trainingTimeClass = 'd-none';

	    if( !$( "#barracks-partner-area-" + partnerId ).length){
		  appendBarracksDiv += showPartnerList(highestUnlockPartner);
	    }else{
		  componentAction("partner-status-text-"+partnerId,"replaceText",highestUnlockPartner.status);
		  $("#partner-status-image-"+partnerId).attr("src", "assets/images/"+highestUnlockPartner.status.toLowerCase()+".svg");
	    }
	  }
	  appendBarracksDiv += '</div>';
	  if(appendBarracksDiv  != ""){
		let infoBarracksDiv = "";
		if( !$( "#barracks-info" ).length){
		  $( "#barracks-info" ).remove();
	      infoBarracksDiv = '<div id="barracks-info" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-2 pt-1 unlock-info">';
		  infoBarracksDiv += 'Please click the elite to see the detail.';
	      infoBarracksDiv += '</div>';
	    }
		if(hero.settingOrderPartner == "asc"){
		  if(infoBarracksDiv != "") $("#barracks-area-div").append(infoBarracksDiv);
		  $("#barracks-area-div").append(appendBarracksDiv).off('click','.barracks-partner-area').on('click','.barracks-partner-area',function(){
		    showDetailPartner(this); 
		  });
		}else{
		  $("#barracks-area-div").append(appendBarracksDiv).off('click','.barracks-partner-area').on('click','.barracks-partner-area',function(){
		    showDetailPartner(this); 
		  });
		  if(infoBarracksDiv != "") $("#barracks-area-div").prepend(infoBarracksDiv);
		}
	    for(let i=0;i<hero.highestUnlockPartner.length;i++){
	      let partnerId = hero.highestUnlockPartner[i].id;
	      let highestUnlockPartner = hero.highestUnlockPartner[i];
		
	      for(let a=0;a<highestUnlockPartner.ability.length;a++){
		    let unlockPartnerAbility = highestUnlockPartner.ability[a];
		    let abilityId = unlockPartnerAbility.abilityId;
		
		    let newAbilityBar = unlockPartnerAbility.exp / unlockPartnerAbility.maxExp * 100;
	        if(newAbilityBar > 100) newAbilityBar = 100;
	        componentAction ("ability-bar-"+partnerId+"-"+abilityId, "animate", newAbilityBar);
	      }
	    }
	  }
	}else{
	  if( !$("#ability-unlock-div").length){	
	    let unlockInformation = "Unlock this barracks at stage "+unlockNewFeatureFloor("barracks");
	    let appendBarracksDiv = '<div id="ability-unlock-div" class="rounded-card middle-align unlock-info">' + unlockInformation + '</div>';
	    $("#barracks-area-div").append(appendBarracksDiv);
	  }
	}
	calcHeightScrollDiv("barracks");
	checkCssSetting();
  };
  
  var calcArmyStat = function(armyId){
	let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
	
	let armyHp = 0;
	let armyMaxHp = 0;
	let armyAtk = 0;
	let armyDef = 0;
	let armyAgi = 0;
	let armyDex = 0;
	let armyCritChance = 0;
	let armyCritDmg = 0;
	let armyCritDef = 0;
	
	if(unlockArmyStat){
	  armyHp = unlockArmyStat.hp;
	  armyMaxHp = unlockArmyStat.maxHp;
	  armyAtk = unlockArmyStat.atk;
	  armyDef = unlockArmyStat.def;
	  armyAgi = unlockArmyStat.agi;
	  armyDex = unlockArmyStat.dex;
	  armyCritChance = unlockArmyStat.critChance;
	  armyCritDmg = unlockArmyStat.critDmg;
	  armyCritDef = unlockArmyStat.critDef;
	}
	
	let newObjStatArmy = {
	  armyHp: armyHp,
	  armyMaxHp: armyMaxHp,
	  armyAtk: armyAtk,
	  armyDef: armyDef,
	  armyAgi: armyAgi,
	  armyDex: armyDex,
	  armyCritChance: armyCritChance,
	  armyCritDmg: armyCritDmg,
	  armyCritDef: armyCritDef,
	};
	
	return newObjStatArmy;
  };
  
  var checkCooldownQuestTimer = function(afterOffline=false){
	let runningArmy = hero.unlockArmy.filter(item => item.caveId >= 0 && item.caveSlot >= 0);
	let countArmy = runningArmy.length;
	if(countArmy > 0){
	  for(let i=0;i<countArmy;i++){
	    if(runningArmy[i].caveId >= 0) startQuestTimer(runningArmy[i].id,afterOffline);
	  }
	}else checkCooldownAdventureTimer(true);
  };
  
  var calcQuestTime = function(armyId){
	let questTimer = 0;
	let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	if(unlockArmy) questTimer = Math.ceil((unlockArmy.endQuestTime - Date.now()) / 1000);
	return questTimer;
  };
  
  var startQuestTimer = function(armyId,afterOffline=false){
	let questTimer = calcQuestTime(armyId);
	let questInterval;
	if(questTimer > 0){
	  let objQuestInterval = questTimerInterval.find(item => item.id === armyId);
	  
	  if(!objQuestInterval){
	    questInterval = setTimeout(function loopCooldownQuestTimer() {
		  questTimer = calcQuestTime(armyId);
	      componentAction ("army-quest-hyphen-"+armyId, "replaceText", "-");
	      componentAction ("army-quest-timer-"+armyId, "replaceText", offlineTimeText(questTimer));

	      if(questTimer <= 0) stopQuestTimer(armyId,afterOffline);
		  else{
			if(questInterval) questInterval = clearTimeout(questInterval);
			questInterval = setTimeout(loopCooldownQuestTimer, (1000/setting.gameSpeed));
			questTimerInterval.interval = questInterval;
		  }
	    },(1000/setting.gameSpeed));
	    let newObjInterval = {
	      id: armyId,
		  interval: questInterval
	    };
	    questTimerInterval.push(newObjInterval);
	  }else questInterval = objQuestInterval.interval;  
	}else stopQuestTimer(armyId,afterOffline);
	saveGame();
  };
  
  var stopQuestTimer = function(armyId,afterOffline=false){
	let deleteIndex = questTimerInterval.findIndex(function(e){
	  return e.id === armyId;
	});
	if (deleteIndex !== -1) questTimerInterval.splice(deleteIndex, 1);

	let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	let arrayStatArmy = calcArmyStat(armyId);
	let armyHp =  arrayStatArmy["armyHp"];
	let armyMaxHp =  arrayStatArmy["armyMaxHp"];
	let armyAtk =  arrayStatArmy["armyAtk"];
	let armyDef =  arrayStatArmy["armyDef"];
	let armyAgi =  arrayStatArmy["armyAgi"];
	let armyDex =  arrayStatArmy["armyDex"];
	let armyCritChance =  arrayStatArmy["armyCritChance"];
	let armyCritDmg =  arrayStatArmy["armyCritDmg"];
	let armyCritDef =  arrayStatArmy["armyCritDef"];

	let caveHp = 0;
	let caveAtk = 0;
	let caveDef = 0;
	let caveAgi = 0;
	let caveDex = 0;
	
	let caveId = unlockArmy.caveId;
	let caveData = cave.find(item => item.id === caveId);
	if(caveData){
	  caveHp = caveData.hp;
	  caveAtk = randomBetweenNumber(caveData.minAtk,caveData.maxAtk);
	  caveDef = randomBetweenNumber(caveData.minDef,caveData.maxDef);
	  caveAgi = caveData.agi;
	  caveDex = caveData.dex;
	}
	
	let defaultArmyDamage = armyAtk - caveDef;
	let defaultCaveDamage = caveAtk - armyDef;
	let armyDamage = 0;
	let caveDamage = 0;
	let hitCounter = 0;
	
	while(armyHp > 0 && caveHp > 0 && hitCounter < 100){
	  armyDamage = defaultArmyDamage;
	  if(armyDamage > 0){
		if(armyDex >= caveAgi){
		  if(armyCritChance > 0){
		    let critRandom = Math.random() * 100;
		    if(critRandom >= armyCritChance) armyDamage = (armyCritDmg + 100 - setting.defaultCaveCritDef) * armyDamage / 100;
		  }
		}else armyDamage = 0;
		armyDamage = Math.ceil(armyDamage * 5);
	  }else armyDamage = 1;
	  
	  caveDamage = defaultCaveDamage;
	  if(caveDamage <= 0) caveDamage = 0;
	  
	  if(caveDamage > 0){
		if(caveDex >= armyAgi){
		  let critRandom = Math.random() * 100;
		  if(critRandom >= setting.defaultCaveCritChance) caveDamage = (setting.defaultCaveCritDamage + 100 - armyCritDef) * caveDamage / 100;
	    }else caveDamage = 0;
		caveDamage = Math.ceil(caveDamage * 3);
	  }else caveDamage = 1;

	  armyHp -= caveDamage;
	  caveHp -= armyDamage;
	  hitCounter+=1;
	}
	
	let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
	if(armyHp <= 0){
	  armyHp = 0;
	  unlockArmy.status = "Died";
	}else unlockArmy.status = "Resting";
	
	unlockArmyStat.hp = armyHp;
	if(armyHp < armyMaxHp) unlockArmy.canHeal = true;
	unlockArmy.endQuestTime = 0;
	unlockArmy.collectReward = false;
	
	if(unlockArmy.statusQuest == "" || unlockArmy.statusQuest == undefined){
	  updateCampArmyStatus(armyId);
	  updateCaveStatus(caveId);
	  updateCaveUsedSlot(caveId,"-");
	}
	
	if(armyHp > 0){
	  if(caveHp > 0 && hitCounter >= 100)unlockArmy.statusQuest = "Failed";
	  else unlockArmy.statusQuest = "Complete";
	}else unlockArmy.statusQuest = "Died";
	
	checkQuestStatus(afterOffline);
	checkAvailableHealItem();
	saveGame();
  };
  
  var checkQuestStatus = function(afterOffline=false){
	let countFinishQuest = 0;
	let arrayQuestValue = [];
    for(let i=0;i<hero.unlockArmy.length;i++){
	  let statusQuest = "";
	  if(hero.unlockArmy[i].statusQuest != "" && hero.unlockArmy[i].statusQuest != undefined) statusQuest = hero.unlockArmy[i].statusQuest.toLowerCase();
	  let collectReward = hero.unlockArmy[i].collectReward;
	  if (statusQuest != '' && !collectReward){
		let caveId = hero.unlockArmy[i].caveId;
		let caveSlot = hero.unlockArmy[i].caveSlot;
		
		arrayQuestValue.push(hero.unlockArmy[i].id+"="+caveId+"="+caveSlot);
		countFinishQuest++;
	  }
	}
	
	if(afterOffline){
	  if(!($("#modalOfflineForm").data('bs.modal') || {})._isShown ) afterOffline = false;
	}
	if(countFinishQuest > 0 && !afterOffline){
	  let questResult = "";
	  if(countFinishQuest == 1){
		let questValue = arrayQuestValue[0];
		let arrayString = questValue.split("=");
		let armyId = parseInt(arrayString[0],10);
		let caveId = parseInt(arrayString[1],10);
		let caveSlot = parseInt(arrayString[2],10);
		
		let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
		questResult = generateQuestResult(unlockArmy,caveId);
	  }else{
		for(let i=0;i<countFinishQuest;i++){
		  let questValue = arrayQuestValue[i];
		  let arrayString = questValue.split("=");
		  let armyId = parseInt(arrayString[0],10);
		  let caveId = parseInt(arrayString[1],10);
		  let caveSlot = parseInt(arrayString[2],10);
		  let caveData = cave.find(item => item.id === caveId);
		  let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
		  if(questResult != "") questResult += "\n\n";
		  questResult += generateQuestResult(unlockArmy,caveId);
		}
	  }
	  if(($("#modalRewardQuest").data('bs.modal') || {})._isShown ){
		$("#questReward").append("\n\n"+questResult);  
	  }else{
	    $("#modalRewardQuest").modal("show");
	    componentAction ("questReward", "replaceText", questResult);
	  }
	}
  };
  
  var generateQuestResult = function(unlockArmy,caveId){
	let questResult;
	let caveData = cave.find(item => item.id === caveId);
	switch(unlockArmy.statusQuest.toLowerCase()){
	  case "complete":
	    let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
		unlockArmyStat.exp += caveData.exp;
		
	    while(unlockArmyStat.exp >= unlockArmyStat.maxExp){
		  unlockArmyStat.exp -= unlockArmyStat.maxExp;
		  unlockArmyStat.level += 1;
		  unlockArmyStat.point += 3;
		  unlockArmyStat.maxExp += 5;
		  resetArmyStat(unlockArmyStat);
	    }
	  
		questResult = "Congratulations, your army named "+unlockArmy.name+" has successfully completed the "+caveData.name+" quest with the following results :\n";
		questResult += "Gain Exp : "+numberFormat(caveData.exp)+" exp \n";
		questResult += generateCaveDrop(caveId,true);
		break;
	  case "failed":
		questResult = "Sorry, your army named "+unlockArmy.name+" failed to finish the "+caveData.name+" quest \n";
		questResult += "Try to increase army stat before run next quest";
		break;
	  case "died":
		questResult = "Sorry, your army named "+unlockArmy.name+" was died in "+caveData.name+" quest \n";
		questResult += "You can heal using milk or coffee from the bartender and try to increase army stat before run next quest";
		break;
	}
	unlockArmy.statusQuest = "";
	unlockArmy.collectReward = "";
	unlockArmy.caveId = -1;
	unlockArmy.caveSlot = -1;
	
	return questResult;
  };
  
  var generateCaveDrop = function(caveId,returnText=false){
	let unlockCave = cave.find(item => item.id === caveId);
	let generateText = "Gain Items : ";
	if(unlockCave){
	  let caveQtyDrop = Math.floor(Math.random() * unlockCave.dropMaxQty)+1;
	  let limitRandom = 100 - unlockCave.dropMinPercentage;
	  let arrayDropMaterial = material.filter(item => item.type === "ingredient" && item.percentage >= unlockCave.dropMinPercentage);
	  for(let i=0;i<caveQtyDrop;i++){
		let selectedDropMaterial = arrayDropMaterial[Math.floor(Math.random() * arrayDropMaterial.length)];
		if(returnText){
		  if(i>0) generateText += ", ";
		  generateText += selectedDropMaterial.name;
		}
		insertNewUnlockItem(selectedDropMaterial.id,1,selectedDropMaterial.type,selectedDropMaterial.name,"all","backpack");
	  }
	}
	if(returnText) return generateText;
  };
  
  var updateCampArmyStatus = function(armyId){
	if(!$("#camp-area-div").hasClass("d-none")){
	  let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	  let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
	  let armyStatus = unlockArmy.status;
	  let percentageHp = (unlockArmyStat.hp / unlockArmyStat.maxHp) * 100;
	  
	  $("#img-army-status-"+armyId).attr("src", "assets/images/"+armyStatus.toLowerCase().replace(" ","-")+".svg");
	  $("#img-army-status-"+armyId).attr("title", armyStatus);
	  componentAction("army-status-"+armyId,"replaceText",armyStatus);
	  componentAction("army-level-"+armyId,"replaceText",unlockArmyStat.level);
	  componentAction("point-"+armyId,"replaceText",unlockArmyStat.point);
	  componentAction("hp-"+armyId,"replaceText",unlockArmyStat.hp);
	  componentAction("maxHp-"+armyId,"replaceText",unlockArmyStat.maxHp);
	  componentAction("army-exp-"+armyId,"replaceText",unlockArmyStat.exp);
	  componentAction("army-maxExp-"+armyId,"replaceText",unlockArmyStat.maxExp);
	  componentAction("army-exp2-"+armyId,"replaceText",unlockArmyStat.exp);
	  componentAction("army-maxExp2-"+armyId,"replaceText",unlockArmyStat.maxExp);
	  
	  if(percentageHp <= hero.settingDangerPercentageHP){
		componentAction("img-warning-"+armyId,"addClass","d-none");
		componentAction("img-danger-"+armyId,"removeClass","d-none");
	  }else if(percentageHp <= hero.settingWarningPercentageHP){
		componentAction("img-warning-"+armyId,"removeClass","d-none");
		componentAction("img-danger-"+armyId,"addClass","d-none");  
	  }else{
		componentAction("img-warning-"+armyId,"addClass","d-none");
		componentAction("img-danger-"+armyId,"addClass","d-none");  
	  }	  
	  
	  let newArmyExpBar = unlockArmyStat.exp / unlockArmyStat.maxExp * 100;
	  componentAction ("army-exp-bar-"+armyId, "animate", newArmyExpBar);
	  
	  if(unlockArmyStat.point > 0){
		  componentAction("hp-minus-"+armyId,"removeClass","d-none");
		  componentAction("hp-plus-"+armyId,"removeClass","d-none");
		  componentAction("atk-minus-"+armyId,"removeClass","d-none");
		  componentAction("atk-plus-"+armyId,"removeClass","d-none");
		  componentAction("def-minus-"+armyId,"removeClass","d-none");
		  componentAction("def-plus-"+armyId,"removeClass","d-none");
		  componentAction("agi-minus-"+armyId,"removeClass","d-none");
		  componentAction("agi-plus-"+armyId,"removeClass","d-none");
		  componentAction("dex-minus-"+armyId,"removeClass","d-none");
		  componentAction("dex-plus-"+armyId,"removeClass","d-none");
		  componentAction("crit-chance-minus-"+armyId,"removeClass","d-none");
		  componentAction("crit-chance-plus-"+armyId,"removeClass","d-none");
		  componentAction("save-army-stat-"+armyId,"removeClass","d-none");
		  componentAction("reset-army-stat-"+armyId,"removeClass","d-none");
		}else{
		  componentAction("hp-minus-"+armyId,"addClass","d-none");
		  componentAction("hp-plus-"+armyId,"addClass","d-none");
		  componentAction("atk-minus-"+armyId,"addClass","d-none");
		  componentAction("atk-plus-"+armyId,"addClass","d-none");
		  componentAction("def-minus-"+armyId,"addClass","d-none");
		  componentAction("def-plus-"+armyId,"addClass","d-none");
		  componentAction("agi-minus-"+armyId,"addClass","d-none");
		  componentAction("agi-plus-"+armyId,"addClass","d-none");
		  componentAction("dex-minus-"+armyId,"addClass","d-none");
		  componentAction("dex-plus-"+armyId,"addClass","d-none");
		  componentAction("crit-chance-minus-"+armyId,"addClass","d-none");
		  componentAction("crit-chance-plus-"+armyId,"addClass","d-none");
		  componentAction("save-army-stat-"+armyId,"addClass","d-none");
		  componentAction("reset-army-stat-"+armyId,"addClass","d-none");
		}
	  
	  if(armyStatus == "Resting" || armyStatus == "Died"){
		componentAction("army-quest-timer-"+armyId,"replaceText","");
		componentAction("army-quest-hyphen-"+armyId,"replaceText","");
	  }else{
		let armyQuestTimer = offlineTimeText(calcQuestTime(armyId));
	    if(armyQuestTimer != "") componentAction("army-quest-timer-"+armyId,"replaceText",armyQuestTimer);
		componentAction("army-quest-hyphen-"+armyId,"replaceText","-");
	  }
	}
  };
  
  var updateCaveStatus = function(caveId){
	if(!$("#camp-"+caveId).hasClass("d-none")){
	  let unlockCave = hero.unlockCave.find(item => item.id === caveId);
	  for(let j=0;j<setting.maxCaveOpenSlot;j++){
		let slotName = "";
		let unlockArmy = hero.unlockArmy.find(item => item.caveId === caveId && item.caveSlot === j);
		if(unlockArmy) slotName = unlockArmy.name;
		else{
		  if(j < unlockCave.availableSlot) slotName = "------";
		}
	    if(slotName != ""){
		  if( $( "#popup-cave-slot-"+caveId+"-"+j ).length) componentAction("popup-cave-slot-"+caveId+"-"+j,"replaceText",slotName);
		  if( $( "#cave-slot-"+caveId+"-"+j ).length) componentAction("cave-slot-"+caveId+"-"+j,"replaceText",slotName);
		}
	  }
	}
  };
  
  var showEmptyArmy = function(pageName){
	let peopleData = people.find(item => item.type === "story" && item.gender === "F");
	let unlockInformation = "Ask Gaby in the tavern to hire the army. <br/> She sometimes comes in the "+peopleData.appearance+" (16.00 - 24.00).";
	return '<div id="'+pageName+'-empty-army-div" class="rounded-card middle-align unlock-info">' + unlockInformation + '</div>';  
  };
  
  var showCampArea = function(){
	showBarracksTab('camp');
	
	if(hero.highestFloor >= unlockNewFeatureFloor("camp")){
	  if(hero.countArmy > 0){
		let armyId = -1;
		let appendCampDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
		if($("#army-unlock-div").length) $("#army-unlock-div").remove();
		
		for(let i=0;i<hero.countArmy;i++){
		  let arrayStatArmy = calcArmyStat(i);
		  let unlockArmy = hero.unlockArmy[i];
		  let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
		  resetArmyStat(unlockArmyStat);
		  let armyHp =  arrayStatArmy["armyHp"];
		  let armyMaxHp =  arrayStatArmy["armyMaxHp"];
		  let percentageHp = (armyHp / armyMaxHp) * 100;
		  let armyAtk =  arrayStatArmy["armyAtk"];
		  let armyDef =  arrayStatArmy["armyDef"];
		  let armyAgi =  arrayStatArmy["armyAgi"];
		  let armyDex =  arrayStatArmy["armyDex"];
		  let armyCritChance =  arrayStatArmy["armyCritChance"];
		  let armyCritDmg =  arrayStatArmy["armyCritDmg"];
		  let armyCritDef =  arrayStatArmy["armyCritDef"];
		  let armyStatus = unlockArmy.status;
		  let armyQuestTimer = "";
		  let armyQuestHyphen = "";
		  
		  armyId = i;
		  let buttonClass = "d-none";
		  if(unlockArmyStat.point > 0) buttonClass = "";		  
		  if(unlockArmy.caveId >= 0){
			let caveData = cave.find(item => item.id === unlockArmy.caveId);
			armyStatus = armyStatus+" "+caveData.name;
			armyQuestHyphen = "-";
			armyQuestTimer = offlineTimeText(calcQuestTime(armyId));
			startQuestTimer(armyId);
		  }
		  let warningClass = "d-none";
		  let dangerClass = "d-none";
		  
		  if(percentageHp <= hero.settingDangerPercentageHP) dangerClass = "";
		  else if(percentageHp <= hero.settingWarningPercentageHP) warningClass = "";
		  
		  if( !$( "#camp-army-area-" + i ).length){
		    appendCampDiv += '<div class="row col-xl-4 col-lg-6 col-md-6 col-sm-6 col-12 p-1">';
		    appendCampDiv += '<div id="camp-army-area-' + i + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0 camp-army-area">';
		    appendCampDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-1">';
			appendCampDiv += '<img src="assets/images/'+unlockArmy.currentType.toLowerCase()+'.svg" class="image-size" title="'+unlockArmy.currentType.toLowerCase()+'"></img>&nbsp;'+unlockArmy.name+'&nbsp;-&nbsp;Lv&nbsp;<span id="army-level-'+i+'">'+unlockArmyStat.level+'</span>&nbsp;&nbsp;&nbsp;';
		    appendCampDiv += '<img id="img-army-status-' + i + '" src="assets/images/'+unlockArmy.status.toLowerCase().replace(" ","-")+'.svg" class="image-size" title="'+unlockArmy.status.toLowerCase().replace(" ","-")+'"></img>&nbsp;<span id="army-status-'+i+'">'+armyStatus+'</span>&nbsp;<span id="army-quest-hyphen-'+i+'">'+armyQuestHyphen+'</span>&nbsp;<span id="army-quest-timer-'+i+'">'+armyQuestTimer+'</span>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-7 col-lg-7 col-md-7 col-sm-7 col-7 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/life.svg" class="image-size" title="HP"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			
			  appendCampDiv += '<button id="hp-minus-'+i+'" class="down-count army-stat-count btn-info '+buttonClass+'" title="Down" value="'+i+'=hp=minus">-</button>';
			
			appendCampDiv += '&nbsp;<span id="hp-'+i+'">'+numberFormat(armyHp)+'</span>&nbsp;/&nbsp;<span id="maxHp-'+i+'">'+numberFormat(armyMaxHp)+'</span>&nbsp;';
			
			  appendCampDiv += '<button id="hp-plus-'+i+'" class="up-count army-stat-count btn-info '+buttonClass+'" title="Up" value="'+i+'=hp=plus">+</button>&nbsp;';
			
			appendCampDiv += '<img id="img-warning-' + i + '" src="assets/images/warning.svg" class="image-size '+warningClass+'" title="Warning"></img>';
			appendCampDiv += '<img id="img-danger-' + i + '" src="assets/images/danger.svg" class="image-size '+dangerClass+'" title="Danger"></img>';
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/attack.svg" class="image-size" title="Attack"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="atk-minus-'+i+'" class="down-count army-stat-count btn-info '+buttonClass+'" title="Down" value="'+i+'=atk=minus">-</button>';
			}
			appendCampDiv += '&nbsp;<span id="atk-'+i+'">'+numberFormat(armyAtk)+'</span>&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="atk-plus-'+i+'" class="up-count army-stat-count btn-info '+buttonClass+'" title="Up" value="'+i+'=atk=plus">+</button>';
			}
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-7 col-lg-7 col-md-7 col-sm-7 col-7 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/defence.svg" class="image-size" title="Defence"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="def-minus-'+i+'" class="down-count army-stat-count btn-info '+buttonClass+'" title="Down" value="'+i+'=def=minus">-</button>';
			}
			appendCampDiv += '&nbsp;<span id="def-'+i+'">'+numberFormat(armyDef)+'</span>&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="def-plus-'+i+'" class="up-count army-stat-count btn-info '+buttonClass+'" title="Up" value="'+i+'=def=plus">+</button>';
			}
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/agility.svg" class="image-size" title="Agility"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="agi-minus-'+i+'" class="down-count army-stat-count btn-info '+buttonClass+'" title="Down" value="'+i+'=agi=minus">-</button>';
			}
			appendCampDiv += '&nbsp;<span id="agi-'+i+'">'+numberFormat(armyAgi)+'</span>&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="agi-plus-'+i+'" class="up-count army-stat-count btn-info '+buttonClass+'" title="Up" value="'+i+'=agi=plus">+</button>';
			}
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-7 col-lg-7 col-md-7 col-sm-7 col-7 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/dexterity.svg" class="image-size" title="Dexterity"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="dex-minus-'+i+'" class="down-count army-stat-count btn-info '+buttonClass+'" title="Down" value="'+i+'=dex=minus">-</button>';
			}
			appendCampDiv += '&nbsp;<span id="dex-'+i+'">'+numberFormat(armyDex)+'</span>&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="dex-plus-'+i+'" class="up-count army-stat-count btn-info '+buttonClass+'" title="Up" value="'+i+'=dex=plus">+</button>';
			}
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/crit-chance.svg" class="image-size" title="Crit Chance"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="crit-chance-minus-'+i+'" class="down-count army-stat-count btn-info '+buttonClass+'" title="Down" value="'+i+'=crit=minus">-</button>';
			}
			appendCampDiv += '&nbsp;<span id="crit-chance-'+i+'">'+numberFormat(armyCritChance)+'</span>&nbsp;';
			if(unlockArmyStat.point > 0){
			  appendCampDiv += '<button id="crit-chance-plus-'+i+'" class="up-count army-stat-count btn-info '+buttonClass+'" title="Up" value="'+i+'=crit=plus">+</button>';
			}
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-7 col-lg-7 col-md-7 col-sm-7 col-7 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/crit-dmg.svg" class="image-size" title="Crit Dmg"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			appendCampDiv += '&nbsp;<span id="crit-damage-'+i+'">'+numberFormat(armyCritDmg)+'</span>&nbsp;';
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			
			appendCampDiv += '<div class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0"><img src="assets/images/crit-def.svg" class="image-size" title="Crit Def"></img></div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			appendCampDiv += '&nbsp;<span id="crit-defence-'+i+'">'+numberFormat(armyCritDef)+'</span>&nbsp;';
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';

			appendCampDiv += '<div class="row col-xl-7 col-lg-7 col-md-7 col-sm-7 col-7 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0">Point</div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			appendCampDiv += '&nbsp;<span id="point-'+i+'">'+numberFormat(unlockArmyStat.point)+'</span>';
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			
			appendCampDiv += '<div class="row col-xl-5 col-lg-5 col-md-5 col-sm-5 col-5 mb-1">';
			appendCampDiv += '<div class="row col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 v-center-flex px-0">Exp</div>';
			appendCampDiv += '<div class="row col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 v-center-flex px-0">:&nbsp;';
			appendCampDiv += '&nbsp;<span id="army-exp-'+i+'">'+numberFormat(unlockArmyStat.exp)+'</span>&nbsp;/&nbsp;<span id="army-maxExp-'+i+'">'+numberFormat(unlockArmyStat.maxExp)+'</span>&nbsp;';
			
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			
			appendCampDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-1 animate-bar no-padding">';
			appendCampDiv += '<div class="progress-bar-div">';
			appendCampDiv += '<span id="army-exp2-' + i + '">' + numberFormat(unlockArmyStat.exp) + '</span> / <span id="army-maxExp2-' + i + '">'+ numberFormat(unlockArmyStat.maxExp)+ '</span>';
			appendCampDiv += '</div>';
			
			let newArmyExpBar = unlockArmyStat.exp / unlockArmyStat.maxExp * 100;
			
			appendCampDiv += '<div id="army-exp-bar-' + i + '" class="progress-bar ability-progress-bar-color" style="width:'+newArmyExpBar+'%">&nbsp;</div>';
			appendCampDiv += '</div>';
			
			appendCampDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 animate-bar no-padding">';
			appendCampDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 no-padding">';
			appendCampDiv += '<button id="save-army-stat-'+i+'" class="btn-primary upgrade-level-button action-army-stat '+buttonClass+'" title="Save" value="save='+i+'">Save</button>';
			appendCampDiv += '</div>';
			appendCampDiv += '<div class="row col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 no-padding">';
			appendCampDiv += '<button id="reset-army-stat-'+i+'" class="btn-secondary upgrade-level-button action-army-stat '+buttonClass+'" title="Reset" value="reset='+i+'">Reset</button>';
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
			
			appendCampDiv += '</div>';
			appendCampDiv += '</div>';
		  }else{
			updateCampArmyStatus(armyId);
		  }
		}
		appendCampDiv += '</div>';
		let infoArmyDiv = "";
		if( !$( "#army-info" ).length && appendCampDiv != ""){
		  $( "#army-info" ).remove();
		  infoArmyDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-gutters v-center-flex">';
	      infoArmyDiv += '<div id="army-info" class="col-xl-11 col-lg-11 col-md-11 col-sm-11 col-11 px-2 pt-1 unlock-info">';
		  infoArmyDiv += 'Please click the army to see the detail.';
	      infoArmyDiv += '</div>';
		  infoArmyDiv += '<div class="col-xl-1 col-lg-1 col-md-1 col-sm-1 col-1 v-center-flex">';
		  infoArmyDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 right-content v-center-flex">';
		  infoArmyDiv += '<img id="army-info2" src="assets/images/info-color.svg" class="image-size cursor-button">';
		  infoArmyDiv += '</div>';
		  infoArmyDiv += '</div>';
		  infoArmyDiv += '</div>';
		  $("#camp-area-div").append(infoArmyDiv).off("click","#army-info2").on("click","#army-info2",function(){
		    showArmyStatInfo();
		  });
	    }
		if(appendCampDiv != "") $("#camp-area-div").append(appendCampDiv).off("click",".army-stat-count").on("click",".army-stat-count",function(){
		  updateArmyStat(this);
		}).off("click",".action-army-stat").on("click",".action-army-stat",function(){
		  actionArmyStat(this);
		});
	  }else{
		if( !$("#camp-empty-army-div").length){
	      let appendCampDiv = showEmptyArmy("camp");
	      $("#camp-area-div").append(appendCampDiv);
	    }
	  }		  
	}else{
	  if( !$("#camp-unlock-div").length){	
	    let unlockInformation = "Unlock this army camp at stage "+unlockNewFeatureFloor("camp");
	    let appendCampDiv = '<div id="camp-unlock-div" class="rounded-card middle-align unlock-info">' + unlockInformation + '</div>';
	    $("#camp-area-div").append(appendCampDiv);
	  }
	}
	calcHeightScrollDiv("barracks");
	checkCssSetting();
  };
  
  var updateArmyStat = function(e){
	let arrayValue = e.value.split("=");
	let armyId = parseInt(arrayValue[0],10);
	let armyStat = arrayValue[1];
	let action = arrayValue[2].toLowerCase();
	let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
	if(unlockArmyStat.tempPoint == undefined)unlockArmyStat.tempPoint = unlockArmyStat.point;
	switch(action.toLowerCase()){
	  case "plus":
	    if(unlockArmyStat.tempPoint > 0){
	      switch(armyStat.toLowerCase()){
	        case "hp":
			  if(unlockArmyStat.tempMaxHp == undefined)unlockArmyStat.tempMaxHp = unlockArmyStat.maxHp;
			  unlockArmyStat.tempMaxHp += 3;
			  unlockArmyStat.tempPoint -= 1;
			  componentAction("maxHp-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempMaxHp));
			  break;
			case "atk":
			  if(unlockArmyStat.tempAtk == undefined)unlockArmyStat.tempAtk = unlockArmyStat.atk;
			  unlockArmyStat.tempAtk += 1;
			  unlockArmyStat.tempPoint -= 1;
			  componentAction("atk-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempAtk));
			  break;
			case "def":
			  if(unlockArmyStat.tempDef == undefined)unlockArmyStat.tempDef = unlockArmyStat.def;
			  unlockArmyStat.tempDef += 1;
			  unlockArmyStat.tempPoint -= 1;
			  componentAction("def-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempDef));
			  break;
			case "agi":
			  if(unlockArmyStat.tempAgi == undefined)unlockArmyStat.tempAgi = unlockArmyStat.agi;
			  unlockArmyStat.tempAgi += 1;
			  unlockArmyStat.tempPoint -= 1;
			  componentAction("agi-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempAgi));
			  break;
			case "dex":
			  if(unlockArmyStat.tempDex == undefined)unlockArmyStat.tempDex = unlockArmyStat.dex;
			  unlockArmyStat.tempDex += 1;
			  unlockArmyStat.tempPoint -= 1;
			  componentAction("dex-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempDex));
			  break;
			case "crit":
			  if(unlockArmyStat.tempCritChance == undefined)unlockArmyStat.tempCritChance = unlockArmyStat.critChance;
			  unlockArmyStat.tempCritChance += 0.5;
			  unlockArmyStat.tempPoint -= 1;
			  componentAction("crit-chance-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempCritChance));
			  break;  
		  }
	    }
		break;
	  case "minus":
	    if(unlockArmyStat.tempPoint < unlockArmyStat.point){
		  switch(armyStat.toLowerCase()){
	        case "hp":
			  if(unlockArmyStat.tempMaxHp == undefined)unlockArmyStat.tempMaxHp = unlockArmyStat.maxHp;
			  if(unlockArmyStat.tempMaxHp > unlockArmyStat.maxHp){
			    unlockArmyStat.tempMaxHp -= 3;
			    unlockArmyStat.tempPoint += 1;
			    componentAction("maxHp-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempMaxHp));
			  }
			  break;
			case "atk":
			  if(unlockArmyStat.tempAtk == undefined)unlockArmyStat.tempAtk = unlockArmyStat.atk;
			  if(unlockArmyStat.tempAtk > unlockArmyStat.atk){
			    unlockArmyStat.tempAtk -= 1;
			    unlockArmyStat.tempPoint += 1;
			    componentAction("atk-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempAtk));
			  }
			  break;
			case "def":
		 	  if(unlockArmyStat.tempDef == undefined)unlockArmyStat.tempDef = unlockArmyStat.def;
			  if(unlockArmyStat.tempDef > unlockArmyStat.def){
			    unlockArmyStat.tempDef -= 1;
			    unlockArmyStat.tempPoint += 1;
			    componentAction("def-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempDef));
			  }
			  break;
			case "agi":
			  if(unlockArmyStat.tempAgi == undefined)unlockArmyStat.tempAgi = unlockArmyStat.agi;
			  if(unlockArmyStat.tempAgi > unlockArmyStat.agi){
			    unlockArmyStat.tempAgi -= 1;
			    unlockArmyStat.tempPoint += 1;
			    componentAction("agi-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempAgi));
			  }
			  break;
			case "dex":
			  if(unlockArmyStat.tempDex == undefined)unlockArmyStat.tempDex = unlockArmyStat.dex;
			  if(unlockArmyStat.tempDex > unlockArmyStat.dex){
			    unlockArmyStat.tempDex -= 1;
			    unlockArmyStat.tempPoint += 1;
			    componentAction("dex-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempDex));
			  }
			  break;
			case "crit":
			  if(unlockArmyStat.tempCritChance == undefined)unlockArmyStat.tempCritChance = unlockArmyStat.critChance;
			  if(unlockArmyStat.tempCritChance > unlockArmyStat.critChance){
			    unlockArmyStat.tempCritChance -= 0.5;
			    unlockArmyStat.tempPoint += 1;
			    componentAction("crit-chance-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempCritChance));
			  }
			  break; 
		  }
		}
		break;
	};
	calcArmyCrit(armyId,armyStat);
	componentAction("point-"+armyId,"replaceText",numberFormat(unlockArmyStat.tempPoint));
  };
  
  var calcCritDmg = function(atkValue,agiValue){
	return Math.floor((atkValue + agiValue)/3);  
  };
  
  var calcCritDef = function(defValue,dexValue){
	return Math.floor((defValue + dexValue)/3);  
  };
  
  var calcArmyCrit = function(armyId,armyStat){
	let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
	let tempAtk = 0;
	let tempAgi = 0;
	let tempDef = 0;
	let tempDex = 0;
	
	switch(armyStat){
	  case "atk":
	  case "agi":
	    if(unlockArmyStat.tempAtk != undefined) tempAtk = unlockArmyStat.tempAtk;
	    else tempAtk = unlockArmyStat.atk;
		
		if(unlockArmyStat.tempAgi != undefined) tempAgi = unlockArmyStat.tempAgi;
		else tempAgi = unlockArmyStat.agi;
		
		let critDmg = calcCritDmg(tempAtk,tempAgi);
		unlockArmyStat.tempCritDmg = critDmg;
		
		if(!$("#camp-area-div").hasClass("d-none")) componentAction("crit-damage-"+armyId,"replaceText",numberFormat(critDmg));
		break;
	  case "def":
	  case "dex":
	    if(unlockArmyStat.tempDef != undefined) tempDef = unlockArmyStat.tempDef;
		else tempDef = unlockArmyStat.def;
		
		if(unlockArmyStat.tempDex != undefined) tempDex = unlockArmyStat.tempDex;
		else tempDex = unlockArmyStat.dex;
		
		let critDef = calcCritDef(tempDef,tempDex);
		unlockArmyStat.tempCritDef = critDef;
		
		if(!$("#camp-area-div").hasClass("d-none")) componentAction("crit-defence-"+armyId,"replaceText",numberFormat(critDef));
		break;
	};
  };
  
  var resetArmyStat = function(unlockArmyStat){
	unlockArmyStat.tempMaxHp = unlockArmyStat.maxHp;
	unlockArmyStat.tempAtk = unlockArmyStat.atk;
	unlockArmyStat.tempDef = unlockArmyStat.def;
	unlockArmyStat.tempAgi = unlockArmyStat.agi;
	unlockArmyStat.tempDex = unlockArmyStat.dex;
	unlockArmyStat.tempCritChance = unlockArmyStat.critChance;
	unlockArmyStat.tempCritDmg = unlockArmyStat.critDmg;
	unlockArmyStat.tempCritDef = unlockArmyStat.critDef;
	unlockArmyStat.tempPoint = unlockArmyStat.point;  
  };
  
  var actionArmyStat = function(e){
	let arrayValue = e.value.split("=");
	let action = arrayValue[0].toLowerCase();
	let armyId = parseInt(arrayValue[1],10);
	let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
	let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
	let usedPoint = 0;
	switch(action){
	  case "save":
	    if(unlockArmyStat.tempMaxHp == undefined)unlockArmyStat.tempMaxHp = unlockArmyStat.maxHp;
		if(unlockArmyStat.tempAtk == undefined)unlockArmyStat.tempAtk = unlockArmyStat.atk;
		if(unlockArmyStat.tempDef == undefined)unlockArmyStat.tempDef = unlockArmyStat.def;
		if(unlockArmyStat.tempAgi == undefined)unlockArmyStat.tempAgi = unlockArmyStat.agi;
		if(unlockArmyStat.tempDex == undefined)unlockArmyStat.tempDex = unlockArmyStat.dex;
		if(unlockArmyStat.tempCritChance == undefined)unlockArmyStat.tempCritChance = unlockArmyStat.critChance;
		if(unlockArmyStat.tempCritDmg == undefined)unlockArmyStat.tempCritDmg = unlockArmyStat.critDmg;
		if(unlockArmyStat.tempCritDef == undefined)unlockArmyStat.tempCritDef = unlockArmyStat.critDef;
		
	    usedPoint = ((unlockArmyStat.tempMaxHp - unlockArmyStat.maxHp)/3) + (unlockArmyStat.tempAtk - unlockArmyStat.atk) + (unlockArmyStat.tempDef - unlockArmyStat.def) + (unlockArmyStat.tempAgi - unlockArmyStat.agi) + (unlockArmyStat.tempDex - unlockArmyStat.dex) + ((unlockArmyStat.tempCritChance - unlockArmyStat.critChance)*2);
		if(usedPoint <= unlockArmyStat.point && usedPoint > 0){
		  unlockArmyStat.maxHp = unlockArmyStat.tempMaxHp;
		  unlockArmyStat.atk = unlockArmyStat.tempAtk;
		  unlockArmyStat.def = unlockArmyStat.tempDef;
		  unlockArmyStat.agi = unlockArmyStat.tempAgi;
		  unlockArmyStat.dex = unlockArmyStat.tempDex;
		  unlockArmyStat.critChance = unlockArmyStat.tempCritChance;
		  unlockArmyStat.critDmg = unlockArmyStat.tempCritDmg;
		  unlockArmyStat.critDef = unlockArmyStat.tempCritDef;
		  unlockArmyStat.point = unlockArmyStat.point - usedPoint;
		  if(unlockArmyStat.hp < unlockArmyStat.maxHp) unlockArmy.canHeal = true;
		  else unlockArmy.canHeal = false;
		  
		  let notifText = firstLetterFormat(action,"uppercase")+" Army Status Success";
		  componentAction("notification-text","replaceText",notifText);
		  $("#modalNotification").modal("show");
		}
		break;
	  case "reset":
	    resetArmyStat(unlockArmyStat);
	    componentAction("maxHp-"+armyId,"replaceText",numberFormat(unlockArmyStat.maxHp));
		componentAction("atk-"+armyId,"replaceText",numberFormat(unlockArmyStat.atk));
		componentAction("def-"+armyId,"replaceText",numberFormat(unlockArmyStat.def));
		componentAction("agi-"+armyId,"replaceText",numberFormat(unlockArmyStat.agi));
		componentAction("dex-"+armyId,"replaceText",numberFormat(unlockArmyStat.dex));
		componentAction("crit-chance-"+armyId,"replaceText",numberFormat(unlockArmyStat.critChance));
		componentAction("crit-damage-"+armyId,"replaceText",numberFormat(unlockArmyStat.critDmg));
		componentAction("crit-defence-"+armyId,"replaceText",numberFormat(unlockArmyStat.critDef));
		componentAction("point-"+armyId,"replaceText",numberFormat(unlockArmyStat.point));
		break;
	};
	
	showCampArea();
  };
  
  var showArmyStatInfo = function(){
	let notifText = "* HP (Hit Point) is the life your army has. Each additional 1 status point, will add 3 HP \n";
	notifText += "* Atk point will determine attack power of your army. Every 3 attack point will increase 1 crit damage \n";
	notifText += "* Def point will determine defence of your army. Every 3 defence point will increase 1 crit defence \n";
	notifText += "* Agi point will determine the ability to dodge attacks. Every 3 agility point will increase 1 crit damage \n";
	notifText += "* Dex point will determine the ability to increase accuracy. Every 3 dexterity point will increase 1 crit defence \n";
	notifText += "* You will get 3 status points for every level \n";
	
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", notifText);
  };
  
  var showTrainingArea = function(){
	showBarracksTab('training');
	
	if(hero.highestFloor >= unlockNewFeatureFloor("barracks")){
	  if( !$("#training-area").length){
		componentAction("training-unlock-div","clearText","");
	    let appendTrainingDiv = '<div id="training-area" class="row border-top rounded-card">';
		    appendTrainingDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 middle-align">';
		    appendTrainingDiv += '<img src="assets/images/barracks-color.svg" class="small-img"></img>';
		    appendTrainingDiv += '</div>';
		  
		    for(let i=0;i<hero.activeTrainingSlot;i++){
			  let slotName = i + 1;
			  let disableButton = '';
			  let trainingText = 'Training Slot '+slotName;
			  let trainingDesc = '';
			  let buttonText = 'Click To Choose Elite';
			  let classButtonTraining = '';
			
			  let trainingZone = hero.trainingZone.trainingSlot.find(item => item.slotId === i);
		      appendTrainingDiv += '<div id="training-slot-' + i + '" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 row mt-1 m-0 rounded-card">';
			  appendTrainingDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">' + trainingText + '</div>';
			
			  if(trainingZone){
			    if(trainingZone.interval >= 0) clearTimeout(trainingZone.interval);
				let abilityId = trainingZone.abilityId;
				let partnerId = trainingZone.partnerId;
				let startTraining = trainingZone.startTraining;
				let partnerData = partner.find(item => item.id === partnerId);
				let partnerAbilityData = partnerAbility.find(item => item.id === abilityId);
				let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
				let unlockAbilityPartner = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
				let arrayValue = partnerId+"="+abilityId+"="+i;
				let totalTrainingTime = 0;
				let restTrainingTime = 0;
				classButtonTraining = 'skill-running';
			  
				if(unlockAbilityPartner){
				  restTrainingTime = calcRestTimeTraining(unlockAbilityPartner.maxLevel);
			  
				  let trainingTime = unlockAbilityPartner.trainingTime;
				  totalTrainingTime = trainingTime + Math.ceil((Date.now() - startTraining)/1000);
				  restTrainingTime = restTrainingTime - totalTrainingTime;
			    }
	
				trainingDesc = "On progress training "+partnerAbilityData.name+" ability for "+partnerData.name+" elite";
				appendTrainingDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">' + trainingDesc + '</div>';
				appendTrainingDiv += '<div id="button-training-div-'+i+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
				appendTrainingDiv += '<button id="stop-training-button-' + i + '" class="upgrade-level-button mt-2 training-button ' + classButtonTraining + '" value="' + i + '">Stop Training - ';
				appendTrainingDiv += '<span id="training-ability-timer-' + i + '">' + offlineTimeText(restTrainingTime) + '</span>';
				appendTrainingDiv += '</button>';
				appendTrainingDiv += '*Click button to stop training. All training times that have been running are still counted.';
				appendTrainingDiv += '</div>';
			  }else{  
				appendTrainingDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
				appendTrainingDiv += '<button id="training-button-' + i + '" class="upgrade-level-button training-button"' + disableButton + ' value="' + i + '"><span id="training-text-' + i + '">' + buttonText + '</span></button>';
				appendTrainingDiv += '</div>';
				appendTrainingDiv += '<div id="list-partner-div-'+i+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 d-none"></div>';
				appendTrainingDiv += '<div id="list-ability-div-'+i+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 d-none"></div>';
				appendTrainingDiv += '<div id="button-training-div-'+i+'" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 d-none"></div>';
			  }
			  appendTrainingDiv += '</div>';
		    }
		    appendTrainingDiv += '</div>';
		
	    $("#training-area-div").append(appendTrainingDiv).off('click','.training-button').on('click','.training-button',function(){
		  chooseTrainingPartner(this); 
	    });
	  }
	}else{
	  if( !$("#training-unlock-div").length){	
	    let unlockInformation = "Unlock this training ground at stage "+unlockNewFeatureFloor("barracks");
	    let appendBarracksDiv = '<div id="training-unlock-div" class="rounded-card middle-align unlock-info">' + unlockInformation + '</div>';
	    $("#training-area-div").append(appendBarracksDiv);
	  }
	}
	calcHeightScrollDiv("barracks");
	checkCssSetting();
  };
  
  var calcRestTimeTraining = function(maxLevel){
	return Math.ceil(Math.ceil(setting.baseTrainingAbilityHour * 3600) * Math.ceil(maxLevel/100) / setting.gameSpeed);
  };
  
  var startTrainingTimer = function(){
	let onProgressTrainingSlot = 0;
	if(hero.trainingZone.trainingSlot) onProgressTrainingSlot = hero.trainingZone.trainingSlot.length;
	for(let i=0;i<onProgressTrainingSlot;i++){
	  let trainingZone = hero.trainingZone.trainingSlot[i];
	  let abilityId = trainingZone.abilityId;
	  let partnerId = trainingZone.partnerId;
	  let trainingSlot = trainingZone.slotId;
	  let startTraining = trainingZone.startTraining;
	  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	  let unlockAbilityPartner = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	  let requiredTrainingTime = calcRestTimeTraining(unlockAbilityPartner.maxLevel);
	  let trainingTime = unlockAbilityPartner.trainingTime;
	  let totalTrainingTime = trainingTime + Math.floor((Date.now() - startTraining)/1000);

	  let counter = 0;
	  while(totalTrainingTime >= requiredTrainingTime){ counter += 1;
		unlockAbilityPartner.maxLevel += 100;
		totalTrainingTime = totalTrainingTime - requiredTrainingTime;
		if(!hero.settingAutoAbilityTraining){
		  trainingZone.startTraining = 0;
		  stopTrainingAbility(partnerId+"="+abilityId+"="+trainingSlot,true);
		  break;
		}else{
		  trainingZone.startTraining = trainingZone.startTraining + (requiredTrainingTime * 1000);
		  startTraining = trainingZone.startTraining;
		  requiredTrainingTime = calcRestTimeTraining(unlockAbilityPartner.maxLevel);
		}
	  };
	  let restTrainingTime = requiredTrainingTime - totalTrainingTime;
	  componentAction("training-ability-timer-"+trainingSlot,"replaceText",offlineTimeText(restTrainingTime));
	}
  };
  
  var showGenerateNote = function(generateType=null){
	let note = "";
	switch(generateType){
	  case "companion":
		note = "Click for Free Summon "+hero.filledCompanionSlot+" Companion";
		if(hero.filledCompanionSlot > 1) note = note.replace("Companion", "Companions");
		break;
	  case "equipment":
		note = "Click for Free Summon "+hero.filledEquipmentSlot+" Equipment";
		if(hero.filledEquipmentSlot > 1) note = note.replace("Equipment", "Equipments");
		break;
	};
	componentAction(generateType+"-note","replaceText",note);
	componentAction(generateType+"-note-div","removeClass","d-none");
	componentAction(generateType+"-generate","addClass","cursor-button");
  };
  
  var showCompanionArea = function(){
	showArea("companion");
	if(hero.highestFloor >= unlockNewFeatureFloor("companion")){ 	
	  if( $( "#companion-unlock-div").length) $( "#companion-unlock-div").remove();
	  hero.unlockCompanion.sort((a, b) => (a.id > b.id) ? 1 : -1);

	  for(let i=0; i<hero.countCompanion; i++){
		let unlockCompanion = hero.unlockCompanion[i];
		let unlockCompanionId = unlockCompanion.id;
		let companionData = companion.find(item => item.id === unlockCompanionId);
		let textActivateCompanion = 'Activate';
		let companionActiveStyle = '';
		if(unlockCompanion.active){
		  textActivateCompanion = 'Deactivate';
		  companionActiveStyle = 'active-bg-color';  
		}
		let passiveDamage = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.damage * setting.passivePercentage / 100;
		let passiveBuff = Math.floor(unlockCompanion.level / setting.passiveCompanionCalculateLevel) * setting.passiveCompanionCalculateLevel * companionData.buff * setting.passivePercentage / 100;

		if( !$( "#companion-area-" + unlockCompanionId ).length){
		  let appendCompanionDiv = '<div id="companion-area-' + unlockCompanionId + '" class="row border-top rounded-card ' + companionActiveStyle + '">';
			appendCompanionDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-12 col-12 v-center-flex">';
			appendCompanionDiv += '<span id="companion-name-' + unlockCompanionId + '">' + companionData.name + '</span>&nbsp;Lv&nbsp;<span id="companion-level-' + unlockCompanionId + '">' + unlockCompanion.level + '</span>';
			appendCompanionDiv += '</div>';
			appendCompanionDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 col-12">';
			appendCompanionDiv += '<div class="w-100">Damage&nbsp;: DPC +&nbsp;<span id="companion-damage-' + unlockCompanionId + '">' + numberFormat(unlockCompanion.damage) + '</span>%</div>';
			appendCompanionDiv += '<div class="w-100">Passive&nbsp;: DPC +&nbsp;<span id="companion-passive-damage-' + unlockCompanionId + '">' + numberFormat(passiveDamage) + '</span>%</div>';
			appendCompanionDiv += '</div>';
			appendCompanionDiv += '<div class="col-xl-5 col-lg-5 col-md-5 col-sm-6 col-12">';
			appendCompanionDiv += '<div class="w-100">Buff :&nbsp;Increase&nbsp;' + companionData.type + '&nbsp;<span id="companion-buff-' + unlockCompanionId + '">' + unlockCompanion.buff + '</span> %</div>';
			appendCompanionDiv += '<div class="w-100">Passive :&nbsp;Increase&nbsp;' + companionData.type + '&nbsp;<span id="companion-passive-buff-' + unlockCompanionId + '">' + numberFormat(passiveBuff) + '</span>%</div>';
			appendCompanionDiv += '</div>';		  
			appendCompanionDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 pt-1">';
		    appendCompanionDiv += '<button id="activate-companion-button-' + unlockCompanionId + '" class="upgrade-level-button" value="' + unlockCompanionId + '"><span id ="activate-companion-text-' + unlockCompanionId + '">' + textActivateCompanion + '</span></button>';
		    appendCompanionDiv += '</div>';
			appendCompanionDiv += '</div>';

		  $("#companion-area-div").append(appendCompanionDiv).off('click','#activate-companion-button-'+unlockCompanionId).on('click','#activate-companion-button-'+unlockCompanionId,function(){
		    activateCompanion(this); 
		  });
	    }else{
		  if(companionActiveStyle == "active-bg-color") componentAction ("companion-area-"+unlockCompanionId, "updateClass", "unactive-bg-color,active-bg-color");
		  else componentAction ("companion-area-"+unlockCompanionId, "updateClass", "active-bg-color,unactive-bg-color");
		  componentAction ("activate-companion-button-"+unlockCompanionId, "replaceText", textActivateCompanion);
		  componentAction ("companion-level-"+unlockCompanionId, "replaceText", unlockCompanion.level);
		  componentAction ("companion-damage-"+unlockCompanionId, "replaceText", unlockCompanion.damage);
		  componentAction ("companion-buff-"+unlockCompanionId, "replaceText", unlockCompanion.buff);
	    }		  
	  }
	}else{
	  componentAction ("companion-header2", "updateClass", "d-flex,d-none");
	  if( !$( "#companion-unlock-div").length){
	    let appendCompanionDiv = '<div id="companion-unlock-div" class="rounded-card unlock-info middle-align">Unlock this companion at stage ' + unlockNewFeatureFloor("companion") + ' </div>';
	    $("#companion-area-div").append(appendCompanionDiv);
	  }
	}
	calcHeightScrollDiv("companion");
  };
  
  var compareItemWithEquip = function(e,storageType){
	if(e.value != compareDivId){
	  let equipId = parseInt(e.value,10);
	  componentAction(storageType+"-item-area-"+equipId,"updateClass","rounded-card,selected-rounded-card");
	  if(compareDivId>=0) componentAction(storageType+"-item-area-"+compareDivId,"updateClass","selected-rounded-card,rounded-card");
	  compareDivId = equipId;
	  var elem = document.getElementById("equip-item-button-"+equipId);
	  scrollTheDiv(storageType+"-item-area-"+equipId);
	  
	  let equipItem = hero.unlockItem.find(item => item.id === equipId);
	  let partnerType = equipItem.partnerType;
	  let partnerData = partner;
	  let filteredUnlockPartner = [];
	  let buttonValue = equipId;
	  let otherStorage = "";
	  switch(storageType.toLowerCase()){
		case "warehouse":
		  otherStorage = "backpack";
		  break;
		case "backpack":
		  otherStorage = "warehouse";
		  break;  
	  };
	  
	  if(partnerType.toLowerCase() != "all"){
		partnerData = partnerData.filter(item => item.type === partnerType);
		for (let i=0;i<partnerData.length;i++){
		  let obj = hero.unlockPartner.find(item => item.id === partnerData[i].id);
		  if(obj) filteredUnlockPartner.push(obj);
	    }
	  }else{
		filteredUnlockPartner = hero.unlockPartner;
	  }
	  componentAction("warehouse-header3","updateClass","d-none,d-flex");
	  $("#warehouse-header3").empty();
	  
	  for(let i=0;i<filteredUnlockPartner.length;i++){
		let appendItemComparation = "";	
		let partnerId = filteredUnlockPartner[i].id;
		let partnerData = partner.find(item => item.id === partnerId);
		let existItemId = -1;
		let itemImage = "";
		let itemName = "";
		let benefitName = "";
		let benefitValue = "";
		let imageClass = "";
		let existItem;
		let colButton = 12;
		let existEnhanceLevel = 0;
		let upgradeLevel = "";
		buttonValue = partnerId + '=' + equipItem.itemType + '=' + equipId;

		switch(equipItem.itemType.toLowerCase()){
		  case "weapon":
			itemImage = "weapon-bw.svg";
			itemName = "No Weapon";
			imageClass = "generate-icon";
			existItemId = filteredUnlockPartner[i].weaponId;
			break;
		};
		if(existItemId >= 0){
		  colButton = 6;
		  existItem = hero.unlockItem.find(item => item.id === existItemId);
		  let existMinValue = new Decimal(10).pow(existItem.exponentValue).mul(existItem.minValue);
		  let existMaxValue = new Decimal(10).pow(existItem.exponentValue).mul(existItem.maxValue);
		  let equipMinValue = new Decimal(10).pow(existItem.exponentValue).mul(equipItem.minValue);
		  let equipMaxValue = new Decimal(10).pow(existItem.exponentValue).mul(equipItem.maxValue);
		  existEnhanceLevel = existItem.enhanceLevel;
		  
		  if(existItem.upgradeLevel) upgradeLevel = "+"+existItem.upgradeLevel;
		  itemName = existItem.name;
		  itemImage = showEquipmentIcon(existItem.name,true);
		  imageClass = "";
		  benefitName = "";
		  benefitValue = numberFormat(existMinValue);
		  if(equipItem){
			if(existMinValue.greaterThan(equipMinValue)) benefitValue += '<span class="unlock-info"> ('+numberFormat(equipMinValue)+')</span>';
		    else if(existMinValue.lessThan(equipMinValue)) benefitValue += '<span class="good-info"> ('+numberFormat(equipMinValue)+')</span>';
			else benefitValue += '<span> ('+numberFormat(equipMinValue)+')</span>';
		  }
		  benefitValue += " - " + numberFormat(existMaxValue);
		  if(equipItem){
			if(existMaxValue.greaterThan(equipMaxValue)) benefitValue += '<span class="unlock-info"> ('+numberFormat(equipMaxValue)+')</span>';
		    else if(existMaxValue.lessThan(equipMaxValue)) benefitValue += '<span class="good-info"> ('+numberFormat(equipMaxValue)+')</span>';
			else benefitValue += '<span> ('+numberFormat(equipMaxValue)+')</span>';
		  }
	    }
		appendItemComparation += '<div class="row col-xl-3 col-lg-4 col-md-6 col-sm-6 col-12 p-1">';
		appendItemComparation += '<div id="compare-item-' + partnerId + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0">';
		appendItemComparation += '<div class="col-xl-3 col-lg-4 col-md-4 col-sm-3 col-4">';
		appendItemComparation += '<div class="w-100 position-absolute right-align good-info pr-2">'+upgradeLevel+'</div>';
		appendItemComparation += '<div class="w-100 image-dwellers">';
		appendItemComparation += '<img id="compare-image-' + partnerId + '" src="assets/images/'+itemImage+'" class="image-dwellers container-img"></img>';
		appendItemComparation += '</div>';
		if(existEnhanceLevel > 0){
		  appendItemComparation += '<div class="w-100 middle-align star-height">';  
		  let starImg = "silver-star";
		  let loopStar = existEnhanceLevel;
		  if(loopStar > 5){
			starImg = "golden-star";
			loopStar -= 5;
		  }
		  for(let j=0;j<loopStar;j++){
			appendItemComparation += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
		  }
		  appendItemComparation += '</div>';
		}
		appendItemComparation += '</div>';
		appendItemComparation += '<div class="col-xl-9 col-lg-8 col-md-8 col-sm-9 col-8">';
		appendItemComparation += '<div class="w-100">Elite : ' + partnerData.name + '</div>';
		appendItemComparation += '<div class="w-100">' + itemName + '</div>';
		appendItemComparation += '<div class="w-100">'+benefitName+' '+benefitValue+'</div>';
		appendItemComparation += '</div>';
		appendItemComparation += '<div class="col-xl-'+colButton+' col-lg-'+colButton+' col-md-'+colButton+' col-sm-'+colButton+' col-'+colButton+' mt-1 v-center-flex">';
		appendItemComparation += '<button id="equip-item-button-' + partnerId + '" class="upgrade-level-button" value="' + buttonValue +'">Equip '+equipItem.name+'</button>';
		appendItemComparation += '</div>';
		if(existItemId >= 0){
		  appendItemComparation += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 mt-1 v-center-flex">';
		  appendItemComparation += '<button id="unequip-item-button-' + partnerId + '" class="upgrade-level-button" value="' + buttonValue +'">Remove '+existItem.name+'</button>';
		  appendItemComparation += '</div>';
		}
		appendItemComparation += '</div>';
		appendItemComparation += '</div>';
	  
	    $("#warehouse-header3").append(appendItemComparation).off('click','#equip-item-button-'+partnerId).on('click','#equip-item-button-'+partnerId,function(){
		  equipItemToPartner(this); 
	    }).off('click','#unequip-item-button-'+partnerId).on('click','#unequip-item-button-'+partnerId,function(){
		  unequipItemPartner(this.value); 
	    });
	  }
	  checkCssSetting();
	}else{
	  let equipId = parseInt(e.value,10);
	  $("#warehouse-header3").empty();
	  componentAction("warehouse-header3","updateClass","d-flex,d-none");
	  if(compareDivId>=0) componentAction(storageType+"-item-area-"+equipId,"updateClass","selected-rounded-card,rounded-card");
	  compareDivId = "";
	}
	calcHeightScrollDiv("warehouse");
  };
  
  var confirmUseItem = function(e,storageType){
	let itemId = parseInt(e.value,10);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	let canUseItem = true;
	let armyId = -1;
	let showNotifText = true;
	let showModal = true;
	let forceConfirmUseItem = false;
	$("#modal-heal-army").empty();
	componentAction("modal-heal-army","addClass","d-none");
	
	switch(unlockItem.itemId){
	  case 80:
	  case 81:
	  case 82:
	  case 83:
	  case 84:
	  case 85:
	    let skillId = unlockItem.itemId - 80;
		let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
		if(unlockSkill==null || unlockSkill==undefined){
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "Please activate your skill first before use the ticket"); 
		  canUseItem = false;
		}else if(unlockSkill.isActive){
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "You can't use the ticket when the skill is running"); 
		  canUseItem = false;
		}
	    break;
	  default:
	    let materialData = material.find(item => item.id === unlockItem.itemId);
		if(materialData.refillHP != undefined){
		  let divId = "heal-army";
		  let availableArmy = hero.unlockArmy.filter(item => item.canHeal === true);
		  if(availableArmy.length > 0){
			let healArmyDiv = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-1 pt-1 unlock-info">Which army will you heal ?</div>';
			healArmyDiv += showPopupArmy(availableArmy,divId);
		  
		    if(healArmyDiv != "") $("#modal-heal-army").append(healArmyDiv).off("click",".camp-army-area").on("click",".camp-army-area",function(){
			  selectArmy(this.id,divId);
		    });
		  }else{
			showModal = false;
			$("#modalNotification").modal("show");
		    componentAction ("notification-text", "replaceText", "All army already have full health");
		  }
		  showNotifText = false;
		  forceConfirmUseItem = true;
		  componentAction("modal-heal-army","removeClass","d-none");
		}
	    break;
	}
	
	if((hero.settingConfirmUseItem && canUseItem) || forceConfirmUseItem){
	  if(showNotifText){
		componentAction("use-item-text","removeClass","d-none");
		componentAction("use-item-text","replaceText","Are you sure want to use "+unlockItem.name+" ?");
	  }else{
		componentAction("use-item-text","addClass","d-none");  
	  }
	  componentAction("use-item-ok-button","inputText",itemId);
	  if(showModal) $("#modalConfirmUseItem").modal("show");
	  else $("#modalConfirmUseItem").modal('hide');
	}
  };
  
  var checkSkillTicket = function(skillId){
	skillId = parseInt(skillId,10);
	let itemId = skillId + 80;
	let unlockItem = hero.unlockItem.find(item => item.itemId === itemId && item.qty > 0 && item.storageType === "backpack");
	if(unlockItem) return unlockItem;
	else return null;
  };
  
  var useSkillTicket = function(skillId,fromSkillArea=false){
	let canUseItem = true;
	let unlockItem = checkSkillTicket(skillId);
	if(unlockItem){
	  let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	  if(unlockSkill){
	    if(unlockSkill.isActive){
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "You can't use the ticket when the skill is running"); 
		  canUseItem = false;
	    }else useSkill(skillId,true);
	  }else {
	    $("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "Please activate your skill first before use the ticket"); 
	    canUseItem = false;
	  }
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You don't have the skill ticket in backpack"); 
	  canUseItem = false;
	}
	if(canUseItem && fromSkillArea) unlockItem.qty -= 1;
	return canUseItem;
  };
  
  var useItem = function(arrayValue){
	arrayValue += "";
	arrayValue = arrayValue.split("=");
	let itemId = parseInt(arrayValue[0],10);
	let armyId = parseInt(arrayValue[1],10);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	let materialData = material.find(item => item.id === unlockItem.itemId);
	let canUseItem = true;
	switch(unlockItem.itemId){
	  case 76:
	  case 77:
	  case 78:
	  case 79:
		let rewardCoin = new Decimal(3600).mul(materialData.benefit*0.75).mul(calcTotalRewardCoin());
		let totalLaborPrize = new Decimal(3600).mul(materialData.benefit*0.75).div(10).mul(calcTotalProduceLaborCoin());
		let totalGainCoin = new Decimal(rewardCoin).plus(totalLaborPrize).floor();
		hero.coin = new Decimal(hero.coin).plus(totalGainCoin);
		hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(totalGainCoin);
	    addedCoin = true;
		$("#modalNotification").modal("show");
		componentAction ("notification-text", "replaceText", "You gain "+numberFormat(totalGainCoin)+" coin"); 
		break;
	  case 80:
	  case 81:
	  case 82:
	  case 83:
	  case 84:
	  case 85:
	    let skillId = unlockItem.itemId - 80;
		canUseItem = useSkillTicket(skillId);
		break;
	  default:
		let unlockArmy = hero.unlockArmy.find(item => item.id === armyId);
		let unlockArmyStat = unlockArmy.stat.find(item => item.type === unlockArmy.currentType);
		if(unlockArmyStat.hp < unlockArmyStat.maxHp){
		  unlockArmyStat.hp += materialData.refillHP;
		  if(unlockArmyStat.hp > unlockArmyStat.maxHp){
			unlockArmyStat.hp = unlockArmyStat.maxHp; 
			unlockArmy.canHeal = false;
		  }
		  unlockArmy.status = "Resting";
		}
		break;
	};
	if(unlockItem && materialData && canUseItem) unlockItem.qty -= 1;
	updateWarehouseArea();
  };
  
  var autoSellEquipment = function(e){
	let gradeName = e.id.replace("setting-auto-sell-","");
	let gradeEquipmentData = gradeEquipment.find(item => item.name === gradeName);
	let heroSettingAutoSellEquipment = hero.settingAutoSellEquipment.find(item => item.id === gradeEquipmentData.id);
	if(heroSettingAutoSellEquipment) heroSettingAutoSellEquipment.autoSell = e.checked;
	
	saveGame();
  };
  
  var equipItemToPartner = function(e){
	let arrayString = e.value.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let itemType = arrayString[1];
	let itemId = parseInt(arrayString[2],10);
	let existId = -1;
	
	let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let partnerData = partner.find(item => item.id === partnerId);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	switch(itemType.toLowerCase()){
	  case "weapon":
	    if(unlockPartner && unlockPartner.weaponId >= 0){
		  existId = unlockPartner.weaponId;
		}else if(highestUnlockPartner && highestUnlockPartner.weaponId >= 0){
		  existId = highestUnlockPartner.weaponId;
		}
		if(unlockPartner) unlockPartner.weaponId = itemId;
		highestUnlockPartner.weaponId = itemId;
		break;
	};
	
	if(existId >= 0){
	  let existItem = hero.unlockItem.find(item => item.id === existId);
	  if(existItem) existItem.storageType = unlockItem.storageType;
	}else{
	  switch(unlockItem.storageType.toLowerCase()){
		case "warehouse":
		  hero.countWarehouse -= 1;
		  break;
		case "backpack":
		  hero.countBackpack -= 1;
		  break;  
	  };
	}
	let newItem = hero.unlockItem.find(item => item.id === itemId);
	if(newItem) newItem.storageType = partnerData.name;
	calculateAllItemBenefit(partnerId);
	if(!$("#warehouse-div").hasClass("d-none")) updateWarehouseArea();
	else if(!$("#barracks-div").hasClass("d-none")){
	  showBarracksArea();
	  compareDivId = -1;
	  showDetailPartner($("#barracks-partner-area-"+partnerId)[0]);
	  showDetailPartnerEquipment(partnerId);
	}
	if($("#icon-image-"+itemType.toLowerCase()+"-"+partnerId).length){
	  $("#icon-image-"+itemType.toLowerCase()+"-"+partnerId).attr("src", "assets/images/"+unlockItem.name.toLowerCase().split(" ").join("-")+".svg");
	  $("#icon-image-"+itemType.toLowerCase()+"-"+partnerId).css({"filter":""});
	  componentAction("icon-image-"+itemType.toLowerCase()+"-"+partnerId,"removeClass","generate-icon");
	}
  };
  
  var unequipItemPartner = function(value,forceRemove=false){
	let arrayString = value.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let itemType = arrayString[1];
	let itemId = parseInt(arrayString[2],10);
	let existId = -1;
	let canMoved = true;
	let storageDestination;
	
	let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let partnerData = partner.find(item => item.id === partnerId);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	
	switch(itemType.toLowerCase()){
	  case "weapon":
	    if(unlockPartner && unlockPartner.weaponId >= 0){
		  existId = unlockPartner.weaponId;
		}else if(highestUnlockPartner && highestUnlockPartner.weaponId >= 0){
		  existId = highestUnlockPartner.weaponId;
		}
		break;
	};
	
	if(existId >= 0){
	  let existItem = hero.unlockItem.find(item => item.id === existId);
	  storageDestination = unlockItem.storageType.toLowerCase();
	  switch(unlockItem.storageType.toLowerCase()){
		case "warehouse":
		  if(hero.countWarehouse < hero.maxWarehouse || forceRemove){
		    hero.countWarehouse += 1;
			if(unlockPartner) unlockPartner.weaponId = -1;
			highestUnlockPartner.weaponId = -1;
		  }else canMoved = false;
		  break;
		case "backpack":
		default:
		  storageDestination = "backpack";
		  if(hero.countBackpack < hero.maxBackpack || forceRemove){
		    hero.countBackpack += 1;
			if(unlockPartner) unlockPartner.weaponId = -1;
			highestUnlockPartner.weaponId = -1;
		  }else canMoved = false;
		  break;
	  };
	  if(!canMoved){
		$("#modalNotification").modal("show");
		componentAction ("notification-text", "replaceText", "Your "+storageDestination+" has no room for new item"); 
	  }else existItem.storageType = storageDestination;
	}
	
	if(canMoved){
	  calculateAllItemBenefit();
	  if(!$("#warehouse-div").hasClass("d-none")) updateWarehouseArea();
	  else if(!$("#barracks-div").hasClass("d-none")){
		showBarracksArea();
		compareDivId = -1;
		showDetailPartner($("#barracks-partner-area-"+partnerId)[0]);
		showDetailPartnerEquipment(partnerId);
		$("#icon-image-"+itemType.toLowerCase()+"-"+partnerId).attr("src", "assets/images/"+itemType.toLowerCase()+"-bw.svg");
		componentAction("icon-image-"+itemType.toLowerCase()+"-"+partnerId,"addClass","generate-icon");
		checkCssSetting();
	  }
	}
  };
  
  var confirmActionItem = function(e, storageType, actionType){
	let itemId = parseInt(e.value,10);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);

	if(unlockItem){
	  let actionText = "";
	  let actionMaterial = 0;
	  let actionClass = "";
	  let canProcess = true;
	  let actionMaterialName = "";
	  let nextMinBenefit = "";
	  let nextMaxBenefit = "";
	  let nextMinValue = new Decimal(0);
	  let nextMaxValue = new Decimal(0);
	  let enhanceLevelEquipmentData;
	  let actionHeaderText = "";
	  let combineItemList;
	  let equipmentData;
	  let totalSphere;
	  let itemName;
	  
	  switch(unlockItem.itemType){
		case "weapon":
	      enhanceLevelEquipmentData = enhanceLevelEquipment.find(item => item.id === unlockItem.enhanceLevel);
	      equipmentData = equipment.find(item => item.id === unlockItem.itemId);
		  itemName = equipmentData.name;
		  totalSphere = calculateItemSphere(unlockItem);
		  break;
		case "ingredient":
		  let materialData = material.find(item => item.id === unlockItem.itemId);
		  totalSphere = materialData.clover;
		  itemName = materialData.name;
		  break;
	  };
	  
	  switch(actionType.toLowerCase()){
		case "sell":
		  switch(unlockItem.itemType){
			case "weapon":
			  actionMaterialName = "Sphere";
			  break;
			case "ingredient":
			  actionMaterialName = "Clover";
			  break;
		  };
		  actionClass = "good-info";
		  actionMaterial = calculateSellSphere(totalSphere);
		  actionText = "Gain : "+(actionMaterial*unlockItem.qty)+" "+actionMaterialName;
		  actionHeaderText = 'Are you sure want to sell '+itemName+' and you will '+actionText.replace(":","").toLowerCase()+' ?';
		  break;
		case "upgrade":
		  actionMaterialName = "Sphere";
		  actionClass = "unlock-info";
		  actionMaterial = totalSphere;
		  if(hero.sphere < actionMaterial)canProcess = false;
		  actionText = "Spend : "+actionMaterial+" "+actionMaterialName;
		  let upgradeBonusPercentage = enhanceLevelEquipmentData.upgradeBonusPercentage;
		  nextMinValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue).mul(upgradeBonusPercentage).div(100);
		  nextMaxValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue).mul(upgradeBonusPercentage).div(100);
		  actionHeaderText = 'Are you sure want to upgrade '+equipmentData.name+' and you will '+actionText.replace(":","").toLowerCase()+' ?';
		  break;
		case "enhance":
		  actionMaterialName = "Blueprint";
		  actionClass = "unlock-info";
		  let totalBlueprint = calculateItemBlueprint(unlockItem);
		  actionMaterial = totalBlueprint;
		  if(hero.blueprint < actionMaterial) canProcess = false;
		  actionText = "Spend : "+actionMaterial+" "+actionMaterialName;
		  let enhanceNextLevelEquipmentData = enhanceLevelEquipment.find(item => item.id === (unlockItem.enhanceLevel+1));
		  let enhanceBonusPercentage = enhanceNextLevelEquipmentData.enhanceBonusPercentage;
		  nextMinValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue).mul(enhanceBonusPercentage).div(100);
		  nextMaxValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue).mul(enhanceBonusPercentage).div(100);
		  actionHeaderText = 'Are you sure want to enhance '+equipmentData.name+' and you will '+actionText.replace(":","").toLowerCase()+' ?';
		  break;
		case "combine":
		  actionHeaderText = 'Which equipment that you want to combine with this '+equipmentData.name+' ?';
		  combineItemList = hero.unlockItem.filter(item => item.upgradeLevel % 50 === 0 && item.upgradeLevel > 0 && item.gradeId === unlockItem.gradeId && item.enhanceLevel === unlockItem.enhanceLevel && item.itemType === unlockItem.itemType && item.id !== unlockItem.id && (item.storageType === "backpack" || item.storageType === "warehouse"));
		  if(combineItemList.length <= 0){
			let gradeEquipmentData = gradeEquipment.find(item => item.id === unlockItem.gradeId);  
			canProcess = false;
		    actionMaterialName = "level "+unlockItem.upgradeLevel+" of grade "+gradeEquipmentData.name+" "+unlockItem.itemType;
		  }
		  break;
	  };
	  if(nextMinValue.greaterThan(0)) nextMinBenefit = '<span class="good-info">(+'+numberFormat(nextMinValue)+")</span>";
	  if(nextMaxValue.greaterThan(0)) nextMaxBenefit = '<span class="good-info">(+'+numberFormat(nextMaxValue)+")</span>";
	  
	  let actionDiv = '<div id="action-detail-text" class="w-100 '+actionClass+'">'+actionText+'</div>';
	  if(canProcess){
	    let benefitName = "";
	    let upgradeLevel = "";
	    if(unlockItem.upgradeLevel > 0) upgradeLevel = "+"+unlockItem.upgradeLevel;
	  
	    switch(unlockItem.itemType.toLowerCase()){
		  case "weapon":
		    benefitName = "Dam";
		    break;
	    };

	    let appendModalDiv = '<div id="modal-header2" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	    appendModalDiv += '<div id="action-header-text" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-2 middle-align">'+actionHeaderText+'</div>';
	    appendModalDiv += showEquipmentList(unlockItem,"modal",actionDiv,nextMinBenefit,nextMaxBenefit);
		if(actionType.toLowerCase() == "combine"){
		  appendModalDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 mt-2 middle-align">Please choose one item from below list that you want to use as combine material</div>';
		}
	    appendModalDiv += '</div>';
	
	    $("#modalConfirmActionItem").modal('show');
	    $("#modal-action-desc").empty();
	    $("#modal-action-desc").append(appendModalDiv).off('keyup','.clover-sell-qty').on('keyup','.clover-sell-qty',function(e){
		  var isNumeric = numericFormat(e.target.value);
		  if(isNumeric){
			let value = e.target.value * 1;
			if((value*1) < 0) value = 0;
		    if((value*1) > (unlockItem.qty*1)) value = (unlockItem.qty*1);
			$("#"+e.target.id).val(value);
			let totalClover = value * actionMaterial;
			actionText = "Gain : "+totalClover+" "+actionMaterialName;
		    actionHeaderText = 'Are you sure want to sell '+itemName+' and you will '+actionText.replace(":","").toLowerCase()+' ?';
			componentAction("action-header-text","replaceText",actionHeaderText);
		  }else{
			$("#"+e.target.id).val(0);
			actionText = "Gain : 0 "+actionMaterialName;
		  }
		  componentAction("action-detail-text","replaceText",actionText);
		});

	    if(actionType.toLowerCase() == "combine"){
		  let newModalWidth = $(window).width() * 0.9;
		  $('.modal-dialog').css({"max-width":(newModalWidth)});
		  $('.modal-dialog').css({"width":(newModalWidth)});
		  componentAction("action-item-ok-button","addClass","d-none");
		  let appendCombineListDiv = "";
		  if(combineItemList.length > 0){
			appendCombineListDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 mt-2 align-items-center justify-content-center modal-scrollable">';
		    for(let i=0;i<combineItemList.length;i++){
		      if(checkNextActionItem(combineItemList[i]).toLowerCase() == "combine"){
			    appendCombineListDiv += '<div class="row col-xl-3 col-lg-4 col-md-4 col-sm-6 col-12 p-1">';
			    appendCombineListDiv += '<div id="combine-item-area-' + combineItemList[i].id + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0 cursor-button combine-item-area">';  
			    appendCombineListDiv += showEquipmentList(combineItemList[i],"combine");
			    appendCombineListDiv += '</div>';
			    appendCombineListDiv += '</div>';
		      }
		    }
			appendCombineListDiv += '</div>';
			$("#modal-action-desc").append(appendCombineListDiv).off('click','.combine-item-area').on('click','.combine-item-area',function(){
			  combineItem(this); 
	        });
		  }else{
		    let combineMaterialGradeData = gradeEquipment.find(item => item.id === unlockItem.gradeId);
		    appendCombineListDiv = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 mt-2 unlock-info middle-align rounded-card">You don\'t have level '+enhanceLevelEquipmentData.maxLevel+' grade '+combineMaterialGradeData.name+' to combine';
		  }
	    }else{
		  calcDefaultModalWidth();
	    }
		$('.modal-dialog').css({"margin":"auto"});
	    componentAction("action-item-ok-button","inputText",itemId+"="+actionType);
	    checkCssSetting();
		calcHeightScrollDiv("modal","warehouse");
	  }else{
		calcDefaultModalWidth();
		$('.modal-dialog').css({"margin":"auto"});
		
		$("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "You don't have enough "+actionMaterialName+" to "+actionType.toLowerCase()+" the equipment");  
	  }
	}
  };
  
  var showModalItem = function(itemId,storageType){
	itemId = parseInt(itemId,10);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	unlockItem.newItem = false;
	
	$("#modal-show-detail-body").empty();
	let appendBodyModalItem = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 left-align">';
	switch(unlockItem.itemType.toLowerCase()){
	  case "weapon":
	    appendBodyModalItem += showEquipmentList(unlockItem,"max");
		break;
	  case "ingredient":
	  case "coin":
	  case "ticket":
	    appendBodyModalItem += showItemList(unlockItem,"max");
		break;
	};
	appendBodyModalItem += '</div>';
	$("#modal-show-detail-body").append(appendBodyModalItem);
	
	$("#modalShowDetailItem").modal("show");
	
	removeNotifIcon(storageType+"-item-area-"+itemId);
	removeNotifIcon(storageType+"-tab-button");
	removeNotifIcon("warehouse");
	removeNotifIcon("town-div");
  };
  
  var actionItem = function(e){
	let arrayValue = e.split("=");
	let itemId = parseInt(arrayValue[0],10);
	let actionType = arrayValue[1];
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	let gradeEquipmentData = gradeEquipment.find(item => item.id === unlockItem.gradeId);
	let canProcess = true;
	let actionMaterialName = "";
	let minValueArray = [];
	let maxValueArray = [];

	if(actionType.toLowerCase() == checkNextActionItem(unlockItem).toLowerCase()){
	  switch(actionType.toLowerCase()){
		case "upgrade":
		  let totalSphere = calculateItemSphere(unlockItem);
		  if(hero.sphere >= totalSphere){
			let enhanceLevelEquipmentData = enhanceLevelEquipment.find(item => item.id === unlockItem.enhanceLevel);
			let upgradeBonusPercentage = enhanceLevelEquipmentData.upgradeBonusPercentage;
			let minValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue).mul(100+upgradeBonusPercentage).div(100);
			let maxValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue).mul(100+upgradeBonusPercentage).div(100);
			
			unlockItem.upgradeLevel += 1;
			minValueArray = roundedBigValue(minValue,"ceil").split("=");
			maxValueArray = roundedBigValue(maxValue,"ceil").split("=");
			
		    hero.sphere -= totalSphere;
		  }else canProcess = false;
		  actionMaterialName = "Sphere";
		  updateTask(25);
		  break;
		case "enhance":
		  let totalBlueprint = calculateItemBlueprint(unlockItem);
		  if(hero.blueprint >= totalBlueprint){
			let enhanceLevelEquipmentData = enhanceLevelEquipment.find(item => item.id === (unlockItem.enhanceLevel+1));
			let enhanceBonusPercentage = enhanceLevelEquipmentData.enhanceBonusPercentage;
			minValueArray = roundedBigValue(new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue).mul(100+enhanceBonusPercentage).div(100),"ceil").split("=");
			maxValueArray = roundedBigValue(new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue).mul(100+enhanceBonusPercentage).div(100),"ceil").split("=");
			
		    unlockItem.upgradeLevel = 0;
		    unlockItem.enhanceLevel += 1;
			hero.blueprint -= totalBlueprint;
		  }else canProcess = false;
		  actionMaterialName = "Blueprint";
		  updateTask(25);
		  break;
		case "combine":
		  let combineMaterialId = parseInt(arrayValue[2],10);
		  let combineItemMaterial = hero.unlockItem.find(item => item.id === combineMaterialId);
		  if(combineItemMaterial.gradeId == unlockItem.gradeId && combineItemMaterial.enhanceLevel == unlockItem.enhanceLevel && combineItemMaterial.upgradeLevel == unlockItem.upgradeLevel && combineItemMaterial.itemType == unlockItem.itemType && unlockItem.id != combineItemMaterial.id){
			let targetStorage = "";
			if(unlockItem.storageType.toLowerCase() == "warehouse" || unlockItem.storageType.toLowerCase() == "backpack") targetStorage = unlockItem.storageType.toLowerCase();
			else targetStorage = combineItemMaterial.storageType.toLowerCase();
			updateStorage("delete",unlockItem);
			let deleteIndex = hero.unlockItem.findIndex(function(e){
			  return e.id === unlockItem.id;
			});
			if (deleteIndex !== -1) hero.unlockItem.splice(deleteIndex, 1);

			deleteIndex = -1;
			updateStorage("delete",combineItemMaterial);
			deleteIndex = hero.unlockItem.findIndex(function(e){
			  return e.id === combineItemMaterial.id;
			});
			if (deleteIndex !== -1) hero.unlockItem.splice(deleteIndex, 1);
			
			if(unlockItem.storageType.toLowerCase() == "backpack" || unlockItem.storageType.toLowerCase() == "warehouse") 
			insertNewUnlockEquipment(true,(unlockItem.gradeId+1),targetStorage);
		  }
		  break;
	  };
	  if(minValueArray.length > 0 && maxValueArray.length > 0){
		let compareArray = compareMinMaxValue(minValueArray,maxValueArray).split("=");
	    unlockItem.minValue = compareArray[0];
		unlockItem.maxValue = compareArray[1];
		unlockItem.exponentValue = compareArray[2];
		calculateAllItemBenefit();
	  }
	}
	if(canProcess){
	  if(!$("#warehouse-div").hasClass("d-none")) updateWarehouseArea();
	  else if(!$("#barracks-div").hasClass("d-none")){
		let partnerData = partner.find(item => item.name === unlockItem.storageType);
		let equipmentData = equipment.find(item => item.id === unlockItem.itemId);
		showBarracksArea();
		compareDivId = -1;
		showDetailPartner($("#barracks-partner-area-"+partnerData.id)[0]);
		showDetailPartnerEquipment(partnerData.id);
		showDetailPartnerEquipmentStat($("#"+equipmentData.itemType.toLowerCase()+"-partner-div-"+partnerData.id)[0]);
	  }
	} else {
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You don't have enough "+actionMaterialName+" to "+actionType.toLowerCase()+" the equipment");
	}
	saveGame();
  };
  
  var sellItem = function(itemId,sellQty=1){
	itemId = parseInt(itemId,10);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	if(unlockItem){
	  switch(unlockItem.itemType){
		case "weapon":
		  let totalSphere = calculateItemSphere(unlockItem);
	      let sellSphere = calculateSellSphere(totalSphere);

	      hero.sphere += sellSphere;
		  break;
		case "ingredient":
		  let materialData = material.find(item => item.id === unlockItem.itemId);
		  let totalClover = materialData.clover;
	      let sellClover = calculateSellSphere(totalClover);
		  
		  hero.clover += (sellClover*sellQty);
		  break;  
	  };
	  
	  if(unlockItem.qty == sellQty){
	    let deleteIndex = hero.unlockItem.findIndex(function(e){
	      return e.id === itemId;
	    });
	    if (deleteIndex !== -1) hero.unlockItem.splice(deleteIndex, 1);
	  }else{
		unlockItem.qty -= sellQty;
	  }
	  updateWarehouseArea();
	}
	saveGame();
  };
  
  var moveItem = function(e){
	let itemId = parseInt(e.value,10);
	let unlockItem = hero.unlockItem.find(item => item.id === itemId);
	let canMoved = true;
	switch(unlockItem.storageType.toLowerCase()){
	  case "backpack":
	    if(hero.countWarehouse < hero.maxWarehouse){
	      unlockItem.storageType = "warehouse";
		  hero.countBackpack -= 1;
		  hero.countWarehouse += 1;
		}else{
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "Your warehouse has no room for new item");
		  canMoved = false;
		}
		break;
	  case "warehouse":
	    if(hero.countBackpack < hero.maxBackpack){
	      unlockItem.storageType = "backpack";
		  hero.countBackpack += 1;
		  hero.countWarehouse -= 1;
		}else{
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "Your backpack has no room for new item");
		  canMoved = false;
		}
		break;
	};
	if(canMoved) updateWarehouseArea();
	saveGame();
  };
  
  var combineItem = function(e){
	let itemId = parseInt(e.id.replace("combine-item-area-",""),10);
	componentAction("combine-item-area-"+itemId,"updateClass","rounded-card,selected-rounded-card");
	
	let combineMaterial = hero.unlockItem.find(item => item.upgradeLevel % 50 === 0 && item.upgradeLevel > 0 && item.id === itemId);
	if(combineMaterial){
	  componentAction("action-item-ok-button","removeClass","d-none");
	  let combineArray = $("#action-item-ok-button").val().split("=");
	  componentAction("action-item-ok-button","inputText",combineArray[0]+"="+combineArray[1]+"="+itemId);
	  if(combineDivId != itemId){
	    if(combineDivId>=0) componentAction("combine-item-area-"+combineDivId,"updateClass","selected-rounded-card,rounded-card");
	    combineDivId = itemId;
	  }
	}
  };
  
  var calculateItemSphere = function(unlockItem){
	let gradeEquipmentData = gradeEquipment.find(item => item.id === unlockItem.gradeId);
	let enhanceLevelEquipmentArray = enhanceLevelEquipment.filter(item => item.id < unlockItem.enhanceLevel);
	let totalSphere = gradeEquipmentData.baseWeaponSphere + unlockItem.upgradeLevel;

	for(let i=0;i<enhanceLevelEquipmentArray.length;i++){
	  totalSphere += enhanceLevelEquipmentArray[i].maxLevel;
	}
	
	return totalSphere+1;
  };
  
  var calculateSellSphere = function(totalSphere){
	let sellSphere = Math.floor(totalSphere/2);
	if(sellSphere < 1) sellSphere = 1;
	return (sellSphere*1);
  };
  
  var calculateItemBlueprint = function(unlockItem){
	let nextEnhanceLevel = enhanceLevelEquipment.find(item => item.id === (unlockItem.enhanceLevel+1));
	let totalBlueprint = nextEnhanceLevel.baseBlueprint;  
	
	return totalBlueprint;
  };
  
  var updateWarehouseArea = function(){
	saveGame();
	$("#warehouse-header3").empty();
	if(!$("#backpack-area-div").hasClass("d-none")){
	  $("#backpack-area-div").empty();
	  showWarehouseArea("backpack",$("#item-filter").val().toLowerCase(),$("#item-sorting").val().toLowerCase());
	}else if(!$("#warehouse-area-div").hasClass("d-none")){
	  $("#warehouse-area-div").empty();
	  showWarehouseArea("warehouse",$("#item-filter").val().toLowerCase(),$("#item-sorting").val().toLowerCase());
	}  
  };
  
  var checkNextActionItem = function(unlockItem){
	let enhanceLevelEquipmentData = enhanceLevelEquipment.find(item => item.id === unlockItem.enhanceLevel);
	let actionType;
	if(unlockItem.upgradeLevel < enhanceLevelEquipmentData.maxLevel)actionType = "Upgrade";
	else{
	  let gradeEquipmentData = gradeEquipment.find(item => item.id === unlockItem.gradeId);
	  if(unlockItem.enhanceLevel < gradeEquipmentData.maxEnhanceLevel) actionType = "Enhance";
	  else actionType = "Combine";
	}
	
	return actionType;
  };
  
  var showPartnerList = function(unlockPartner){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === unlockPartner.id);
	let partnerData = partner.find(item => item.id === unlockPartner.id);
	let partnerImg = partnerData.name.toLowerCase();
	let partnerTypeIcon = partnerData.type.toLowerCase();
	let aAbilityImg = "-bw";
	let bAbilityImg = "-bw";
	let cAbilityImg = "-bw";
	let vAbilityImg = "-bw";
	let rAbilityImg = "-bw";
	let aAbilityCss = "generate-icon";
	let bAbilityCss = "generate-icon";
	let cAbilityCss = "generate-icon";
	let vAbilityCss = "generate-icon";
	let rAbilityCss = "generate-icon";
	let weaponImg = "weapon-bw.svg";
	let weaponCss = "generate-icon";
	let weaponTitle = "No Weapon";
	let iconPoint = "d-none";
	let upgradeLevel = "";
	if(highestUnlockPartner.upgradeLevel>0) upgradeLevel = "+"+highestUnlockPartner.upgradeLevel;
	let classImg = "my-2";
	
	let unlockPartnerAbility = highestUnlockPartner.ability.find(item => item.isActive === true);
	if(unlockPartnerAbility){
	  let abilityData = partnerAbility.find(item => item.id === unlockPartnerAbility.abilityId);
	  let abilityTypeData = abilityType.find(item => item.id === abilityData.abilityTypeId);
	  if(unlockPartnerAbility.abilityPoint > 0) iconPoint = "";
	  if(abilityTypeData){
	    switch(abilityTypeData.name.charAt(0).toLowerCase()){
	      case "a":
		    aAbilityImg = "";
		    aAbilityCss = "";
		    break;
	      case "b":
	        bAbilityImg = "";
		    bAbilityCss = "";
		    break;
	      case "c":
	        cAbilityImg = "";
		    cAbilityCss = "";
		    break;
	      case "v":
	        vAbilityImg = "";
		    vAbilityCss = "";
		    break;
	      case "r":
	        rAbilityImg = "";
		    rAbilityCss = "";
		    break;	
	    };
	  }
	}
	if(unlockPartner.weaponId >= 0){
	  let weaponUnlockItem = hero.unlockItem.find(item => item.id === unlockPartner.weaponId);
	  let weaponData = equipment.find(item => item.id === weaponUnlockItem.itemId);
	  weaponImg = showEquipmentIcon(weaponData.name,true);
	  weaponCss = "";
	  weaponTitle = weaponData.name;
	}
	if(highestUnlockPartner.enhanceLevel > 0) classImg = "";
	
	let appendPartnerListDiv = '<div class="row col-xl-3 col-lg-4 col-md-6 col-sm-6 col-12 p-1 cursor-button">';
	appendPartnerListDiv += '<div id="barracks-partner-area-' + unlockPartner.id + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0 barracks-partner-area">';
	appendPartnerListDiv += '<div id="partner-image-div-'+unlockPartner.id+'" class="col-xl-3 col-lg-4 col-md-4 col-sm-3 col-4 '+classImg+'">';
	appendPartnerListDiv += '<div class="w-100 position-absolute">';
	appendPartnerListDiv += '<div class="left-align">';
	appendPartnerListDiv += '<div class="left-align good-info"><span id="partner-upgrade-level-'+unlockPartner.id+'">'+upgradeLevel+'</span></div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '<div class="w-100 middle-align">';
	appendPartnerListDiv += '<img id="partner-image-' + unlockPartner.id + '" src="assets/images/'+partnerImg+'.svg" class="image-equipment right-align"></img>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '<div class="w-100">';
	appendPartnerListDiv += '<div class="star-div position-relative float-middle">';
	appendPartnerListDiv += '<div id="partner-enhance-div-'+unlockPartner.id+'" class="w-100 middle-align star-height">';
	let starImg = "silver-star";
	let loopStar = highestUnlockPartner.enhanceLevel;
	if(loopStar > 5){
	  starImg = "golden-star";
	  loopStar -= 5;
	}
	for(let j=0;j<loopStar;j++){
	  appendPartnerListDiv += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
	}
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '<div class="col-xl-9 col-lg-8 col-md-8 col-sm-9 col-8 px-0">';
	appendPartnerListDiv += '<div class="w-100 v-center-flex">';
	appendPartnerListDiv += '<img src="assets/images/'+partnerTypeIcon+'.svg" class="image-size" title="'+partnerData.type+'"></img>&nbsp;';
	appendPartnerListDiv += '<span id="partner-name-' + unlockPartner.id + '">' + partnerData.name + '</span>';
	appendPartnerListDiv += '&nbsp;&nbsp;&nbsp;<img id="partner-status-image-'+unlockPartner+'" src="assets/images/' + highestUnlockPartner.status.toLowerCase() + '.svg" class="image-size-static">&nbsp;';
	appendPartnerListDiv += '<span id="partner-status-text-'+unlockPartner.id+'">'+unlockPartner.status+'</span>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '<div class="w-100 v-center-flex">';
	appendPartnerListDiv += '<img id="icon-ability-a-'+unlockPartner.id+'" src="assets/images/a'+aAbilityImg+'.svg" class="image-size '+aAbilityCss+'" title="Accurate"></img>&nbsp;';
	appendPartnerListDiv += '<img id="icon-ability-b-'+unlockPartner.id+'" src="assets/images/b'+bAbilityImg+'.svg" class="image-size '+bAbilityCss+'" title="Burst"></img>&nbsp;';
	appendPartnerListDiv += '<img id="icon-ability-c-'+unlockPartner.id+'" src="assets/images/c'+cAbilityImg+'.svg" class="image-size '+cAbilityCss+'" title="Common"></img>&nbsp;';
	appendPartnerListDiv += '<img id="icon-ability-v-'+unlockPartner.id+'" src="assets/images/v'+vAbilityImg+'.svg" class="image-size '+vAbilityCss+'" title="Vast"></img>&nbsp;';
	appendPartnerListDiv += '<img id="icon-ability-r-'+unlockPartner.id+'" src="assets/images/r'+rAbilityImg+'.svg" class="image-size '+rAbilityCss+'" title="Rapid"></img>&nbsp;';
	appendPartnerListDiv += '<img id="icon-point-'+unlockPartner.id+'" src="assets/images/upgrade.svg" class="image-size-2-static '+iconPoint+'"></img>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '<div class="w-100 v-center-flex">';
	appendPartnerListDiv += '<img id="icon-image-weapon-'+unlockPartner.id+'" src="assets/images/'+weaponImg+'" class="image-size-2 '+weaponCss+'" title="'+weaponTitle+'"></img>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	appendPartnerListDiv += '</div>';
	return appendPartnerListDiv;
  };
  
  var showEquipmentList = function(unlockItem, storageType="", actionDiv="",nextMinBenefit="",nextMaxBenefit="", showInModal=false){
	let equipmentData = equipment.find(item => item.id === unlockItem.itemId);
	let partnerImg = "";
	let classImgMargin = "my-2";
	let upgradeLevel = "";
	let enhanceLevel = "";
	if(unlockItem.enhanceLevel > 0){
	  classImgMargin = "";
	  enhanceLevel = unlockItem.enhanceLevel;
	}
	if(unlockItem.upgradeLevel) upgradeLevel = "+"+unlockItem.upgradeLevel;
	let benefitName = "";
	let minValue = new Decimal(0);
	let maxValue = new Decimal(0);
	let classImage = "";
	let bonusWeaponPercentage;
	let itemIcon;
	let itemName = unlockItem.name;
	
	switch(unlockItem.itemType.toLowerCase()){
	  case "weapon":
		itemIcon = showEquipmentIcon(equipmentData.name,true);
		partnerImg = equipmentData.partnerType.toLowerCase();
		if(partnerImg == "all") partnerImg = "partner";
		
	    if(storageType=="max"){
		  benefitName = "Max Dam";
		  
		  minValue = calcHighestValue(unlockItem,"min");
		  maxValue = calcHighestValue(unlockItem,"max");
		  
		  let arrayHighestLevel = calcHighestLevel(unlockItem).split("=");
		  enhanceLevel = arrayHighestLevel[0];
		  upgradeLevel = "+"+arrayHighestLevel[1];
		}else{
		  classImage = "cursor-button";	
		  benefitName = "Dam";
		  minValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue);
		  maxValue = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue);
		}
		bonusWeaponPercentage = new Decimal(formulaPartnerWeaponDamage(unlockItem.partnerType));
		minValue = minValue.mul(bonusWeaponPercentage);
		maxValue = maxValue.mul(bonusWeaponPercentage);
		break;
	  case "ingredient":
	    itemIcon = unlockItem.name.toLowerCase()+".svg";
		break;
	}
		
	let appendItemListDiv = '<div id="'+storageType+'-image-' + unlockItem.id + '" class="col-xl-3 col-lg-4 col-md-4 col-sm-3 col-4 '+classImage+' '+classImgMargin+'">';
	appendItemListDiv += '<div class="w-100 position-absolute">';
	appendItemListDiv += '<div class="star-div mr-2 float-right">';
	appendItemListDiv += '<div class="left-align good-info">'+upgradeLevel+'</div>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '<div class="w-100 right-align">';
	appendItemListDiv += '<img src="assets/images/'+itemIcon+'" class="image-equipment right-align"></img>';
	appendItemListDiv += '</div>';
	if(enhanceLevel > 0){
	  appendItemListDiv += '<div class="w-100">';
	  appendItemListDiv += '<div class="star-div position-relative float-right">';
	  appendItemListDiv += '<div class="w-100 middle-align star-height">';
	  let starImg = "silver-star";
	  let loopStar = enhanceLevel;
	  if(loopStar > 5){
	    starImg = "golden-star";
	    loopStar -= 5;
	  }
	  for(let j=0;j<loopStar;j++){
	    appendItemListDiv += '<img src="assets/images/'+starImg+'.svg" class="star-img star-height"></img>';
	  }
	  appendItemListDiv += '</div>';
	  appendItemListDiv += '</div>';
	  appendItemListDiv += '</div>';
	}
	appendItemListDiv += '</div>';
	appendItemListDiv += '<div id="'+storageType+'-desc-' + unlockItem.id + '" class="col-xl-9 col-lg-8 col-md-8 col-sm-9 col-8 px-0 cursor-button">';
	appendItemListDiv += '<div class="w-100 v-center-flex">';
	if(partnerImg != "") appendItemListDiv += '<img src="assets/images/'+partnerImg+'.svg" class="image-size" title="'+equipmentData.partnerType+'"></img>&nbsp;';
	appendItemListDiv += '<span id="'+storageType+'-name-' + unlockItem.id + '">' + itemName + '</span>';
	appendItemListDiv += '</div>';
	if(benefitName != "") appendItemListDiv += '<div class="w-100">'+benefitName+'&nbsp;:&nbsp;<span id="'+storageType+'-min-value-' + unlockItem.id + '">' + numberFormat(minValue) + '</span>'+nextMinBenefit+' - <span id="'+storageType+'-max-value-' + unlockItem.id + '">' + numberFormat(maxValue) + '</span>'+nextMaxBenefit+'</div>';
	if(actionDiv!="") appendItemListDiv += actionDiv;
	else{
	  if(storageType == "max"){
		appendItemListDiv += '<div class="w-100">Max Upgrade : '+upgradeLevel+'</div>';
		appendItemListDiv += '<div class="w-100">Max Star : '+enhanceLevel+'</div>';
	  }
	  appendItemListDiv += '<div class="w-100"></div>';
	}
	if(unlockItem.itemType.toLowerCase() == "ingredient"){
	  appendItemListDiv += '<div class="row w-100 v-center-flex">';
	  appendItemListDiv += '<label>Sell Qty :&nbsp;</label>';
	  appendItemListDiv += '<input type="text" id="'+storageType+'-sell-qty-' + unlockItem.id + '" class="form-control validate star-div clover-sell-qty" maxlength="3" autocomplete="off" value="'+unlockItem.qty+'" required pattern="[0-9]+">';
	  appendItemListDiv += '&nbsp;Max : '+unlockItem.qty+'</div>';
	}
	appendItemListDiv += '</div>';
	return appendItemListDiv;
  };
  
  var showItemList = function(unlockItem, storageType=""){
	let itemData = material.find(item => item.id === unlockItem.itemId);
	let itemDesc = "";
	if(itemData.desc) itemDesc = itemData.desc.replace("x",itemData.benefit)+". ";
	if(itemData.refillHP != undefined) itemDesc = itemDesc+"Refill "+numberFormat(itemData.refillHP)+" HP";
	
	let useOrEquipDesc = "";
	let useOrEquipClass = "";
	let detailDesc = "";
		
	switch(unlockItem.itemType.toLowerCase()){
	  case "coin":
	    let materialData = material.find(item => item.id === unlockItem.itemId);
		let rewardCoin = new Decimal(3600).mul(materialData.benefit*0.75).mul(calcTotalRewardCoin());
		let totalLaborPrize = new Decimal(3600).mul(materialData.benefit*0.75).div(10).mul(calcTotalProduceLaborCoin());
		let totalGainCoin = new Decimal(rewardCoin).plus(totalLaborPrize).floor();
		detailDesc = "by "+numberFormat(totalGainCoin)+" coins";
	  case "ticket":
	    if(storageType=="warehouse"){
		  useOrEquipDesc = "* Only can be used in backpack";
		  useOrEquipClass = "unlock-info";
		}
		break;
	  case "ingredient":
		if(storageType=="warehouse"){
		  if(unlockItem.refillHP != undefined)useOrEquipDesc = "* Only can be used in backpack";
		  useOrEquipClass = "unlock-info";
		}
		break;
	};
	
	let appendItemListDiv = '<div id="'+storageType+'-image-' + unlockItem.id + '" class="col-xl-3 col-lg-4 col-md-4 col-sm-3 col-4 my-2 cursor-button">';
	appendItemListDiv += '<div class="w-100 position-absolute bottom-position">';
	appendItemListDiv += '<div class="star-div mr-2 float-right">';
	if(storageType != "max") appendItemListDiv += '<div class="right-align">x'+unlockItem.qty+'</div>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '<div class="w-100 right-align">';
	appendItemListDiv += '<img src="assets/images/'+showEquipmentIcon(itemData.name,true)+'" class="image-equipment right-align"></img>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '<div id="'+storageType+'-desc-' + unlockItem.id + '" class="col-xl-9 col-lg-8 col-md-8 col-sm-9 col-8 px-0 cursor-button">';
	appendItemListDiv += '<div class="w-100 v-center-flex">';
	appendItemListDiv += '<span id="'+storageType+'-name-' + unlockItem.id + '">' + itemData.name + '</span>';
	appendItemListDiv += '</div>';
	appendItemListDiv += '<div class="w-100 v-center-flex">';
	appendItemListDiv += '<span id="'+storageType+'-desc-' + unlockItem.id + '">' + itemDesc + '</span>';
	appendItemListDiv += '</div>';
	if(detailDesc != ""){
	  appendItemListDiv += '<div class="w-100 v-center-flex">';
	  appendItemListDiv += '<span id="">'+detailDesc+'</span>';
	  appendItemListDiv += '</div>';
	}
	if(useOrEquipDesc != ""){
	  appendItemListDiv += '<div class="w-100 v-center-flex '+useOrEquipClass+'">';
	  appendItemListDiv += '<span id="'+storageType+'-note-' + unlockItem.id + '">' + useOrEquipDesc + '</span>';
	  appendItemListDiv += '</div>';
	}
	appendItemListDiv += '</div>';
	return appendItemListDiv;
  };
  
  var checkCanEquipEquipment = function(gradeId){
	let gradeEquipmentData = gradeEquipment.find(item => item.id === gradeId);
	if(gradeEquipmentData.reqFloor <= hero.highestFloor) return true;
	else return false;
  };
  
  var showWarehouseHeader = function(){
	if(hero.highestFloor >= unlockNewFeatureFloor("equipment")) componentAction ("warehouse-header2-equipment", "removeClass", "d-none");
	else componentAction ("warehouse-header2-equipment", "addClass", "d-none");
  };
  
  var showWarehouseArea = function(storageType="backpack",selectedFilterItem=null,selectedSortingItem=null){
	showWarehouseTab(storageType);
	if(hero.highestFloor >= unlockNewFeatureFloor("warehouse")){
	  componentAction ("warehouse-header2", "updateClass", "d-none,d-flex");
	  showWarehouseHeader();
	  let listStorage = hero.unlockItem.filter(item => item.storageType === storageType && item.qty > 0);
	  if(selectedFilterItem==null){
		$("#item-filter").val("all");
	  }else{
		$("#item-filter").val(selectedFilterItem);  
		if(selectedFilterItem!="all") listStorage = listStorage.filter(item => item.itemType === selectedFilterItem);
	  }
	  if(selectedSortingItem==null){
		$("#item-sorting").val("grade");
	    sortingItem();
	  }else{
		$("#item-sorting").val(selectedSortingItem);
	  }
	  if( $("#"+storageType+"-unlock-div").length) $("#"+storageType+"-unlock-div").remove();
	  
	  let appendStorageDiv = "";
	  let canUseItem = true;
	 
	  for(let i=0;i<listStorage.length;i++){
		let totalSphere = 0;
		let totalBlueprint = 0;
		let sellSphere = 0;
		let actionType = "";
		let isEquipmentList = false;
		let useOrEquip = "";
		let useOrEquipDisable = "";
		let useOrEquipClass = "";
		let canSell = false;
		let forceConfirmUseItem = false;
		
		switch(listStorage[i].itemType.toLowerCase()){
		  case "weapon":
		    totalSphere = calculateItemSphere(listStorage[i]);
			sellSphere = calculateSellSphere(totalSphere);
			actionType = checkNextActionItem(listStorage[i]);
			isEquipmentList = true;
			let canEquip = checkCanEquipEquipment(listStorage[i].gradeId);
			if(canEquip){
			  useOrEquip = "Equip";
			  useOrEquipDisable = "";
			  useOrEquipClass = "";
			}else{
			  let gradeEquipmentData = gradeEquipment.find(item => item.id === listStorage[i].gradeId);
			  useOrEquip = "Need Stage "+gradeEquipmentData.reqFloor;
			  useOrEquipDisable = "disabled";
			  useOrEquipClass = "cursor-default";
			}		
			break;
		  case "ingredient":
		    canSell = true;
			let materialData = material.find(item => item.id === listStorage[i].itemId);
			if(materialData.canSell != undefined) canSell = materialData.canSell;
			totalSphere = materialData.clover;
			sellSphere = calculateSellSphere(totalSphere);
			if(materialData.refillHP == undefined){
			  useOrEquipClass = "d-none";
			  useOrEquip = "";
			}else{
			  useOrEquipClass = "";
			  if(storageType.toLowerCase() == "warehouse") useOrEquip = "";
			  else useOrEquip = "Use";
			  forceConfirmUseItem = true;
			}
			break;
		  case "coin":
		  case "ticket":
		    actionType = "Use";
			if(storageType=="warehouse"){
			  useOrEquipDisable = "disabled";
			  useOrEquipClass = "d-none";
			}else useOrEquip = "Use";
			break;
		};
		
		let benefitName = "";
		let newItemClass = "";
		if(listStorage[i].newItem == true) newItemClass = "notif-icon";
		
		switch(listStorage[i].itemType.toLowerCase()){
		  case "weapon":
			benefitName = "Dam";
			break;
		}
		let otherStorage = "";
	    switch(storageType.toLowerCase()){
		  case "warehouse":
		    otherStorage = "Withdraw";
		    break;
		  case "backpack":
		    otherStorage = "Deposit";
		    break;  
	    };
		let actionDesc = "";
		switch(actionType.toLowerCase()){
		  case "upgrade":
			actionDesc = '<img src="assets/images/gear.svg" class="image-size mb-05">'+numberFormat(totalSphere);
			break;
		  case "enhance":
		    let totalBlueprint = calculateItemBlueprint(listStorage[i]);
		    actionDesc = '<img src="assets/images/blueprint.svg" class="image-size mb-05">'+numberFormat(totalBlueprint);
			break;
		};
	
		if( !$( "#"+storageType+"-item-area-" + listStorage[i].id ).length){
		  let appendStorageDiv = "";	
		  appendStorageDiv += '<div class="row col-xl-3 col-lg-4 col-md-6 col-sm-6 col-12 p-1">';
		  appendStorageDiv += '<div id="'+storageType+'-item-area-' + listStorage[i].id + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0 '+newItemClass+'">';
		  
		  if(isEquipmentList) appendStorageDiv += showEquipmentList(listStorage[i],storageType,"","","",true);
		  else appendStorageDiv += showItemList(listStorage[i],storageType);
		  appendStorageDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mt-1 p-0">';
		  
		  if(useOrEquip != ""){
			appendStorageDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 px-0 v-center-flex">';
		    appendStorageDiv += '<button id="equip-item-button-' + listStorage[i].id + '" class="upgrade-level-button '+useOrEquipClass+'" value="'+listStorage[i].id+'" '+useOrEquipDisable+'>'+useOrEquip+'</button>';
		    appendStorageDiv += '</div>';
		  }

		  appendStorageDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 px-0 v-center-flex">';
		  appendStorageDiv += '<button id="move-item-button-' + listStorage[i].id + '" class="upgrade-level-button" value="'+listStorage[i].id+'">' + firstLetterFormat(otherStorage,"uppercase") + '</button>';
		  appendStorageDiv += '</div>';
		  if(isEquipmentList || canSell){
			let sellIcon = "gear";
			if(canSell) sellIcon = "clover";
		    appendStorageDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 px-0 v-center-flex">';
		    appendStorageDiv += '<button id="sell-item-button-' + listStorage[i].id + '" class="upgrade-level-button" value="'+listStorage[i].id+'">Sell <img src="assets/images/'+sellIcon+'.svg" class="image-size mb-05">'+numberFormat(sellSphere)+'</button>';
		    appendStorageDiv += '</div>';
		  }
		  if(isEquipmentList){
		    appendStorageDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6 px-0 v-center-flex">';
		    appendStorageDiv += '<button id="action-item-button-' + listStorage[i].id + '" class="upgrade-level-button" value="'+listStorage[i].id+'">'+actionType+' '+actionDesc+'</button>';
		    appendStorageDiv += '</div>';
		  }
		  
		  appendStorageDiv += '</div>';
		  appendStorageDiv += '</div>';
		  appendStorageDiv += '</div>';
		  
		  $("#"+storageType+"-area-div").append(appendStorageDiv).off('click','#equip-item-button-'+ listStorage[i].id).on('click','#equip-item-button-'+ listStorage[i].id,function(){
		    if(isEquipmentList) compareItemWithEquip(this,storageType); 
			else{
			  if(hero.settingConfirmUseItem || forceConfirmUseItem) confirmUseItem(this,storageType);
			  else useItem(listStorage[i].id);
			}
	      }).off('click','#sell-item-button-'+ listStorage[i].id).on('click','#sell-item-button-'+ listStorage[i].id,function(){
		    if(hero.settingConfirmSellUpgrade) confirmActionItem(this,storageType,"sell");
			else sellItem(listStorage[i].id);
	      }).off('click','#move-item-button-'+ listStorage[i].id).on('click','#move-item-button-'+ listStorage[i].id,function(){
		    moveItem(this,storageType); 
	      }).off('click','#action-item-button-'+ listStorage[i].id).on('click','#action-item-button-'+ listStorage[i].id,function(){
		    if(hero.settingConfirmSellUpgrade) confirmActionItem(this,storageType,actionType.toLowerCase()); 
			else actionItem(listStorage[i].id+"="+actionType.toLowerCase());
	      }).off('click','#'+storageType+'-image-'+ listStorage[i].id).on('click','#'+storageType+'-image-'+ listStorage[i].id,function(){
		    showModalItem(listStorage[i].id,storageType); 
	      }).off('click','#'+storageType+'-desc-'+ listStorage[i].id).on('click','#'+storageType+'-desc-'+ listStorage[i].id,function(){
		    showModalItem(listStorage[i].id,storageType); 
	      });
		}else{
			
		}
	  }
	  if(listStorage.length == 0){
		if(!$( "#"+storageType+"-empty-div").length){
		  let appendEmptyDiv = '<div id="'+storageType+'-empty-div" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 good-info middle-content p-1">Your '+storageType+' is empty';
		  $("#"+storageType+"-area-div").append(appendEmptyDiv);
		}
	  }
	}else{
	  componentAction ("warehouse-header2", "updateClass", "d-flex,d-none");
	  if(!$( "#"+storageType+"-unlock-div").length){
	    let appendStorageDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1">';
		appendStorageDiv += '<div id="'+storageType+'-unlock-div" class="rounded-card unlock-info middle-align col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0">Unlock this '+storageType+' at stage ' + unlockNewFeatureFloor("equipment") + ' </div>';
		appendStorageDiv += '</div>';
	    $("#"+storageType+"-area-div").append(appendStorageDiv);
	  }
	}
	calcHeightScrollDiv("warehouse");  
  };
  
  var updateHeroClover = function(){
	componentAction("span-hero-clover","replaceText",numberFormat(hero.clover));  
  };
  
  var showTavernInfo = function(type=""){
	if(type == "quest"){
	  return 'Please choose which quest do you want to go';
	}else{
	  return 'Welcome to '+hero.kingdomName+' Tavern. Who do you want to talk to?';
	}
  };
  
  var checkAvailableRunQuest = function(){
	let canRunQuest = true;
	let healMaterial = hero.unlockItem.filter(item => item.refillHP > 0 && item.qty > 0);
	if(healMaterial.length == 0 && hero.clover < 10){
	  let availableArmy = hero.unlockArmy.filter(item => item.status !== "Died");
	  if(availableArmy.length == 0){
		canRunQuest = false;
	  }
	}
	return canRunQuest;
  };
  
  var checkAvailableHealItem = function(){
	if(!checkAvailableRunQuest()){
	  let bartenderTalk = "";
	  let date = new Date();
	  let currentDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	  let msPerDay = 1000 * 60 * 60 * 24;
	  let dateDiff = Math.floor((currentDate -  hero.lastFreeDrink) / msPerDay);
	  if(dateDiff > 0){
	    bartenderTalk = 'Hello my king/queen. I see all your army is dead <br> I give 1 special drink for free to heal your army <br> You can find in your backpack <br> Hope you can run another quest with your army';
		
		let selectedDropMaterial = material.find(item => item.name === "Special Drink");
	    insertNewUnlockItem(selectedDropMaterial.id,1,selectedDropMaterial.type,selectedDropMaterial.name,"all","backpack",true);
		hero.lastFreeDrink = currentDate; 
	  }else{
		bartenderTalk = 'Hello my king/queen. I see all your army is dead <br> But I am run out of my special drink <br> I only make it once a day <br> You can come back again to me tommorow';
	  }
	  if(hero.userGender == "male") bartenderTalk = bartenderTalk.replace("king/queen","king "+hero.userName);
	  else bartenderTalk = bartenderTalk.replace("king/queen","queen "+hero.userName);
		
	  if( !$( "#tavern-content" ).length){
		let appendDialogDiv = '<div id="tavern-content" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0 d-none">';
		appendDialogDiv += '<div id="people-dialog" class="row rounded-card">'+bartenderTalk+'</div>';
		appendDialogDiv += '</div>';
		$("#tavern-area-div").append(appendDialogDiv);
	  }else{
		$("#people-dialog").empty();
		$("#people-dialog").append(bartenderTalk);
	  }
	  componentAction("tavern-content","removeClass","d-none");
	  componentAction("quest-info","addClass","d-none");
	  componentAction("quest-content","addClass","d-none");
	}  
  };
  
  var showTavernArea = function(tabType=""){
	showArea("tavern");
	componentAction("story-start-quest","addClass","d-none");
	updateHeroClover();
	if(hero.highestFloor >= unlockNewFeatureFloor("camp")){
	  if( !$( "#tavern-info" ).length){
		$( "#tavern-info" ).remove();
	    let infoTavernDiv = '<div id="tavern-info" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-1 pt-1 unlock-info">';
		infoTavernDiv += showTavernInfo();
	    infoTavernDiv += '</div>';
		infoTavernDiv += '<div id="tavern-people" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 pt-1 p-0"></div>';
		if(infoTavernDiv != "") $("#tavern-area-div").append(infoTavernDiv);
	  }
	  let currentDate = Date.now();
	  let date = new Date();
	  let bartenderGender = "female";
	  let maxHours = Math.ceil(date.getHours()/8)*8;
	  let timeName = timeNameFormat(maxHours);
	  if(timeName.toLowerCase()=="evening")bartenderGender = "male";
	  
	  let maxTime = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), maxHours);	  
	  if(hero.tavernPeople.maxTime !== maxTime){
		$( "#tavern-people" ).empty();
		let countPeople = (Math.ceil(Math.random()*100)%setting.maxPeopleInTavern)+4;
		if(countPeople > setting.maxPeopleInTavern) countPeople = setting.maxPeopleInTavern;
		
		hero.tavernPeople = {
	      maxTime: maxTime,
	      countPeople: countPeople,
		  people: [],
	    };
		
		let countMale = Math.random() * countPeople;
		let random = -1;
		let peopleData;
		let newObjName;
		let name;
		let selectedGender = "M";
		for(let i=0;i<countPeople;i++){
		  peopleData = undefined;
		  if(i >= countMale) selectedGender = "F";
			random = Math.random() * 100;
			if(peopleData == undefined && random <= 5){
			  peopleData = people.find(item => item.gender === selectedGender && item.percentage === 5 && item.appearance === timeName);
			}
			if(peopleData == undefined && random <= 15) peopleData = people.find(item => item.gender === selectedGender && item.percentage === 15 && item.appearance === timeName);
			if(peopleData == undefined) peopleData = people.find(item => item.gender === selectedGender && item.percentage === 100);
			name = peopleData.name[Math.floor(Math.random() * peopleData.name.length)];
			
			let selectedTavernPeople = hero.tavernPeople.people.find(item => item.name === name);
			let selectedDialog = "";
			while(selectedTavernPeople){
			  name = peopleData.name[Math.floor(Math.random() * peopleData.name.length)];
			  selectedTavernPeople = hero.tavernPeople.people.find(item => item.name === name);
			}
			if(name!=""){
			  let selectedPeopleDialog = peopleDialog.find(item => item.name === name);
			  selectedDialog = selectedPeopleDialog.dialog;
			  if(hero.userGender == "male") selectedDialog = selectedDialog.replace("king/queen","king");
			  else selectedDialog = selectedDialog.replace("king/queen","queen");
			}
			newObjName = {
			  name: name,
			  type: peopleData.type,
			  dialog: selectedDialog,
			};
			hero.tavernPeople.people.push(newObjName);
		}
	  }
	  let appendTavernDiv = "";
	  if( !$( "#people-area-bartender" ).length){
	    appendTavernDiv += '<div id="people-area-bartender" class="row col-xl-1 col-lg-15 col-md-2 col-sm-25 col-3 p-1 cursor-button tavern-people">';
	    appendTavernDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0">';
	    appendTavernDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 middle-content">';
	    appendTavernDiv += '<img src="assets/images/people/bartender-'+bartenderGender+'.svg" class="container-img"></img>';
	    appendTavernDiv += '</div>';
	    appendTavernDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 middle-content">Bartender</div>';
	    appendTavernDiv += '</div>';
	    appendTavernDiv += '</div>';
	  }
	  
	  for(let i=0;i<hero.tavernPeople.countPeople;i++){
		let tavernPeople = hero.tavernPeople.people[i];
		if( !$( "#people-area-" + tavernPeople.name.toLowerCase().replace(" ","-") ).length){
		  appendTavernDiv += '<div id="people-area-' + tavernPeople.name.toLowerCase().replace(" ","-") + '" class="row col-xl-1 col-lg-15 col-md-2 col-sm-25 col-3 p-1 cursor-button tavern-people">';
		  appendTavernDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0">';
		  appendTavernDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 middle-content">';
		  appendTavernDiv += '<img src="assets/images/people/'+tavernPeople.name.toLowerCase().replace(" ","-")+'.svg" class="container-img"></img>';
		  appendTavernDiv += '</div>';
		  appendTavernDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-0 middle-content">'+tavernPeople.name+'</div>';
		  appendTavernDiv += '</div>';
		  appendTavernDiv += '</div>';
		}
	  }
	  $("#tavern-people").append(appendTavernDiv).off('click','.tavern-people').on('click','.tavern-people',function(){
		showDetailPeople(this.id.replace('people-area-',''));
	  });
	  
	  if( !$( "#tavern-content" ).length){
	    let appendDialogDiv = '<div id="tavern-content" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0 d-none">';
		appendDialogDiv += '<div id="people-dialog" class="row rounded-card"></div>';
		appendDialogDiv += '</div>';
	    $("#tavern-area-div").append(appendDialogDiv);
	  }else componentAction("tavern-content","addClass","d-none");
	  
	  if($( "#quest-info" ).length){
		componentAction("quest-info","addClass","d-none");
		componentAction("quest-content","addClass","d-none");
	  }
	  
	  if($( "#tavern-story" ).length){
		componentAction("tavern-story","addClass","d-none");
	  }
	  if(tabType == "cave"){
	    showDetailPeople("Bartender");
		bartenderAction("take-quest");
	  }
	  checkAvailableHealItem();
	}else{
	  if( !$("#tavern-unlock-div").length){	
	    let unlockInformation = "Unlock this tavern at stage "+unlockNewFeatureFloor("camp");
	    let appendTavernDiv = '<div id="tavern-unlock-div" class="w-100 rounded-card middle-align unlock-info">' + unlockInformation + '</div>';
	    $("#tavern-area-div").append(appendTavernDiv);
	  }
	}
	calcHeightScrollDiv("tavern");
  };
  
  var showCanteenArea = function(tabType){
	showArea("canteen");
	
	calcHeightScrollDiv("canteen");
  };
  
  var showDetailPeople = function(selectedName){
	hideAllTavernContent();
	componentAction("story-start-quest","addClass","d-none");
	selectedName = firstLetterFormat(selectedName,"uppercase");  
	let appendDetailDialogDiv = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 good-info">'+selectedName+'</div>';
	if(selectedName.toLowerCase() == "bartender"){
	  let gender = "King";
	  if(hero.userGender == "female") gender = "Queen";
	  
	  let questText = "Take Quest";
	  let milkMaterialData = material.find(item => item.name === "Milk");
	  let coffeeMaterialData = material.find(item => item.name === "Coffee");
	  let cloverImg = '<img src="assets/images/clover.svg" class="image-size">';
	  appendDetailDialogDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0">Hello my '+gender+' '+hero.userName+'. May I help you ? Do you want to hear my story, take quest or buy milk and coffee to heal your army ?</div>';
	  appendDetailDialogDiv += '<div id="tavern-hear-story" class="col-xl-3 col-lg-3 col-md-3 col-sm-6 col-6 rounded-card m-0 cursor-button middle-align text-primary my-1">Hear Story</div>';
	  appendDetailDialogDiv += '<div id="tavern-buy-milk" class="col-xl-3 col-lg-3 col-md-3 col-sm-6 col-6 rounded-card m-0 cursor-button middle-align text-primary my-1">Buy Milk - '+milkMaterialData.clover+'&nbsp;'+cloverImg+'</div>';
	  appendDetailDialogDiv += '<div id="tavern-buy-coffee" class="col-xl-3 col-lg-3 col-md-3 col-sm-6 col-6 rounded-card m-0 cursor-button middle-align text-primary my-1">Buy Coffee - '+coffeeMaterialData.clover+'&nbsp;'+cloverImg+'</div>';
	  appendDetailDialogDiv += '<div id="tavern-ask-quest" class="col-xl-3 col-lg-3 col-md-3 col-sm-6 col-6 rounded-card m-0 cursor-button middle-align text-primary my-1">'+questText+'</div>';
	}else{
	  if(selectedName != ""){
	    let tavernPeopleData = hero.tavernPeople.people.find(item => item.name === selectedName);
		let selectedDialog = tavernPeopleData.dialog;
		
		if(hero.userGender == "male") selectedDialog = selectedDialog.replace("king/queen","king");
		else selectedDialog = selectedDialog.replace("king/queen","queen");
	    
		switch(selectedName.toLowerCase()){
		  case "gaby":
		    if(hero.highestFloor >= unlockNewFeatureFloor("cave")){
			  let availableArmy;
			  if(tavernPeopleData.availableArmy == undefined){
				let random = Math.random()*100;  
			    if(random <= 50 && hero.countArmy > 0){
			      availableArmy = false;
				  tavernPeopleData.availableArmy = false;
			      selectedDialog = "I'm so sorry, there's no new army yet. <br/> I will try to bring it next time.";
				  tavernPeopleData.dialog = selectedDialog;
			    }else{
				  availableArmy = true;
				  tavernPeopleData.availableArmy = true;
				}
			  }else availableArmy = tavernPeopleData.availableArmy;
		      if(selectedDialog) appendDetailDialogDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0">'+selectedDialog+'</div>';
			  if(availableArmy){
			    appendDetailDialogDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6">';
			    appendDetailDialogDiv += '<button id="hire-army-ok-button" class="dpc-button btn-primary">Yes, Hire It</button>';
			    appendDetailDialogDiv += '</div>';
			    appendDetailDialogDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6 col-6">';
			    appendDetailDialogDiv += '<button id="hire-army-no-button" class="dpc-button btn-secondary">No, Thank You</button>';
			    appendDetailDialogDiv += '</div>';
			  }
			}else{
			  selectedDialog = selectedDialog.replace("do you want to hire new army ?","I travel around the kingdom to find the best army.");
			  appendDetailDialogDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0">'+selectedDialog+'</div>';
			}
		    break;
		  default:
		    if(selectedDialog) appendDetailDialogDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0">'+selectedDialog+'</div>';
			break;
		};
      }
	}
	$("#people-dialog").empty();
	componentAction("tavern-content","removeClass","d-none");
	showQuestArea(false,"tavern");
	switch (selectedName.toLowerCase()){
	  case "bartender" :
	    $("#people-dialog").append(appendDetailDialogDiv).off('click','#tavern-hear-story').on('click','#tavern-hear-story',function(){
		  bartenderAction("hear-story");
	    }).off('click','#tavern-buy-milk').on('click','#tavern-buy-milk',function(){
		  bartenderAction("buy-milk");
	    }).off('click','#tavern-buy-coffee').on('click','#tavern-buy-coffee',function(){
		  bartenderAction("buy-coffee");
	    }).off('click','#tavern-ask-quest').on('click','#tavern-ask-quest',function(){
		  bartenderAction("take-quest");
	    });
	    break;
	  case "gaby":
	    $("#people-dialog").append(appendDetailDialogDiv).off('click','#hire-army-ok-button').on('click','#hire-army-ok-button',function(){
		  hireArmy();
	    }).off('click','#hire-army-no-button').on('click','#hire-army-no-button',function(){
		  componentAction("people-dialog","addClass","d-none");
	    });
		break;
	  default:
	    $("#people-dialog").append(appendDetailDialogDiv);
		break;
	}
  };
  
  var checkNewArmyStat = function(newObjArmy,selectedArmyType){
	let countArmyType = newObjArmy.stat.length;
	let armyTypeData = armyType.find(item => item.type === selectedArmyType);
	
	let armyAtk = 1+armyTypeData.bonusAtk;
	let armyAgi = 0+armyTypeData.bonusAgi;
	let armyDef = 1+armyTypeData.bonusDef;
	let armyDex = 0+armyTypeData.bonusDex;
	
	let newObjArmyStat = {
	  id:countArmyType,
	  type:selectedArmyType,
	  level:1,
	  point:3,
	  exp:0,
	  maxExp:5,
	  hp:(20+armyTypeData.bonusHp),
	  maxHp:(20+armyTypeData.bonusHp),
	  atk:armyAtk,
	  def:armyDef,
	  agi:armyAgi,
	  dex:armyDex,
	  critChance:(0+armyTypeData.bonusCritChance),
	  critDmg:calcCritDmg(armyAtk,armyAgi),
	  critDef:calcCritDmg(armyDef,armyDex),
	}; 
	return newObjArmyStat;
  };
  
  var hireArmy = function(firstHire=false){
	let armyGenderRandom = Math.random()*100;
	let armyName = "";
	let armyGender = "Female";
	while(armyName == ""){
	  if(armyGenderRandom <= 50){
	    armyName = army.male[Math.floor(Math.random() * army.male.length)];
		armyGender = "Male";
	  }else armyName = army.female[Math.floor(Math.random() * army.male.length)];
	  
	  let unlockArmy = hero.unlockArmy.find(item => item.name === armyName);
	  if(unlockArmy) armyName = "";
	  else{
		let objStatArmy;
		let availableArmyType = [];
		let searchIndex;
		
		for(let i=0;i<partner.length;i++){
		  searchIndex = availableArmyType.indexOf(partner[i].type);
		  if (searchIndex === -1){
			availableArmyType.push(partner[i].type);
		  }
		}
		let currentArmyType = availableArmyType[Math.floor(Math.random() * availableArmyType.length)];
		
		let newObjArmy = {
		  id: hero.countArmy,
		  name: armyName,
		  gender: armyGender,
		  currentType: currentArmyType,
		  status: "Resting",
		  stat:[],
		  caveId: -1,
		  caveSlot: -1,
		  endQuestTime: 0,
		};		
		
		objStatArmy = checkNewArmyStat(newObjArmy,currentArmyType);
		newObjArmy.stat.push(objStatArmy);
		hero.unlockArmy.push(newObjArmy);
		hero.countArmy += 1;
		
		if(!firstHire){
		  $("#people-dialog").empty();
		  let appendDetailDialogDiv = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 good-info">'+armyName+'</div>';
		  if(hero.userGender == "male") appendDetailDialogDiv += "Greetings my king";
		  else appendDetailDialogDiv += "Greetings my queen";
		  appendDetailDialogDiv += ", my name is "+armyName+", will serve as your "+currentArmyType+" army. <br/> I am very honored to be able to serve you. <br/>You can see my detail at army camp in barracks menu.";
		  $("#people-dialog").append(appendDetailDialogDiv);
		
		  let deleteIndex = hero.tavernPeople.people.findIndex(function(e){
		    return e.name === "Gaby";
		  });
		  if (deleteIndex !== -1){
		    hero.tavernPeople.people.splice(deleteIndex, 1);
		    hero.tavernPeople.countPeople -= 1;
		  }
		  $("#people-area-gaby").remove();
		}
	  }
	}
  };
  
  var hideAllTavernContent = function(){
	componentAction("quest-info","addClass","d-none");
	componentAction("quest-content","addClass","d-none");
	componentAction("tavern-story","addClass","d-none");  
  };
  
  var bartenderAction = function(actionName){
	hideAllTavernContent();
	switch(actionName){
	  case "hear-story":
	    showTavernStory();
		break;
	  case "buy-milk":
	    componentAction("buy-sell-action","replaceText","How many milk do you want to buy ?");
		componentAction("buy-sell-button","replaceText","Buy");
		componentAction("buy-sell-item","replaceText","Milk");
		componentAction("total-clover","replaceText","0");
		componentAction("buy-sell-name","inputText","Milk");
		componentAction("buy-sell-qty","inputText","");
		$("#modalBuySell").modal("show");
		$("#buy-sell-qty").focus();
		break;
	  case "buy-coffee":
	    componentAction("buy-sell-action","replaceText","How many coffee do you want to buy ?");
		componentAction("buy-sell-button","replaceText","Buy");
		componentAction("buy-sell-item","replaceText","Coffee");
		componentAction("total-clover","replaceText","0");
		componentAction("buy-sell-name","inputText","Coffee");
		componentAction("buy-sell-qty","inputText","");
		$("#modalBuySell").modal("show");
		$("#buy-sell-qty").focus();
		break;
	  case "take-quest":
		if(hero.highestFloor >= unlockNewFeatureFloor("cave")){
	      if(hero.countArmy == 0) startArmyStory();
		  else showQuestArea(true,"tavern");
		}else{
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "Unlock this quest at stage " + unlockNewFeatureFloor("cave"));
		}
		break;
	};
  };
  
  var randomTavernStory = function(){
	let date = new Date();
	let currentDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	let randomNewStory = true;
	let selectedStory = "";
	
	if(hero.tavernStory){
	  if(hero.tavernStory.date === currentDate){
		randomNewStory = false;
		selectedStory = hero.tavernStory.story;
	  }else selectedStory = unlockTavernStory.story;
	}
	if(randomNewStory){
	  let randomPercentage = Math.random() * 100;
	  let availableTavernStory = tavernStory.filter(item => item.unlockReqFloor <= hero.highestFloor && item.percentage >= randomPercentage);
	  let selectedTavernStory = availableTavernStory[Math.floor(Math.random() * availableTavernStory.length)];
	  hero.tavernStory = {
		date: currentDate,
		story: selectedTavernStory.desc,
	  };
	  selectedStory = selectedTavernStory.desc;
	}
	return selectedStory;
  };
  
  var showTavernStory = function(){
	if( !$( "#tavern-story" ).length ){
	  $( "#tavern-story" ).remove();
	  let infoTavernStoryDiv = '<div id="tavern-story" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-0">';
	  infoTavernStoryDiv += '<div class="row rounded-card">';
	  infoTavernStoryDiv += randomTavernStory();
	  infoTavernStoryDiv += '</div>';
	  infoTavernStoryDiv += '</div>';
	  $("#tavern-area-div").append(infoTavernStoryDiv);
	}else componentAction("tavern-story","removeClass","d-none");  
  };
  
  var showCaveContentDiv = function(pageName){
	let contentQuestDiv = "";
	for(let i=0;i<cave.length;i++){
	  let caveStatus = "idle";	
	  let caveStatusClass = "good-info";
	  let unlockArmy = hero.unlockArmy.find(item => item.status === "on progress" && item.caveId === i);
	  if(unlockArmy){
		caveStatus = "on progress";
		caveStatusClass = "unlock-info";
	  }
	  let divClass = "";
	  let slotClass = "";
	  let divName = "";
	  if(pageName == "tavernQuest"){
		divClass = "cursor-button";
		divName = "popup-";
	  }
	  contentQuestDiv += '<div id="'+divName+'cave-'+cave[i].id+'" class="row col-xl-4 col-lg-4 col-md-4 col-sm-6 col-6 px-0 cave-detail '+divClass+'">';
	  contentQuestDiv += '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0">';
	  contentQuestDiv += '<div class="row col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 px-0">';
	  contentQuestDiv += '<img src="assets/images/'+cave[i].name.replace(" ","-").toLowerCase()+'.svg" class="container-img"></img>';
	  contentQuestDiv += '</div>';
	  contentQuestDiv += '<div class="row col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 px-0">';
	  contentQuestDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">'+cave[i].name+'</div>';
	  contentQuestDiv += '<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 pr-0 v-center-flex"><img src="assets/images/attack.svg" class="image-size" title="Attack"></img>&nbsp;'+cave[i].minAtk+'-'+cave[i].maxAtk+'</div>';
	  contentQuestDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 v-center-flex"><img src="assets/images/agility.svg" class="image-size" title="Agility"></img>&nbsp;'+cave[i].agi+'</div>';
	  contentQuestDiv += '<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8 pr-0 v-center-flex"><img src="assets/images/defence.svg" class="image-size" title="Defence"></img>&nbsp;'+cave[i].minDef+'-'+cave[i].maxDef+'</div>';
	  contentQuestDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 v-center-flex"><img src="assets/images/dexterity.svg" class="image-size" title="Dexterity"></img>&nbsp;'+cave[i].dex+'</div>';
	  contentQuestDiv += '</div>';
	  for(let j=0;j<setting.maxCaveOpenSlot;j++){
		let armyName = '<img src="assets/images/lock.svg" class="image-size"></img>';
		let unlockArmy = hero.unlockArmy.find(item => item.caveId === cave[i].id && item.caveSlot === j);
		if(unlockArmy) armyName = unlockArmy.name;
		else{
		  let unlockCave = hero.unlockCave.find(item => item.id === cave[i].id);
		  if(j < unlockCave.availableSlot) armyName = "------";
		  else{
			if(pageName == "caveArea"){
			  slotClass = "cursor-button unlock-slot";
			  armyName = '<img src="assets/images/token.svg" class="image-size"></img>&nbsp;'+numberFormat(j * setting.defaultUnlockCaveSlotFee);
			}
		  }
		}
		contentQuestDiv += '<div id="'+divName+'cave-slot-'+cave[i].id+'-'+j+'" class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 mx-0 middle-content v-center-flex rounded-card '+slotClass+'">'+armyName+'</div>';
	  }
	  contentQuestDiv += '</div>';
	  contentQuestDiv += '</div>';
	}
	return contentQuestDiv;
  };
  
  var showQuestArea = function(isShow=true,page=""){
	if(isShow){
	  if( !$( "#quest-info" ).length ){
	    $( "#quest-info" ).remove();
	    let infoQuestDiv = '<div id="quest-info" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 px-1 pt-1 unlock-info">';
	    infoQuestDiv += showTavernInfo("quest");
	    infoQuestDiv += '</div>';
	    if(infoQuestDiv != ""){
		  switch(page){
			case "tavern":  
			  $("#tavern-area-div").append(infoQuestDiv);
			  break;
		  }
		}
	  }else componentAction("quest-info","removeClass","d-none");
	  
	  if( !$( "#quest-content" ).length){
	    let contentQuestDiv = '<div id="quest-content" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1">';
	    contentQuestDiv += showCaveContentDiv("tavernQuest");
	    contentQuestDiv += '</div>';
	    if(contentQuestDiv != "") $("#tavern-area-div").append(contentQuestDiv).off("click",".cave-detail").on("click",".cave-detail",function(){
		  showDetailCaveArea(this.id.replace("popup-cave-",""),page);
		});
	  }else{
		componentAction("quest-content","removeClass","d-none");
		for(let i=0;i<cave.length;i++){
		  let caveStatus = "idle";	
		  let unlockCave = hero.unlockArmy.find(item => item.status === "on progress" && item.caveId === i);
		  if(unlockCave) caveStatus = "on progress";
		  updateCaveStatus(i);
		}
	  }
	}else{
	  componentAction("quest-info","addClass","d-none");
	  componentAction("quest-content","addClass","d-none");
	}
	checkCssSetting();
  };
  
  var startArmyStory = function(){
	if(!$("#story-start-quest").length){
	  let questDesc = "";
	  if(hero.countArmy == 0){
		let date = new Date();
		let maxHours = Math.ceil(date.getHours()/8)*8;
		let timeName = timeNameFormat(maxHours);
		
	    let peopleData = people.find(item => item.type === "story" && item.gender === "M");
		let tavernPeople = hero.tavernPeople.people.find(item => item.name === "Gaby");
		
		if(tavernPeople){
		  questDesc = "You came at the right time, Gaby is here. </br> You can hire an army from her to run the quest. <br/> Go talk to her.";
		}else{
		  if(peopleData) questDesc = "You need to find Gaby. She can provide you army to run the quest. </br> ";
		  if(timeName != peopleData.appearance){
			questDesc += "Gaby sometimes comes here at "+peopleData.appearance+" (16.00 - 24.00), so come back later.";
		  }else{
			questDesc += "Gaby didn't come this "+peopleData.appearance+" (16.00 - 24.00). You can try to comeback next "+peopleData.appearance+" (16.00 - 24.00).";
		  }
		}
	  }
	  let appendQuestDiv = '<div id="story-start-quest" class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0 p-0">';
	  appendQuestDiv += '<div id="quest-story" class="row rounded-card">'+questDesc+'</div>';
	  appendQuestDiv += '</div>';
	  $("#tavern-area-div").append(appendQuestDiv);
	}else componentAction("story-start-quest","removeClass","d-none");
  };
  
  var calculateBuySellClover = function(itemName,itemQty){
	let materialData = material.find(item => item.name === itemName);
	let totalClover = materialData.clover * itemQty;
	return totalClover;
  };
  
  var showPetArea = function(selectedZoneId=-1,selectedSlotId=-1){
	let unlockReqText = '';
	let isReachReqFloor = true;
	let nextUnlockPet = 0;
	
	checkCooldownAdventureTimer();
	showPetTab('pet');
	if( $( "#selected-area").length) $( "#selected-area").remove();
	if(selectedZoneId >= 0 && selectedSlotId >= 0){
	  let zoneData = zone.find(item => item.id === selectedZoneId);  
	  let unlockZone = hero.unlockZone.find(item => item.id === selectedZoneId);
	  let totalUpgradeReqCount = unlockZone.level * zoneData.baseUpgradeReq;
	  
	  if( $("#pet-area-div").length) componentAction("pet-area-div","clearText","");
	  let appendAdventureDiv = '<div id="selected-area" class="row border-top rounded-card active-bg-color">';
          appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += zoneData.name + ' Lv ' + unlockZone.level +' (' + zoneData.adventureTime + ' Hour)';
	      appendAdventureDiv += '</div>';
	      appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">' + zoneData.description + '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 animate-bar no-padding">';
		  appendAdventureDiv += '<div class="progress-bar-div">';
		  appendAdventureDiv += 'Exp : ' + unlockZone.adventureCount + ' / '+ totalUpgradeReqCount+'';
		  appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div id="selected-adventure-exp-bar" class="progress-bar pet-progress-bar-color">&nbsp;</div>';
		  appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += 'Adventure Slot : ' + setSequenceName(selectedSlotId) + ' Pet Slot';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += 'Bonus Coin : ' + numberFormat(unlockZone.bonusCoin) + ' Coin';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += 'Exp Gain : ' + numberFormat(unlockZone.bonusExp) + ' Exp';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 unlock-info">Please Choose Below Pet to Start ' + zoneData.name + ' Adventure';
	  $("#pet-area-div").append(appendAdventureDiv);
	  
	  let newAdventureExpBar = unlockZone.adventureCount / totalUpgradeReqCount * 100;
	  componentAction ("selected-adventure-exp-bar", "animate", newAdventureExpBar);
	}

	for(let i = 0; i<pet.length; i++){
	  let petData = pet.find(item => item.id === i);  
	  let unlockPet = hero.unlockPet.find(item => item.id === i);
	  let totalUpgradeReqExp = 0;
	  let petDescription = '';
	  let newPetExpBar = 0;
	  let classButtonAdventure = '';
	  let disableButtonAdventure = '';
	  let hyphenName = '';
	  let slotName = '';
	  let noteButtonAdventure = '';
	  let slotId = selectedSlotId;
	  let zoneId = selectedZoneId;
	  
	  if(unlockPet){
	    totalUpgradeReqExp = unlockPet.level * petData.upgradeReqExp;
	    if(i >= 3){
		  let partnerId = i - 3;
		  let partnerData = partner.find(item => item.id === partnerId);
		  petDescription = petData.description  + ' ' + partnerData.name + ' ' + unlockPet.currBonus + ' ' + petData.unit;
		}else petDescription = petData.description + ' ' + unlockPet.currBonus + ' ' + petData.unit;
		newPetExpBar = unlockPet.currExp / totalUpgradeReqExp * 100;
	  }
	  if($( "#pet-area-" + i ).length) nextUnlockPet++;
	  if( !$( "#pet-area-" + i ).length){
		if(unlockPet){
		  if($("#pet-unlock-div-"+i).length) $("#pet-unlock-div-"+i).remove();
		  
		  let appendPetDiv = '<div id="pet-area-' + i + '" class="row border-top rounded-card">';
          appendPetDiv += '<div class="col-xl-3 col-lg-3 col-md-3 col-sm-12 col-12 v-center-flex">';
	      appendPetDiv += petData.name + '&nbsp;Lv&nbsp;<span id="pet-level-' + i + '">' + unlockPet.level + '</span>';
	      appendPetDiv += '</div>';
	      appendPetDiv += '<div class="col-xl-5 col-lg-5 col-md-5 col-sm-12 col-12 v-center-flex">';
	      appendPetDiv += '<span id="pet-desc-' + i + '">' + petDescription + ' </span>&nbsp;(+<span id="next-pet-damage-' + i + '">' + petData.multiplierBonus + '</span>)';
	      appendPetDiv += '</div>';
	      appendPetDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 animate-bar no-padding">';
		  appendPetDiv += '<div class="progress-bar-div">';
		  appendPetDiv += 'Exp : <span id="current-pet-exp-' + i + '">' + unlockPet.currExp + '</span> / <span id="max-pet-exp-' + i + '">'+ totalUpgradeReqExp+'</span>';
		  appendPetDiv += '</div>';
		  appendPetDiv += '<div id="pet-exp-bar-' + i + '" class="progress-bar pet-progress-bar-color">&nbsp;</div>';
		  appendPetDiv += '</div>';
		  appendPetDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-padding mt-1">';
		  
		  if(unlockPet.adventureSlot >= 0 && unlockPet.adventureZone >= 0){
			if(unlockPet.statusAdventure == 'running' || unlockPet.statusAdventure == 'cancel' || (unlockPet.statusAdventure == 'complete' && unlockPet.collectReward == '')){
			  disableButtonAdventure = 'disabled';
			  if(unlockPet.statusAdventure == 'running'){
				noteButtonAdventure = constNoteCancelAdventure;
				disableButtonAdventure = '';
				classButtonAdventure = 'skill-running';
			  }else if(unlockPet.statusAdventure == 'cancel'){
				classButtonAdventure = 'skill-disabled';
			  }
			  let cooldownTimer = calcCooldownAdventureTime(unlockPet.adventureZone, unlockPet.adventureSlot);
			  hyphenName = '-';
			  slotName = offlineTimeText(cooldownTimer);
			}else{
			  classButtonAdventure = 'collect-reward';	
			  hyphenName = '-';
			  slotName = 'Collect Reward';
			}
			zoneId = unlockPet.adventureZone;
			  slotId = unlockPet.adventureSlot;
		  }else{
			if(zoneId >= 0 && slotId >= 0){
			  classButtonAdventure = 'skill-active';
			  slotName = 'Slot '+(slotId+1);
		    }else{
			  classButtonAdventure = '';
			  hyphenName = '';
			  slotName = '';
			}
		  }
		  
		  appendPetDiv += '<button id="button-pet-adventure-' + i +'" class="upgrade-level-button '+classButtonAdventure+'" value="' + zoneId + '='+ slotId + '=' + i +'" ' + disableButtonAdventure + '>Adventure <span id="pet-adventure-name-' + i +'">' + petData.name + '</span> <span id="hyphen-' + i +'">'+hyphenName+'</span> <span id="slot-adventure-name-' + i +'">'+slotName+'</span></button>';
		  appendPetDiv += '</div>';
		  appendPetDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-padding"><span id="note-button-pet-adventure-' + i +'">' + noteButtonAdventure + '</span></div>';
		  appendPetDiv += '</div>';
	      appendPetDiv += '</div>';

	      $("#pet-area-div").append(appendPetDiv).off('click','#button-pet-adventure-'+i).on('click','#button-pet-adventure-'+i,function(){
		    chooseAdventureArea(this); 
	      });
		}else{
		  unlockReqText = 'Unlock this pet at stage '+petData.unlockReqFloor;

		  switch(i){
			case 1:
			  if(hero.highestFloor < petData.unlockReqFloor){
				  unlockReqText += ' and have unlock a weapon once';
				  nextUnlockPet++;
			  }else{
				unlockReqText = 'Unlock this pet if you have unlock a weapon once';			
			  }
			  break;
			default:
			  if(i >= 3){
				let partnerId = i - 3;
				let partnerData = partner.find(item => item.id === partnerId);
				
				if(hero.highestFloor < petData.unlockReqFloor){
					unlockReqText += ' and you have unlock elite ' + partnerData.name + ' once';
					nextUnlockPet++;
			    }else{
				  unlockReqText = 'Unlock this pet if you have unlock elite ' + partnerData.name + ' once';
				}
			  }else{
				if(hero.highestFloor < petData.unlockReqFloor)nextUnlockPet++; 
			  }
			  break;
		  }
		  if(nextUnlockPet > 1)isReachReqFloor = false;
		  if(isReachReqFloor){
			if(nextUnlockPet <= 1){
			  if( !$( "#pet-unlock-div-" + i ).length){
			    let appendPetDiv = '<div id="pet-unlock-div-'+i+'" class="rounded-card unlock-info middle-align">' + unlockReqText + '</div>';
				appendPetDiv += '<div id="pet-area-' + i + '" class="row border-top rounded-card d-none"></div>';
				
	            $("#pet-area-div").append(appendPetDiv);
			  }else componentAction ("pet-unlock-div-"+i, "replaceText", unlockReqText);
			  if(nextUnlockPet == 1)i = pet.length;
			}
		  } 
		}
	  }else{
		if(unlockPet){
		  componentAction ("pet-level-"+i, "replaceText", unlockPet.level);
		  componentAction ("current-pet-exp-"+i, "replaceText", unlockPet.currExp);
		  componentAction ("max-pet-exp-"+i, "replaceText", totalUpgradeReqExp);
		  componentAction ("pet-desc-"+i, "replaceText", petDescription);
		  componentAction ("pet-adventure-name-"+i, "replaceText", petData.name);
		  
		  if(unlockPet.adventureSlot >= 0 && unlockPet.adventureZone >= 0){
			if(unlockPet.statusAdventure == 'running' || (unlockPet.statusAdventure == 'complete' && unlockPet.collectReward == '')){
			  let cooldownTimer = calcCooldownAdventureTime(unlockPet.adventureZone, unlockPet.adventureSlot);
			  if(unlockPet.statusAdventure == 'running'){
				$("#button-pet-adventure-"+i).prop('disabled', false);
			  }else $("button-pet-adventure-"+i).prop('disabled', true);
			  updateAdventureButtonClass("button-pet-adventure-"+i, "skill-running");
			  hyphenName = '-';
			  slotName = offlineTimeText(cooldownTimer);
			}else{
			  if(unlockPet.statusAdventure == 'cancel'){
				let cooldownTimer = calcCooldownAdventureTime(unlockPet.adventureZone, unlockPet.adventureSlot);
				updateAdventureButtonClass("button-pet-adventure-"+i, "skill-disabled");
				slotName = offlineTimeText(cooldownTimer);
			  }else{
				updateAdventureButtonClass("button-pet-adventure-"+i,"collect-reward");
				slotName = 'Collect Reward';
			  }
			  hyphenName = '-';
			}
			zoneId = unlockPet.adventureZone;
			slotId = unlockPet.adventureSlot;
			componentAction ("button-pet-adventure-"+i, "inputText", (zoneId + '='+ slotId + '=' + i));
		  }else{
			componentAction ("button-pet-adventure-"+i, "inputText", (zoneId + '='+ slotId + '=' + i));
			if(zoneId >= 0 && slotId >= 0){
			  updateAdventureButtonClass("button-pet-adventure-"+i,"skill-active");
			  slotName = 'Slot '+(slotId+1);
		    }else{
			  updateAdventureButtonClass("button-pet-adventure-"+i,"");
			  classButtonAdventure = '';
			  hyphenName = '';
			  slotName = '';
			}
		  }
		  componentAction ("hyphen-"+i, "replaceText", hyphenName);
		  componentAction ("slot-adventure-name-"+i, "replaceText", slotName);
		}
	  }
	  componentAction ("pet-exp-bar-"+i, "animate", newPetExpBar);
	}
	
	if(setting.petAreaShow == 1){
	  componentAction ("pet-area-div", "removeClass", "d-none");
	  setting.petAreaShow = 1;
	}
	calcHeightScrollDiv("pet");
  };
  
  var showAdventureArea = function(selectedPetId=-1){
	let nextUnlockZone = 0;
	let selectedPetName = 'Pet';
	let slotName = '';
	let classButtonAdventure = '';
	showPetTab('area');  

	if($("#zone-unlock-div").length) $("#zone-unlock-div").remove();
	if($("#selected-pet").length) $("#selected-pet").remove();
	if(selectedPetId >= 0){
	  let petData = pet.find(item => item.id === selectedPetId);  
	  let unlockPet = hero.unlockPet.find(item => item.id === selectedPetId);
	  if( $("#adventure-area-div").length) componentAction("adventure-area-div","clearText","");
	  let totalUpgradeReqExp = unlockPet.level * petData.upgradeReqExp;
	  let appendSelectedPet = '<div id="selected-pet" class="row border-top rounded-card active-bg-color">';
	  appendSelectedPet += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	  appendSelectedPet += petData.name + ' Lv ' + unlockPet.level;
	  appendSelectedPet += '</div>';
	  appendSelectedPet += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	  appendSelectedPet += petData.description + ' ' + unlockPet.currBonus + ' ' + petData.unit + ' (+' + petData.multiplierBonus + ')';
	  appendSelectedPet += '</div>';
	  appendSelectedPet += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 pet-exp no-padding">';
	  appendSelectedPet += '<div class="progress-bar-div">';
	  appendSelectedPet += 'Exp : ' + unlockPet.currExp + ' / '+ totalUpgradeReqExp;
	  appendSelectedPet += '</div>';
	  appendSelectedPet += '<div id="selected-pet-exp-bar" class="progress-bar pet-progress-bar-color">&nbsp;</div>';
	  appendSelectedPet += '</div>';
	  appendSelectedPet += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 unlock-info">Please Choose Below Adventure Area to Start ' + petData.name + ' Adventure';
	  appendSelectedPet += '</div>';
	  
	  $("#adventure-area-div").append(appendSelectedPet);
	  let newPetExpBar = unlockPet.currExp / totalUpgradeReqExp * 100;
	  componentAction ("selected-pet-exp-bar", "animate", newPetExpBar);
	}
	
	for(let i=0;i<hero.countZone;i++){
	  let zoneData = zone.find(item => item.id === i);  
	  let unlockZone = hero.unlockZone.find(item => item.id === i);
	  let totalUpgradeReqCount = unlockZone.level * zoneData.baseUpgradeReq;
	  let petId = selectedPetId;
	  let petName = selectedPetName;
	  let percentAdventureExp = new Decimal(100).plus(hero.bonusAdventureExpPercentage);
	  let percentAdventureCoin = new Decimal(100).plus(hero.bonusAdventureCoinPercentage).plus(hero.bonusAllCoinPercentage);
	  let adventureExp = new Decimal(unlockZone.bonusExp).mul(percentAdventureExp).div(100);
	  let adventureCoin = new Decimal(unlockZone.bonusCoin).mul(percentAdventureCoin).div(100);
	  let adventureTime = zoneData.adventureTime * 3600 * (100 - hero.bonusAdventureTimePercentage) / 100 / setting.gameSpeed;
	  let noteButtonAdventure = '';
	  let disabledButton = '';
	  
	  if(petId >= 0){
	    let petData = pet.find(item => item.id === petId);
	    selectedPetName = petData.name;
	    classButtonAdventure = 'skill-active';
      }else{
	    selectedPetName = 'Pet';
	    classButtonAdventure = '';
		petId = -1;
	  }
	  if(!$("#adventure-area-"+i).length){
		if(unlockZone){
		  if($("#zone-unlock-div-"+i).length) $("#zone-unlock-div-"+i).remove();		  
		  let appendAdventureDiv = '<div id="adventure-area-' + i + '" class="row border-top rounded-card">';
          appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += zoneData.name + ' Lv <span id="adventure-level-' + i + '">' + unlockZone.level +'</span> (<span id="adventure-time-' + i + '">' + offlineTimeText(adventureTime) + '</span>)';
	      appendAdventureDiv += '</div>';
	      appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += '<span id="adventure-desc-' + i + '">' + zoneData.description + ' </span>';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 pet-exp no-padding">';
		  appendAdventureDiv += '<div class="progress-bar-div">';
		  appendAdventureDiv += 'Entry : <span id="current-adventure-count-' + i + '">' + unlockZone.adventureCount + '</span> / <span id="max-adventure-count-' + i + '">'+ totalUpgradeReqCount+'</span>';
		  appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div id="adventure-exp-bar-' + i + '" class="progress-bar pet-progress-bar-color">&nbsp;</div>';
		  appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += 'Adventure Slot : <span id="adventure-slot-' + i + '">' + unlockZone.currSlot + '</span> Pet Slot';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += 'Bonus Coin : <span id="adventure-coin-' + i + '">' + numberFormat(adventureCoin) + '</span> Coin';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">';
	      appendAdventureDiv += 'Exp Gain : <span id="adventure-exp-' + i + '">' + numberFormat(adventureExp) + '</span> Exp';
	      appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div id="adventure-slot-' + i + '" class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12 no-padding mt-2">';
		  
		  for(let a=0;a<unlockZone.currSlot;a++){
			let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === a);
			petId = selectedPetId;
			petName = selectedPetName;
			slotName = "Slot "+(a+1);
			if(unlockZoneSlot){
			  petId = unlockZoneSlot.petId;
			  let petData = pet.find(item => item.id === petId);
			  let cooldownTimer = calcCooldownAdventureTime(i, a);

			  if(unlockZoneSlot.statusAdventure == 'running'){
				noteButtonAdventure = constNoteCancelAdventure;
				classButtonAdventure = 'skill-running';
				petName = petData.name;
				slotName = offlineTimeText(cooldownTimer);
			  }else if(unlockZoneSlot.statusAdventure == 'complete'){
				classButtonAdventure = 'collect-reward';
				petName = 'Complete';
				slotName = 'Collect Reward';
				petId = unlockZoneSlot.petId;
				petName = petData.name;
			  }else if(unlockZoneSlot.statusAdventure == 'cancel'){
				classButtonAdventure = 'skill-disabled';
				petName = petData.name;
				petId = unlockZoneSlot.petId;
				disabledButton = 'disabled';
				slotName = offlineTimeText(cooldownTimer);
			  }
			}else{ 
			  if(petId >= 0) classButtonAdventure = 'skill-active';
			  else classButtonAdventure = '';
			}
	        appendAdventureDiv += '<button id="button-adventure-slot-' + i + '-'+ a +'" class="upgrade-level-button adventure-slot-class '+classButtonAdventure+'" value="' + i + '='+ a + '=' + petId +'"' + disabledButton + '>Adventure <span id="adventure-pet-name-' + i + '-'+ a +'">' + petName + '</span> - <span id="adventure-slot-name-' + i + '-'+ a +'">' + slotName + '</span></button>';
		  }
		  appendAdventureDiv += '</div>';
		  appendAdventureDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 no-padding"><span id="note-button-adventure-slot-' + i +'">' + noteButtonAdventure + '</span></div>';
		  appendAdventureDiv += '</div>';
	      appendAdventureDiv += '</div>';
		
		  $("#adventure-area-div").append(appendAdventureDiv).off('click','.adventure-slot-class').on('click','.adventure-slot-class',function(){	  
		    insertAdventurePet(this); 
		  });
		
		  for(let a=0;a<unlockZone.currSlot;a++){
			let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === a);
			if(unlockZoneSlot){
			  let statusAdventure = unlockZoneSlot.statusAdventure;
			  let collectReward = unlockZoneSlot.collectReward;
			  if(statusAdventure == 'running' || statusAdventure == 'cancel' || (statusAdventure == 'complete' && collectReward == ''))startCooldownAdventureTimer(unlockZoneSlot.petId, i, a);
			}
		  }
		}
	  }else{
		let totalUpgradeReqCount = unlockZone.level * zoneData.baseUpgradeReq;
		let statusRunningAdventure = false;
		for(let a=0;a<unlockZone.currSlot;a++){
		  petId = selectedPetId;
		  petName = selectedPetName;
		  let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === a);
		  if(!unlockZoneSlot){
			if(petId >= 0) updateAdventureButtonClass("button-adventure-slot-"+i+"-"+a, "skill-active");
			else updateAdventureButtonClass("button-adventure-slot-"+i+"-"+a, "");
		  }else{
			  if(unlockZoneSlot.statusAdventure == 'running'){
				let cooldownTimer = calcCooldownAdventureTime(i, a);
				updateAdventureButtonClass("button-adventure-slot-"+i+"-"+a, "skill-running");
				statusRunningAdventure = true;
				slotName = offlineTimeText(cooldownTimer);
			  }else if(unlockZoneSlot.statusAdventure == 'complete'){
				updateAdventureButtonClass("button-adventure-slot-"+i+"-"+a, "collect-reward");
				slotName = "Collect Reward";
			  }else if(unlockZoneSlot.statusAdventure == 'cancel'){
				updateAdventureButtonClass("button-adventure-slot-"+i+"-"+a, "skill-disabled");
				let cooldownTimer = calcCooldownAdventureTime(i, a);
				slotName = offlineTimeText(cooldownTimer);
			  }
			  petId = unlockZoneSlot.petId;
			  let petData = pet.find(item => item.id === petId);
			  petName = petData.name;
			  componentAction ("adventure-slot-name-"+i+"-"+a, "replaceText", slotName);
		  }
		  componentAction ("adventure-pet-name-"+i+"-"+a, "replaceText", petName);
		  componentAction ("button-adventure-slot-"+i+"-"+a, "inputText", (i+'='+a+'='+petId));
		}
		
		componentAction ("current-adventure-count-"+i, "replaceText", unlockZone.adventureCount);
		componentAction ("max-adventure-count-"+i, "replaceText", totalUpgradeReqCount);
		componentAction ("adventure-coin-"+i, "replaceText", adventureCoin);
		componentAction ("adventure-exp-"+i, "replaceText", adventureExp);
		componentAction ("adventure-slot-"+i, "replaceText", unlockZone.currSlot);
		componentAction ("adventure-level-"+i, "replaceText", unlockZone.level);
		componentAction ("adventure-time-"+i, "replaceText", offlineTimeText(adventureTime));
		if(statusRunningAdventure) componentAction ("note-button-adventure-slot-"+i, "replaceText", constNoteCancelAdventure);
	  }
	  let newAdventureExpBar = unlockZone.adventureCount / totalUpgradeReqCount * 100;
	  componentAction ("adventure-exp-bar-"+i, "animate", newAdventureExpBar);
	}
	if(hero.countZone < zone.length){
	  let unlockInformation = '';
	  let nextZoneRequirement = '';
	  if(hero.countZone > 0){
	    let prevZone = zone[hero.countZone-1];
	    let nextZone = zone[hero.countZone];
		
		unlockInformation = 'Unlock Area at '+prevZone.name+' level '+nextZone.unlockReqLevel;
	  }else{
		let petData = pet.find(item => item.id === 0);  
		unlockInformation = 'Unlock this area at stage '+petData.unlockReqFloor;
	  }
	  let appendZoneDiv = '<div id="zone-unlock-div" class="rounded-card middle-align unlock-info">' + unlockInformation + '</div>';
	  $("#adventure-area-div").append(appendZoneDiv);
	}
	calcHeightScrollDiv("pet");
  };
  
  var showDwellersDesc = function(dwellersId){
	dwellersId = parseInt(dwellersId,10);
	let unlockDwellers = hero.unlockDwellers.find(item => item.id === dwellersId);
	let roleDesc = "";
	switch(unlockDwellers.currentAbility.toLowerCase()){
	  case "trainer":
	    roleDesc = "Training elite ability in training ground";
		break;
	  case "warlords":
	    roleDesc = "Provide 1 free slot for generating companions";
		break;
	  case "cleric":
	    roleDesc = "Provide 1 active gods slot in temple";
		break;
	  case "banker":
	    roleDesc = "Generating token in bank";
		break;
	  case "collector":
	    roleDesc = "Provide 1 free slot for generating equipment";
		break;	
	};
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", firstLetterFormat(unlockDwellers.currentAbility,"uppercase")+" : "+roleDesc);
  };
  
  var showHouseArea = function(filterDwellersAbility=null, filterDwellersStatus=null){
	showArea("house");
	if(!$( "#dwellers-area-0" ).length) hero.unlockDwellers.sort((a, b) => (a.currentAbility > b.currentAbility) ? 1 : (a.currentAbility === b.currentAbility) ? ((a.slotId > b.slotId) ? 1 : -1) : -1 );
	
	if(newDwellersRole){
	  let cleanDwellers = removeDuplicateArray(hero.unlockDwellers, e => e.currentAbility);
	  let cleanDwellersRole = [];
	  cleanDwellersRole.push("=");
	  cleanDwellersRole.push("all=All Role");
	  for(let i=0;i<cleanDwellers.length;i++){
		cleanDwellersRole.push(cleanDwellers[i].currentAbility+"="+firstLetterFormat(cleanDwellers[i].currentAbility,"uppercase"));
	  }
	  $("#span-dwellers-role").empty();
	  $("#span-dwellers-role").append(createDropDownList(cleanDwellersRole,"dwellers-role")).off('change',"#dwellers-role").on('change',"#dwellers-role",function(){
	    chooseDwellersRole(this);
	  });
	  newDwellersRole = false;
	}
	
	let listUnlockDwellers = [];
	if(filterDwellersAbility != null || filterDwellersStatus != null){
	  listUnlockDwellers = hero.unlockDwellers;
	  if(filterDwellersAbility && filterDwellersAbility.toLowerCase() != "all") listUnlockDwellers = listUnlockDwellers.filter(item => item.currentAbility === filterDwellersAbility);
	  if(filterDwellersStatus && filterDwellersStatus.toLowerCase() != "all") listUnlockDwellers = listUnlockDwellers.filter(item => item.status === filterDwellersStatus);
	  $("#house-area-div").empty();
	}else{
	  listUnlockDwellers = hero.unlockDwellers;
	  $("#dwellers-role").val("");
	  $("#dwellers-status").val("");
	  $("#house-area-div").empty();
	  $("#span-dwellers-status").empty();
	}
	if(hero.highestFloor >= unlockNewFeatureFloor("house")){
	  componentAction("house-header2","updateClass","d-none,d-flex");
	  if( $( "#house-unlock-div").length) $( "#house-unlock-div").remove();
	  for(let i=0; i<listUnlockDwellers.length; i++){
		let unlockDwellers = listUnlockDwellers[i];
		let unlockDwellersId = unlockDwellers.id;
		let unlockDwellersAbility = unlockDwellers.currentAbility.toLowerCase();
		let dwellersAbility = unlockDwellers.ability.find(item => item.name === unlockDwellersAbility);
		let imageClass = 'image-dwellers';
		let dwellersGrade = '';
		let dwellersImage = "resting";
		
		switch(unlockDwellers.status.toLowerCase()){
		  case "idle":
		    dwellersImage = "resting";
			break;
		  case "working":
		    dwellersImage = "working";
			break;	
		};
		
		let gradeDwellersData = gradeDwellers.find(item => item.id === unlockDwellers.grade);
		if(gradeDwellersData) dwellersGrade = gradeDwellersData.name;

	    if( !$( "#dwellers-area-" + unlockDwellersId ).length){
		  let appendDwellersDiv = '<div class="row col-xl-3 col-lg-4 col-md-6 col-sm-12 col-12 p-1">';
		    appendDwellersDiv += '<div id="dwellers-area-' + unlockDwellersId + '" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 rounded-card m-0">';
			appendDwellersDiv += '<div class="col-xl-3 col-lg-4 col-md-4 col-sm-3 col-4 ' + imageClass + ' v-center-flex">';
			appendDwellersDiv += '<img id="dwellers-image-' + unlockDwellersId + '" src="assets/images/'+unlockDwellersAbility.replace(" ","-")+'.svg" class="' + imageClass + ' container-img"></img>';
			appendDwellersDiv += '</div>';
			appendDwellersDiv += '<div class="col-xl-9 col-lg-8 col-md-8 col-sm-9 col-8">';
			appendDwellersDiv += '<div class="w-100"><span id="dwellers-name-' + unlockDwellersId + '">' + unlockDwellers.name + '</span>&nbsp;-&nbsp;<span id="dwellers-level-' + unlockDwellersId + '">' + dwellersGrade + '</span></div>';
			appendDwellersDiv += '<div class="w-100 v-center-flex">Role&nbsp;:&nbsp;<span id="dwellers-ability-' + unlockDwellersId + '">' + firstLetterFormat(unlockDwellersAbility,"uppercase") + '</span>&nbsp;<img id="dwellers-desc-'+unlockDwellersId+'" src="assets/images/info-color.svg" class="image-size-static cursor-button"></img>&nbsp;-&nbsp;Lv&nbsp;<span id="dwellers-ability-level-' + unlockDwellersId + '">' + dwellersAbility.level + '</span></div>';
			appendDwellersDiv += '<div class="w-100 v-center-flex">Status :&nbsp;<span id="dwellers-status-' + unlockDwellersId + '">' + firstLetterFormat(unlockDwellers.status,"uppercase") + '</span>';
			appendDwellersDiv += '&nbsp;&nbsp;<img id="dwellers-status-image-' + unlockDwellersId + '" src="assets/images/'+dwellersImage+'.svg" class="image-size-static"></img>';
			appendDwellersDiv += '</div>';
			appendDwellersDiv += '</div>';
			appendDwellersDiv += '</div>';
		  $("#house-area-div").append(appendDwellersDiv).off('click','#dwellers-desc-'+unlockDwellersId).on('click','#dwellers-desc-'+unlockDwellersId,function(){
			showDwellersDesc(unlockDwellersId);
		  });
	    }else{
		  componentAction ("dwellers-level-"+unlockDwellersId, "replaceText", unlockDwellers.level);
		  componentAction ("dwellers-ability-"+unlockDwellersId, "replaceText", firstLetterFormat(unlockDwellersAbility,"uppercase"));
		  componentAction ("dwellers-status-"+unlockDwellersId, "replaceText", unlockDwellers.status);
		  $("#dwellers-status-image-"+unlockDwellersId).attr("src", "assets/images/"+dwellersImage+".svg");
	    }		  
	  }
	}else{
	  componentAction("house-header2","updateClass","d-flex,d-none");
	  if( !$( "#house-unlock-div").length){
	    let appendHouseDiv = '<div class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 p-1">';
			appendHouseDiv += '<div id="house-unlock-div" class="rounded-card unlock-info middle-align col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 m-0">Unlock this house at stage ' + unlockNewFeatureFloor("house") + ' </div>';
			appendHouseDiv += '</div>';
	    $("#house-area-div").append(appendHouseDiv);
	  }
	}
	calcHeightScrollDiv("house");
  };
  
  var showBankArea = function(){
	showArea("bank");
	showBankTab("bank");

	if(hero.highestFloor >= unlockNewFeatureFloor("house")){
	  if( $( "#bank-unlock-div").length) $( "#bank-unlock-div").remove();
	  let tokenInBank = new Decimal(hero.tokenInBank);
	  if(!$( "#bank-area" ).length){
		let classButtonWithdraw = '';
		let restTime = (setting.bankTokenGenerateHour * 3600) - Math.floor((Date.now() - hero.tokenInBankLastGenerate) / 1000);
		if(tokenInBank.lessThanOrEqualTo(0)) classButtonWithdraw = 'd-none';
	    let appendBankDiv = '<div id="bank-area" class="row border-top rounded-card no-gutters mx-1">';
		    appendBankDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12 middle-align">';
		    appendBankDiv += '<img src="assets/images/bank-color.svg" class="medium-img"></img>';
		    appendBankDiv += '</div>';
		    appendBankDiv += '<div class="col-xl-6 col-lg-6 col-md-6 col-sm-12 col-12 no-padding">';
			appendBankDiv += '<div class="w-100 v-center-flex">Income :&nbsp;<span id="token-income-per-period">' + numberFormat(setting.baseBankTokenIncome) + '</span>&nbsp;<img src="assets/images/token.svg" class="image-size"></img>&nbsp;/ '+setting.bankTokenGenerateHour+' hours</div>';
			appendBankDiv += '<div class="w-100 v-center-flex">Savings Balance :&nbsp;<span id="savings-balance">' + numberFormat(tokenInBank) + '</span>&nbsp;<img src="assets/images/token.svg" class="image-size"></img></div>';
			appendBankDiv += '<div class="w-100 v-center-flex">Current Token :&nbsp;<span id="current-token">' + numberFormat(hero.token) + '</span>&nbsp;<img src="assets/images/token.svg" class="image-size"></img></div>';
			appendBankDiv += '<div class="w-100">Rest Time :&nbsp;<span id="rest-time-token-generation">' + offlineTimeText(restTime) + '</span></div>';
			appendBankDiv += '<div class="w-100"><button id="button-withdraw" class="upgrade-level-button ' + classButtonWithdraw + '">Withdraw Token</button></div>';
		    appendBankDiv += '</div>';
	    $("#bank-area-div").append(appendBankDiv).off('click','#button-withdraw').on('click','#button-withdraw',function(){
	      confirmWithdrawTokenInBank();
	    });
	  }else{
	    if(tokenInBank.lessThanOrEqualTo(0)) componentAction ("button-withdraw", "addClass", "d-none");
		else componentAction ("button-withdraw", "removeClass", "d-none");
	  }
	}else{
	  if( !$( "#bank-unlock-div").length){
	    let appendHouseDiv = '<div id="bank-unlock-div" class="rounded-card unlock-info middle-align">Unlock this bank at stage ' + unlockNewFeatureFloor("house") + ' </div>';
	    $("#bank-area-div").append(appendHouseDiv);
	  }
	}
	calcHeightScrollDiv("bank");  
  };
  
  var showTreasureArea = function(){
	showArea("bank");
	showBankTab("treasure");
	if(!$( "#treasure-unlock-div" ).length){
	  let appendHouseDiv = '<div id="treasure-unlock-div" class="rounded-card middle-align good-info"> --== Coming Soon ==-- </div>';
	  $("#treasure-area-div").append(appendHouseDiv);
	}
	calcHeightScrollDiv("bank");  
  };
  
  var nextTutorial = function(flagShowButton=false){
	if(tutorialFunction.data[currentTutorialStep] != undefined){
	  $(tutorialFunction.data[currentTutorialStep].element).css({"z-index": '', "position": ''});
	}
	$("#tourNext").click();
	currentTutorialStep += 1;
	if(currentTutorialStep == tutorialFunction.data.length){
	  tutorialFunction.data = [];
	  currentTutorialStep = 0;
	}
	if(flagShowButton){
	  componentAction("tourControls","removeClass","d-none");
	  componentAction("tourNext","addClass","d-none");
	}
  };
  
  var prevTutorial = function(count=1){
	for(let i=0;i<count;i++){
	  $("#tourPrev").click();
	  currentTutorialStep -= 1;
	}
  };
  
  var startTutorialAnimation = function(groupTutorial){
	if(hero.tutorialGroupId >= 0){
	  let selectedTutorialGroupData = tutorialGroup.find(item => item.group === groupTutorial);	
	  if(selectedTutorialGroupData.id < hero.tutorialGroupId){
		let savedTutorialGroupData = tutorialGroup.find(item => item.id === hero.tutorialGroupId);	
		groupTutorial = savedTutorialGroupData.group;
		if(hero.tutorialGroupId > 0){
		  let prevTutorialGroupData = tutorialGroup.find(item => item.id === (hero.tutorialGroupId-1));
		  tutorialAnimation = prevTutorialGroupData.group;
		}
	  }else{
		hero.tutorialGroupId = selectedTutorialGroupData.id;
		saveGame();
	  }
	}	
	tutorialFunction.data = [];
	currentTutorialStep = 0;
	
	switch(groupTutorial){
	  case "world2":
	    let upgradeFee = updateUpgradeLevelFeeHero();
	    let heroCoin = new Decimal(hero.coin);	
		
	    if(upgradeFee.greaterThan(0) && heroCoin.lessThan(upgradeFee)) groupTutorial = "";	    
		break;
	};
	
	if(groupTutorial != ""){
	  let firstTutorial = tutorialStep.filter(item => item.group === groupTutorial);
	  tutorialFunction.data = firstTutorial;
	  $.aSimpleTour(tutorialFunction);
	  nextTutorial();
	  tutorialAnimation = groupTutorial;
	  checkCssSetting();
	}
  };
  
  var showTutorialArea = function(){
	showArea("tutorial");
	hideAllTutorialMenu();
	calcHeightScrollDiv("tutorial");
	switchTutorPage(1);
  };
  
  var showTutorialContent = function(tutorMenu){
	  
  };
  
  var hideAllTutorialMenu = function(){
	componentAction("tutor-div-profile","addClass","d-none");
	componentAction("tutor-div-statistic","addClass","d-none");
	componentAction("tutor-div-achievement","addClass","d-none");
	componentAction("tutor-div-world-map","addClass","d-none");
	componentAction("tutor-div-tower","addClass","d-none");
	componentAction("tutor-div-task","addClass","d-none");
	componentAction("tutor-div-check-in","addClass","d-none");
	componentAction("tutor-div-artifact","addClass","d-none");
	componentAction("tutor-div-barracks","addClass","d-none");
	componentAction("tutor-div-house","addClass","d-none");
	componentAction("tutor-div-bank","addClass","d-none");
	componentAction("tutor-div-companion","addClass","d-none");
	componentAction("tutor-div-warehouse","addClass","d-none");
	componentAction("tutor-div-cage","addClass","d-none");
	componentAction("tutor-div-setting","addClass","d-none");
	componentAction("tutor-div-save-game","addClass","d-none");
	componentAction("tutor-div-export-import","addClass","d-none");
	componentAction("tutor-div-clear-game","addClass","d-none");
	componentAction("tutor-div-contact","addClass","d-none");
	componentAction("tutor-div-info","updateClass","tab-button-active,tab-button-unactive");
	componentAction("tutor-div-adventure","updateClass","tab-button-active,tab-button-unactive");
	componentAction("tutor-div-town","updateClass","tab-button-active,tab-button-unactive");
	componentAction("tutor-div-other","updateClass","tab-button-active,tab-button-unactive");
  };
  
  var showTutorialMenu = function(menuName){
	hideAllTutorialMenu();
	switch(menuName){
	  case "info":
	    componentAction("tutor-div-profile","removeClass","d-none");
		componentAction("tutor-div-statistic","removeClass","d-none");
		componentAction("tutor-div-achievement","removeClass","d-none");
		break;
	  case "adventure":
	    componentAction("tutor-div-world-map","removeClass","d-none");
		componentAction("tutor-div-tower","removeClass","d-none");
		componentAction("tutor-div-task","removeClass","d-none");
		componentAction("tutor-div-check-in","removeClass","d-none");
		componentAction("tutor-div-artifact","removeClass","d-none");
		break;
	  case "town":
	    componentAction("tutor-div-barracks","removeClass","d-none");
		componentAction("tutor-div-house","removeClass","d-none");
		componentAction("tutor-div-bank","removeClass","d-none");
		componentAction("tutor-div-companion","removeClass","d-none");
		componentAction("tutor-div-warehouse","removeClass","d-none");
		componentAction("tutor-div-cage","removeClass","d-none");
		break;
	  case "other":
		componentAction("tutor-div-setting","removeClass","d-none");
		componentAction("tutor-div-save-game","removeClass","d-none");
		componentAction("tutor-div-export-import","removeClass","d-none");
		componentAction("tutor-div-clear-game","removeClass","d-none");
		componentAction("tutor-div-contact","removeClass","d-none");
		break;
	};
	componentAction("tutor-menu-div-"+menuName,"updateClass","tab-button-unactive,tab-button-active");
	checkCssSetting();
  };
  
   var showSettingArea = function(){
	showArea("setting");
	if(hero.settingOrderPartner == "asc"){
	  $("#partner-sequence-asc").prop('checked', true);
	  $("#partner-sequence-desc").prop('checked', false);
	}else{
	  $("#partner-sequence-asc").prop('checked', false);
	  $("#partner-sequence-desc").prop('checked', true);
	}
	if(hero.settingOrderLabor == "asc"){
	  $("#labor-sequence-asc").prop('checked', true);
	  $("#labor-sequence-desc").prop('checked', false);
	}else{
	  $("#labor-sequence-asc").prop('checked', false);
	  $("#labor-sequence-desc").prop('checked', true);
	}
	if(hero.settingShowIcon){
	  $("#show-icon-true").prop('checked', true);
	  $("#show-icon-false").prop('checked', false);
	}else{
	  $("#show-icon-true").prop('checked', false);
	  $("#show-icon-false").prop('checked', true);
	}
	if(hero.settingFormatNumber == "number"){
	  $("#setting-format-number").prop('checked', true);
	  $("#setting-format-letter").prop('checked', false);
	}else{
	  $("#setting-format-number").prop('checked', false);
	  $("#setting-format-letter").prop('checked', true);
	}
	if(hero.settingAutoAbilityTraining){
	  $("#setting-ability-training-auto").prop('checked', true);
	  $("#setting-ability-training-nonauto").prop('checked', false);
	}else{
	  $("#setting-ability-training-auto").prop('checked', false);
	  $("#setting-ability-training-nonauto").prop('checked', true);
	}
	if(hero.settingOfflineProgress){
	  $("#setting-offline-progress").prop('checked', true);
	  $("#setting-offline-stay").prop('checked', false);
	}else{
	  $("#setting-offline-progress").prop('checked', false);
	  $("#setting-offline-stay").prop('checked', true);
	}
	if(hero.settingConfirmUseItem){
	  $("#setting-confirm-use-item").prop('checked', true);
	}else{
	  $("#setting-confirm-use-item").prop('checked', false);
	}
	if(hero.settingConfirmUseToken){
	  $("#setting-confirm-use-token").prop('checked', true);
	}else{
	  $("#setting-confirm-use-token").prop('checked', false);
	}
	if(hero.settingConfirmSellUpgrade){
	  $("#setting-confirm-sell-upgrade-equipment").prop('checked', true);
	}else{
	  $("#setting-confirm-sell-upgrade-equipment").prop('checked', false);
	}
	if(hero.settingShowDetailDamage){
	  $("#setting-partner-detail-damage-true").prop('checked', true);
	  $("#setting-partner-detail-damage-false").prop('checked', false);	
	}else{
	  $("#setting-partner-detail-damage-true").prop('checked', false);
	  $("#setting-partner-detail-damage-false").prop('checked', true);
	}
	if(hero.settingWarningPercentageHP) componentAction("setting-warning-percentage-hp","inputText",hero.settingWarningPercentageHP);
	if(hero.settingDangerPercentageHP) componentAction("setting-danger-percentage-hp","inputText",hero.settingDangerPercentageHP);
	if(hero.settingRoundedUpgrade){
	  $("#setting-rounded-upgrade-true").prop('checked', true);
	  $("#setting-rounded-upgrade-false").prop('checked', false);
	}else{
	  $("#setting-rounded-upgrade-true").prop('checked', false);
	  $("#setting-rounded-upgrade-false").prop('checked', true);
	  componentAction("max-rounded-upgrade-div","addClass","d-none");
	}
	if(hero.settingMaxRoundedUpgrade){
	  $("#setting-max-rounded-upgrade-true").prop('checked', true);
	  $("#setting-max-rounded-upgrade-false").prop('checked', false);	
	}else{
	  $("#setting-max-rounded-upgrade-true").prop('checked', false);
	  $("#setting-max-rounded-upgrade-false").prop('checked', true);
	}
	if(hero.settingAutoCollapse){
	  $("#setting-auto-collapse-true").prop('checked', true);
	  $("#setting-auto-collapse-false").prop('checked', false);	
	}else{
	  $("#setting-auto-collapse-true").prop('checked', false);
	  $("#setting-auto-collapse-false").prop('checked', true);
	}
	switch(hero.settingBackground){
	  case "light":
	    $("#setting-background-light").prop('checked', true);
	    $("#setting-background-grey").prop('checked', false);
		$("#setting-background-dark").prop('checked', false);
		break;
	  case "grey":
	    $("#setting-background-light").prop('checked', false);
	    $("#setting-background-grey").prop('checked', true);
		$("#setting-background-dark").prop('checked', false);
		break;
	  case "dark":
	    $("#setting-background-light").prop('checked', false);
	    $("#setting-background-grey").prop('checked', false);
		$("#setting-background-dark").prop('checked', true);
		break;	
	};
	
	let appendAutoSellDiv = "";
	for(let i=gradeEquipment.length-1;i>=0;i--){
	  let gradeName = gradeEquipment[i].name;
	  let gradeId = gradeEquipment[i].id;
	  let heroSettingAutoSellEquipment = hero.settingAutoSellEquipment.find(item => item.id === gradeId);
	  let checkedStatus = heroSettingAutoSellEquipment.autoSell;
	  let checkedClass = "";
	  if(checkedStatus) checkedClass = "checked";
	  
	  if( !$( "#setting-auto-sell-"+gradeName ).length){
	    appendAutoSellDiv += '<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 px-0 v-center-flex">';
	    appendAutoSellDiv += '<input type="checkbox" id="setting-auto-sell-'+gradeName+'" name="setting-auto-sell-'+gradeName+'" value="'+gradeName+'" class="auto-sell" '+checkedClass+'>&nbsp;<label for="setting-auto-sell-'+gradeName+'">'+gradeName+'</label>';
	    appendAutoSellDiv += '</div>';
	  }
	};
	if(appendAutoSellDiv != ""){
	  $('#auto-sell-content-div').append(appendAutoSellDiv).off('click','.auto-sell').on('click','.auto-sell',function(){
	    autoSellEquipment(this);
      });
	}
	
	if(hero.highestFloor >= unlockNewFeatureFloor("barracks")) componentAction("setting-auto-training-div","removeClass","d-none");
	else componentAction("setting-auto-training-div","addClass","d-none");
	
	if(hero.highestFloor >= unlockNewFeatureFloor("cave")) componentAction("setting-army-hp-icon","removeClass","d-none");
	else componentAction("setting-army-hp-icon","addClass","d-none");
	
	if(hero.highestFloor >= unlockNewFeatureFloor("equipment")){
	  componentAction("setting-confirm-sell-upgrade-equipment-div","removeClass","d-none");
	  componentAction("setting-auto-sell-equipment-area","removeClass","d-none");
	}else{
	  componentAction("setting-confirm-sell-upgrade-equipment-div","addClass","d-none");
	  componentAction("setting-auto-sell-equipment-area","addClass","d-none");
	}
	
	
	
	calcHeightScrollDiv("setting");  
  };
  
  var showExportImportArea = function(){
	hideAllContent();
	showArea("export-import");
	componentAction ("export-data", "replaceText", "");
	calcHeightScrollDiv("export-import");
  };
  
  var calcDefaultModalWidth = function(setCss=true){
	defaultModalWidth = $(window).width() * 0.95;
	if(defaultModalWidth > 500) defaultModalWidth = 500;
	
	if(setCss){
	  $('.modal-dialog').css({"max-width":(defaultModalWidth)});
	  $('.modal-dialog').css({"width":(defaultModalWidth)});
	}
  };
  
  var calcHeightDiv = function(divId){
	let divHeight = $("#"+divId).css("height").replace("px","");
	return Math.ceil(parseInt(divHeight,10)); 
  };
  
  var calcHeightScreen = function(){
	return $(window).height();  
  };
  
  var calcHeightSidebarHeader = function(){
	return $("#home").height() + 17;    
  };
  
  var calcStickyTopbar = function(){
	return $("#sticky-topbar").height() + 17;  
  };
  
  var calcStickyFootbar = function(){
	return $("#sticky-footbar").height() + 7; 
  };
  
  var calcHeightLogBattleDiv = function(divName){
	let heightScreen = calcHeightScreen();
	let topBar = calcStickyTopbar();
	let footBar = calcStickyFootbar();
	let scrollHeight = 0;
	let contentHeader = $("#dungeon-battle-div").height() + $("#dungeon-menu-div").height() + 30;
	scrollHeight = heightScreen - topBar - footBar - contentHeader;
	$('#'+divName).css({"max-height":scrollHeight});
  };
  
  var calcHeightTowerBattleDiv = function(className){
	let heightScreen = calcHeightScreen();
	let topBar = calcStickyTopbar();
	let footBar = calcStickyFootbar();
	let scrollHeight = 0;
	let contentHeader = 0;
	if($("#tower-header").length) contentHeader += $("#tower-header").height() + 16;
	if(className == "h-tower-floor") contentHeader += 25;
	else if (className == "h-tower-battle") contentHeader += 80;
	scrollHeight = heightScreen - topBar - footBar - contentHeader;
	$('.'+className).css({"height":scrollHeight});
  };
  
  var calcHeightScrollDiv = function(headerName,currentActiveMenu="",cssType="max-height"){
	if(currentActiveMenu == "") lastActiveMenu = headerName;
	else lastActiveMenu = currentActiveMenu;
	let heightScreen = calcHeightScreen();
	let topBar = calcStickyTopbar();
	let footBar = calcStickyFootbar();
	let contentHeader = 0;
	let scrollHeight = 0;
	let header1 = 0;
	let header2 = 0;
	let header3 = 0;
	let footer2 = 0;

	if(headerName == "partner" || headerName == "skill" || headerName == "labor"|| headerName == "shop"){
	  if($("#dungeon-battle-div").length) header1 = $("#dungeon-battle-div").height()*1 + 17;
	  if($("#dungeon-menu-div").length) header2 += $("#dungeon-menu-div").height()*1 ;
	  
	  if(headerName != "shop") if($("#buy-multiplier-div").length) header2 += $("#buy-multiplier-div").height()*1;
	  if(headerName == "labor") if($("#total-produce-coin-div").length) header2 += $("#total-produce-coin-div").height()*1 + 17;
	}else{
	  if($("#"+headerName+"-header").length) header1 = $("#"+headerName+"-header").height()*1 + 17;
	  if($("#"+headerName+"-header2").length) header2 = $("#"+headerName+"-header2").height()*1 + 17;
	}
	if($("#"+headerName+"-footer2").length) footer2 = $("#"+headerName+"-footer2").height();
	
	if(headerName == "modal"){
	  contentHeader += 180;
	  if($("#"+headerName+"-header2").length) header2 += 170;
	  topBar = 50;
	  footBar = 70;
	}
	contentHeader = header1 + header2 + header3 + footer2;
	scrollHeight = heightScreen - topBar - footBar - contentHeader;
	
	if($("#"+headerName+"-header3").length){
	  if(headerName == "barracks"){
		if($("#"+headerName+"-header3").height() > (scrollHeight*0.65)){
		  $('.scrollable-header').css({"max-height":(scrollHeight*0.65)});
		  scrollHeight = (scrollHeight*0.35);
	    }else scrollHeight = scrollHeight - $("#"+headerName+"-header3").height() - 16;
	  }else{
	    if($("#"+headerName+"-header3").height() > (scrollHeight/2)){
		  $('.scrollable-header').css({"max-height":(scrollHeight/2)});
		  scrollHeight = scrollHeight / 2;
	    }else scrollHeight = scrollHeight - $("#"+headerName+"-header3").height() - 16;
	  }
	}
	if(headerName == "modal") $('.modal-scrollable').css({"max-height":scrollHeight});
	else{
	  if(cssType=="max-height"){
		$('.pre-scrollable').css({"max-height":scrollHeight});
		$('.pre-scrollable').css({"min-height":"0px"});
	  }else{
		$('.pre-scrollable').css({"min-height":scrollHeight});
	  }
	}
	checkCssSetting();
  };
  
  var partner,abilityType,partnerAbility,skill,tower,pet,zone,artifact,dailyTask,dailyCheckIn,achievement,companion,gods,enemy,dwellers,labor,army,gradeDwellers,levelDwellers,treasureDropRate,material,shop,villages,gradeEquipment,benefitPartner,enhanceLevelPartner,enhanceLevelEquipment,equipmentDropRate,hero,unlockNewFeature,story,bartenderStory,tavernStory,tutorialGroup,tutorialStep,tutorialFunction,equipment,requirementUnlock,people,peopleDialog,armyType,cave,setting,keyLen,keyData;
  
  var loopTowerAction = function(showAnimation,newTowerDpsInterval){
	let totalTowerDps = new Decimal(calcTotalDps(true,"tower")).plus(calcTotalWeaponDamage());
	let maxTowerHpEnemy = new Decimal(setting.towerEnemyHpMultiplier).pow(selectedTowerFloor-1).mul(setting.baseTowerEnemyHp);
	if(currentTowerManagerHp.greaterThan(0)){
	  currentTowerManagerHp = currentTowerManagerHp.sub(totalTowerDps);
	}else{
	  currentTowerManagerHp = new Decimal(0);
	}
	let widthTowerManagerHpBar = new Decimal(currentTowerManagerHp).div(maxTowerHpEnemy).mul(100);
	componentAction ("tower-progress-bar", "animate", (widthTowerManagerHpBar*1));
	componentAction("tower-current-enemy-hp","replaceText",numberFormat(currentTowerManagerHp),true);
	let maxTowerLimit = (setting.baseTowerTimeLimit + (hero.bonusTowerTimeLimit*1)) * 1000 / setting.gameSpeed;
	if(showAnimation){
	  let widthTimerBar = restTowerBossTimer / maxTowerLimit * 100;
	  componentAction ("tower-timer-bar", "animate", widthTimerBar);
	}
	
	$("#tower-battle-log-div").prepend("DPS Hit :&nbsp;"+numberFormat(totalTowerDps)+"</br>");
	if(restTowerBossTimer <= 0 || currentTowerManagerHp.lessThanOrEqualTo(0)) stopTowerBossTimer();
  };
  
  var loopAction = function(showAnimation=false, newDpsInterval){
    critDps = false;
	let totalDps = new Decimal(calcTotalDps(true,"dungeon",true));
	let maxHpEnemy = new Decimal(enemy.maxHp);
	let partnerAbilityDamage = new Decimal(calcTotalAbility());
	dungeonBattleLog = "";

	if(stealCoinTimer > 0){
	  stealCoinInterval = new Decimal(stealCoinInterval).plus(newDpsInterval);
	  if(stealCoinInterval.greaterThanOrEqualTo(stealCoinTimer)){
	    runStealCoin();
	    stealCoinInterval = new Decimal(0);
	  }
	}
	if(dpcToCoinTimer > 0){
	  dpcToCoinInterval = new Decimal(dpcToCoinInterval).plus(newDpsInterval);
	  if(dpcToCoinInterval.greaterThanOrEqualTo(dpcToCoinTimer)){
	    runDpcToCoin();
	    dpcToCoinInterval = new Decimal(0);
	  }
	}
	if(dpsToCoinTimer > 0){
	  dpsToCoinInterval = new Decimal(dpsToCoinInterval).plus(newDpsInterval);
	  if(dpsToCoinInterval.greaterThanOrEqualTo(dpsToCoinTimer)){
	    runDpsToCoin(totalDps);
	    dpsToCoinInterval = new Decimal(0);
	  }
	}
	let randomPercentage = Math.random()*100;
	let slashChancePercentage = hero.enhanceSlashChancePercentage * 1;
	let totalDamage = new Decimal(totalDps).plus(partnerAbilityDamage);
	if(currentEnemyHP.equals(enemy.maxHp)) totalDamage = totalDamage.plus(hitGodsDamage());
	if(randomPercentage<=slashChancePercentage){
	  totalDamage = totalDamage.plus(formulaSlashDamage());
	  if(dungeonBattleLog != "") dungeonBattleLog += ", Slash : "+numberFormat(totalDamage);
	}
	if(dungeonBattleLog != "") dungeonBattleLog = '<img src="assets/images/dps.svg" class="image-size">Total DPS : '+numberFormat(totalDamage) +"("+dungeonBattleLog+")<br/>";
	else dungeonBattleLog = '<img src="assets/images/dps.svg" class="image-size">Total DPS : '+numberFormat(totalDamage)+"<br/>";
	writeDungeonBattleLog(dungeonBattleLog);
	currentEnemyHP = currentEnemyHP.sub(totalDamage);
	
	if(showAnimation){
	  let newHPBarWidth = new Decimal(currentEnemyHP).div(maxHpEnemy).mul(100);
	  componentAction ("current-enemy-hp", "replaceText", numberFormat(currentEnemyHP));
	  componentAction ("progress-bar", "animate", newHPBarWidth);
	}
	checkAction(showAnimation);
  };
  
  var idleLoopAction = function(idleLoop, newDpsInterval, callback){
	idleLoop *= 1;
	let totalDps = new Decimal(hero.totalDps);
	let maxHpEnemy = new Decimal(enemy.maxHp);
	let firstDamage = new Decimal(hitGodsDamage());
	let partnerAbilityDamage = new Decimal(calcTotalAbility(idleLoop));

	if(stealCoinTimer > 0){
	  let successRun = Math.floor(idleLoop * newDpsInterval / stealCoinTimer);
	  runStealCoin(successRun);
	}
	if(dpcToCoinTimer > 0){
	  let successRun = Math.floor(idleLoop * newDpsInterval / dpcToCoinTimer);
	  runDpcToCoin(successRun);
	  
	}
	if(dpsToCoinTimer > 0){
	  let successRun = Math.floor(idleLoop * newDpsInterval / dpsToCoinTimer);
	  runDpsToCoin(totalDps,successRun);
	}
	
	if(calcTotalProduceLaborCoin().greaterThan(0)){
	  let successRun = Math.floor(idleLoop * newDpsInterval / 10000);
	  produceLaborCoin(successRun);
	}

	currentEnemyHP = initDungeon();
	let killedHit = 0;
	while(currentEnemyHP.greaterThan(0)){
	  if(killedHit == 0) currentEnemyHP = currentEnemyHP.sub(firstDamage);
	  currentEnemyHP = currentEnemyHP.sub(totalDps);
	  killedHit += 1;
	  if(killedHit % 10 == 0) currentEnemyHP = currentEnemyHP.sub(partnerAbilityDamage);
	}

	let killedCount = new Decimal(idleLoop).div(killedHit).floor();
	checkAction(false,killedCount);
	currentEnemyHP = initDungeon();
	callback();
  };
  
  var checkLoopTowerAction = function(newTowerDpsInterval,callback){
	let interval = Date.now() - lastTowerDpsHit;
	let newBossInterval = 1000;
	let intervalBoss = Date.now() - lastTowerBossTimer;
	let intervalTime = 0;
	let loop = Math.floor(interval/newTowerDpsInterval);
	let idleLoop = 0;

	while(interval >= (newTowerDpsInterval*2) && (lastTowerDpsHit+newTowerDpsInterval) < Date.now()){
	  loopTowerAction(false, newTowerDpsInterval);
	  interval -= newTowerDpsInterval;
	  lastTowerDpsHit += newTowerDpsInterval;
	  restTowerBossTimer -= newTowerDpsInterval;
	  lastTowerBossTimer += newTowerDpsInterval;
	  if(restTowerBossTimer <= 0 || currentTowerManagerHp.lessThanOrEqualTo(0)) stopTowerBossTimer();
	}
	if((lastTowerDpsHit+newTowerDpsInterval) <= Date.now()){
	  interval -= newTowerDpsInterval;
	  lastTowerDpsHit += newTowerDpsInterval;
	  loopTowerAction(true, newTowerDpsInterval);
	  restTowerBossTimer -= newTowerDpsInterval;
	  lastTowerBossTimer += newTowerDpsInterval;
	}else if(restTowerBossTimer <= 0 || currentTowerManagerHp.lessThanOrEqualTo(0)) stopTowerBossTimer();
	
	callback();  
  };
  
  var checkLoopAction = function(newDpsInterval, callback){
	let interval = Date.now() - lastDpsHit;
	let newBossInterval = 1000;
	let intervalBoss = Date.now() - lastBossTimer;
	let intervalTime = 0;
	let loop = Math.floor(interval/newDpsInterval);
	let idleLoop = 0;
	
	if(loop > setting.idleMaxLoop){
	  idleLoop = loop - setting.idleMaxLoop;
	  intervalTime = Date.now();
	  idleLoopAction(idleLoop, newDpsInterval, function(){
		interval -= (newDpsInterval*idleLoop);
		lastDpsHit += (newDpsInterval*idleLoop);
		loop -= idleLoop;
		saveGame();
	  });
	}

	while(interval >= (newDpsInterval*2) && (lastDpsHit+newDpsInterval) < Date.now()){
	  loopAction(false, newDpsInterval);
	  interval -= newDpsInterval;
	  lastDpsHit += newDpsInterval;
	  if(hero.floor % enemy.bossFloor == 0 && !activeScreen){
	    restBossTimer -= newDpsInterval;
		if((lastBossTimer+newDpsInterval) <= Date.now()) lastBossTimer += newDpsInterval;
	  }
	  if(restBossTimer <= 0) stopBossTimer();
	}

	if((lastDpsHit+newDpsInterval) <= Date.now()){
	  interval -= newDpsInterval;
	  lastDpsHit += newDpsInterval;
	  if(hero.floor % enemy.bossFloor == 0 && !bossTimeout){
	    restBossTimer -= newDpsInterval;
		if((lastBossTimer+newDpsInterval) <= Date.now()) lastBossTimer += newDpsInterval;
	  }
	  loopAction(true, newDpsInterval);
	}
	callback();
  };
  
  var formulaIntervalDps = function(){
	let newDpsInterval = (1000 - (hero.bonusIntervalDps*1)) / setting.gameSpeed; 
	return newDpsInterval;
  };
  
  var restResetTimer = function(){
	let date = new Date();
	let nextDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()+1);
	let currentTime = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(),date.getHours(), date.getMinutes(), date.getSeconds());
	return (nextDate-currentTime)/1000;
  };
  
  var gameLoop = function(showAnimation=false,callback){
	loopsEverySec++;
	
	updateInGameDateTime();
	let date = new Date();
	let currentDate = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
	
	if(($("#modalDailyCheckIn").hasClass("show"))) componentAction("reset-check-in-timer","replaceText",offlineTimeFormat(restResetTimer()));
	if(!($("#tower-div").hasClass("d-none"))) componentAction("reset-tower-timer","replaceText",offlineTimeFormat(restResetTimer()));
	
	if(currentDate >= nextActiveDate){
	  insertTask();
	  if(checkCollectDailyCheckIn()) collectDailyCheckIn();
	  if(hero.highestFloor >= unlockNewFeatureFloor("tower")) addTowerKey();
	  setActiveDate();
	}
	if(loopsEverySec % 10 == 0){
	  if(hero.highestFloor >= unlockNewFeatureFloor("labor")) produceLaborCoin();
	}
	if(hero.highestFloor >= unlockNewFeatureFloor("companion") && hero.filledCompanionSlot < hero.generatedCompanionSlot) updateCompanionTimer();
	if(hero.highestFloor >= unlockNewFeatureFloor("equipment")	&& hero.filledEquipmentSlot < hero.generatedEquipmentSlot) updateEquipmentTimer();
	if(hero.tempBonusShopDpcTime > 0 || hero.tempBonusShopDpsTime > 0 || hero.tempBonusShopCoinTime > 0) updateShopTimer();
	
	if(hero.activeTrainingSlot > 0) startTrainingTimer();
	if(hero.highestFloor >= unlockNewFeatureFloor("house"))updateSavingBalance();
	
	if(loopsEverySec % setting.localSaveTimer == 0) saveGame();
	callback();
  };
  
  var loopEverySecTimer = function(){
	let everySecInterval = 1000 / setting.gameSpeed;
	let interval = Date.now() - lastEverySecRun;
	while(interval >= (everySecInterval*2) && (lastEverySecRun+everySecInterval) < Date.now()){
	  gameLoop(false,function(){
		interval -= everySecInterval;
	    lastEverySecRun += everySecInterval;
	  });
	}
	if((lastEverySecRun+everySecInterval) <= Date.now()){
	  gameLoop(true, function(){
		interval -= everySecInterval;
	    lastEverySecRun += everySecInterval;
	  });
	}
	interval = Date.now() - lastEverySecRun;
	everySecTimeout = setTimeout(loopEverySecTimer, (everySecInterval - interval));
  };
  
  var startEverySecInterval = function(){
	everySecTimeout = clearTimeout(everySecTimeout);
	if(!everySecTimeout){
	  lastEverySecRun = Date.now();
	  loopEverySecTimer();
	}
  };
  
  var loopDpsTimer = function(){
	let newDpsInterval = formulaIntervalDps();
	checkLoopAction(newDpsInterval, function(){
	  let interval = Date.now() - lastDpsHit;
	  dpsTimeout = setTimeout(loopDpsTimer, (newDpsInterval - interval));
	});
  };
  
  var loopTowerDpsTimer = function(){
	let newTowerDpsInterval = 1000 / setting.gameSpeed;
	checkLoopTowerAction(newTowerDpsInterval, function(){
	  let interval = Date.now() - lastTowerDpsHit;
	  if(restTowerBossTimer >= 0 && currentTowerManagerHp.greaterThan(0)) towerDpsTimeout = setTimeout(loopTowerDpsTimer, (newTowerDpsInterval-interval));
	  else stopTowerBossTimer();
	});
  };
  
  var startDpsInterval = function(isClearTimeout=false){
	if(isClearTimeout) dpsTimeout = clearTimeout(dpsTimeout);
	if(!dpsTimeout){
	  let heroDps = new Decimal(hero.dps);
	  if(heroDps.greaterThan(0)){
		lastDpsHit = Date.now();
		loopDpsTimer();
	  }else dpsTimeout = clearTimeout(dpsTimeout);
	}
  };
  
  var addCountSkillUsed = function(skillId){
    let statisticSkill = hero.totalSkillUsed.find(item => item.id === skillId);
	if(statisticSkill) statisticSkill.count++;
	else{
	  let newObjSkillUsed = {
	    id: skillId,
	    count: 1
	  };
	  hero.totalSkillUsed.push(newObjSkillUsed);
	}
  };
  
  var startAllSkill = function(){
	for(let i=0;i<hero.unlockSkill.length;i++) if(!hero.unlockSkill[i].isActive && !hero.unlockSkill[i].isCooldown) useSkill(hero.unlockSkill[i].id);
  };
  
  var startSkill = function(skillId,useTicket){
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	unlockSkill.lastStartDatetime = 0;
	unlockSkill.isActive = false;
	  
	if(useTicket) activateSkillButton(skillId);
	else{
	  unlockSkill.lastCooldownDatetime = Date.now();
	  unlockSkill.isCooldown = true;
	  
	  startCooldownSkill(skillId);
	}
  };
  
  var checkSkill = function(skillId,totalDurationSkill){
	let restDurationSkill = totalDurationSkill;
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	if(unlockSkill.lastStartDatetime == 0){
	  unlockSkill.lastStartDatetime = Date.now();
	  unlockSkill.isActive = true;
	  addCountSkillUsed(skillId);
	}else{
	  let endSkillDateTime = unlockSkill.lastStartDatetime + (totalDurationSkill*1000);
	  if(endSkillDateTime <= Date.now()){
		restDurationSkill = new Decimal(0);
		unlockSkill.lastCooldownDatetime = endSkillDateTime;
		unlockSkill.isCooldown = true;
		
		let totalCooldownSkill = new Decimal(unlockSkill.cooldown).sub(artifactSkillCooldown(skillId)).div(setting.gameSpeed);
		let cooldownTimer = calcCooldownSkillTimer(totalCooldownSkill, unlockSkill.lastCooldownDatetime);
	
		$("#use-skill-button-"+skillId).prop('disabled', true);
		componentAction ("skill-timer-desc-"+skillId, "replaceText", "Cooldown Timer - "+offlineTimeText(cooldownTimer), true);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-running,skill-disabled", true);
	  }else{
		restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
	  }
	}  
	return restDurationSkill;
  };
  
  var startAutoClickerInterval = function (skillId,useTicket=false){
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId)).div(setting.gameSpeed);	
	let restDurationSkill = totalDurationSkill;
	let totalSkillDamage = new Decimal(unlockSkill.damage).plus(artifactSkillDamage(skillId));
	let intervalSkill = new Decimal(1000).div(totalSkillDamage).div(setting.gameSpeed).floor();
	
	if(!useTicket && unlockSkill.isActive) useTicket = unlockSkill.useTicket;
	if(autoClickerInterval || autoClickerDuration){
	  autoClickerInterval = clearInterval(autoClickerInterval);
	  autoClickerDuration = clearInterval(autoClickerDuration);
	  startSkill(skillId,useTicket);
	}else{
	  restDurationSkill = checkSkill(skillId,totalDurationSkill);
	  updateTask(3);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running");
	  if(useTicket && $("#use-skill-button-"+skillId).hasClass("skill-disabled")){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-running");
	  }
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
	  hitDPC();
		
	  autoClickerDuration = setInterval (function (){
		restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
		componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
		
		if(restDurationSkill.lessThanOrEqualTo(0)){
		  autoClickerDuration = clearInterval(autoClickerDuration);
		  autoClickerInterval = clearInterval(autoClickerInterval);
		  if(useTicket) activateSkillButton(skillId);
		  else startCooldownSkill(skillId);
		}
	  },1000);
	  autoClickerInterval = setInterval(function() {
		hitDPC();
	  },intervalSkill);
	}
  };
  
  var startPowerShotInterval = function (skillId,useTicket=true) {
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId)).div(setting.gameSpeed);
	let restDurationSkill = totalDurationSkill;
	
	if(!useTicket && unlockSkill.isActive) useTicket = unlockSkill.useTicket;
	if(powerShotInterval){ 
	  powerShotInterval = clearInterval(powerShotInterval);
	  startSkill(skillId,useTicket);
	}else{
	  restDurationSkill = checkSkill(skillId,totalDurationSkill);
	  updateTask(3);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running");
	  if(useTicket && $("#use-skill-button-"+skillId).hasClass("skill-disabled")){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-running");
	  }
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
	  
	  powerShotInterval = setInterval (function (){ 
	    restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
		componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
		  
		if(restDurationSkill.lessThanOrEqualTo(0)){
		  powerShotInterval = clearInterval(powerShotInterval);
		  if(useTicket) activateSkillButton(skillId);
		  else startCooldownSkill(skillId);
		  initDisplay();
		}
	  },(1000/setting.gameSpeed));
	  initDisplay();
	}
  };
  
  var startSpecialForceInterval = function (skillId,useTicket=true) {
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId)).div(setting.gameSpeed);
	let restDurationSkill = totalDurationSkill;
	
	if(!useTicket && unlockSkill.isActive) useTicket = unlockSkill.useTicket;
	if(specialForceInterval){
	  specialForceInterval = clearInterval(specialForceInterval);
	  startSkill(skillId,useTicket);
	}else{
	  restDurationSkill = checkSkill(skillId,totalDurationSkill);
	  updateTask(3);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running");
	  if(useTicket && $("#use-skill-button-"+skillId).hasClass("skill-disabled")){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-running");
	  }
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));

	  specialForceInterval = setInterval (function (){ 
	    restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
		componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
		  
		if(restDurationSkill.lessThanOrEqualTo(0)){
		  specialForceInterval = clearInterval(specialForceInterval);
		  if(useTicket) activateSkillButton(skillId);
		  else startCooldownSkill(skillId);
		  initDisplay();
		}
	  },(1000/setting.gameSpeed));
	}
	initDisplay();
  };
  
  var startLuckyCoinInterval = function (skillId,useTicket=true) {
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId)).div(setting.gameSpeed);;
	let restDurationSkill = totalDurationSkill;
	
	if(!useTicket && unlockSkill.isActive) useTicket = unlockSkill.useTicket;
	if(luckyCoinInterval){ 
	  luckyCoinInterval = clearInterval(luckyCoinInterval);
	  startSkill(skillId,useTicket);
	}else{
	  restDurationSkill = checkSkill(skillId,totalDurationSkill);
	  updateTask(3);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running");
	  if(useTicket && $("#use-skill-button-"+skillId).hasClass("skill-disabled")){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-running");
	  }
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));

	  luckyCoinInterval = setInterval (function (){ 
		restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
		componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
		if(restDurationSkill.lessThanOrEqualTo(0)){
		  luckyCoinInterval = clearInterval(luckyCoinInterval);
		  if(useTicket) activateSkillButton(skillId);
		  else startCooldownSkill(skillId);
		}
	  },(1000/setting.gameSpeed));
	}
  };
  
  var loopBillionaire = function(){
	let skillId = 4;
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId)).div(setting.gameSpeed);
	let restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
	let endSkillDateTime = unlockSkill.lastStartDatetime + (totalDurationSkill*1000);

	let newBillionaireInterval = new Decimal(1000).div(setting.gameSpeed);
	let interval = Date.now() - lastBillionaireHit;
	while(interval >= newBillionaireInterval){
	  runBillionaire(skillId);
	  interval -= newBillionaireInterval;
	  lastBillionaireHit += newBillionaireInterval*1;
	}
	if(lastBillionaireHit < endSkillDateTime){
	  restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
	  
	  runBillionaire(skillId);
	  lastBillionaireHit += newBillionaireInterval*1;
	}
	if(restDurationSkill.lessThanOrEqualTo(0)){
	  billionaireTimeout = clearTimeout(billionaireTimeout);
	  let useTicket = unlockSkill.useTicket;
	  if(useTicket) activateSkillButton(skillId);
	  else startCooldownSkill(skillId);
	}else billionaireTimeout = setTimeout(loopBillionaire, (newBillionaireInterval - interval));
  };
  
  var startBillionaireInterval = function (skillId,useTicket=true){
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId));
	let restDurationSkill = totalDurationSkill;
	
	if(!useTicket && unlockSkill.isActive) useTicket = unlockSkill.useTicket;
	if(billionaireTimeout){ 
	  billionaireTimeout = clearTimeout(billionaireTimeout);
	  startSkill(skillId,useTicket);
	}else{
	  restDurationSkill = checkSkill(skillId,totalDurationSkill);
	  updateTask(3);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running");
	  if(useTicket && $("#use-skill-button-"+skillId).hasClass("skill-disabled")){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-running");
	  }
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
	  lastBillionaireHit = Date.now();
	  loopBillionaire();
	}
  };
  
  var loopGrimReaper = function(){
	let skillId = 5;
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId).mul(1000)).div(setting.gameSpeed);
	let endSkillDateTime = unlockSkill.lastStartDatetime + (totalDurationSkill*1000);
	let newGrimReaperInterval = new Decimal(5000).sub(hero.bonusIntervalGrimReaper).div(setting.gameSpeed);
	let interval = Date.now() - lastGrimReaperHit;
	
	while(interval >= (newGrimReaperInterval*2) && (lastGrimReaperHit + newGrimReaperInterval) < endSkillDateTime){
	  runGrimReaper(skillId);
	  interval -= newGrimReaperInterval;
	  lastGrimReaperHit += newGrimReaperInterval*1;
	  unlockSkill.lastHit = lastGrimReaperHit;
	}
	
	if(lastGrimReaperHit < endSkillDateTime){
	  if((Date.now()-unlockSkill.lastHit)>=newGrimReaperInterval){ 
	    lastGrimReaperHit += newGrimReaperInterval*1;
	    unlockSkill.lastHit = lastGrimReaperHit;
		runGrimReaper(skillId);
	  }
	  grimReaperTimeout = setTimeout(loopGrimReaper, (newGrimReaperInterval - interval));
	}
  };
  
  var startGrimReaperInterval = function (skillId,useTicket=true){
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalDurationSkill = new Decimal(unlockSkill.duration).plus(artifactSkillDuration(skillId)).div(setting.gameSpeed);
	let restDurationSkill = totalDurationSkill;
	
	if(!useTicket && unlockSkill.isActive) useTicket = unlockSkill.useTicket;
	if(grimReaperTimeout || grimReaperDuration){ 
	  grimReaperTimeout = clearTimeout(grimReaperTimeout);
	  grimReaperDuration = clearInterval(grimReaperDuration);
	  startSkill(skillId,useTicket);
	}else{
	  restDurationSkill = checkSkill(skillId,totalDurationSkill);
	  updateTask(3);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-active,skill-running");
	  if(useTicket && $("#use-skill-button-"+skillId).hasClass("skill-disabled")){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-running");
	  }
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
	  
	  if(unlockSkill.lastHit == 0)lastGrimReaperHit = Date.now();
	  else lastGrimReaperHit = unlockSkill.lastHit;
	  loopGrimReaper();
	  
	  grimReaperDuration = setInterval (function (){ 
		restDurationSkill = totalDurationSkill.sub(Math.floor((Date.now() - unlockSkill.lastStartDatetime) / 1000));
		componentAction ("skill-timer-desc-"+skillId, "replaceText", "Click to Stop - "+offlineTimeText(restDurationSkill));
		
		if(restDurationSkill.lessThanOrEqualTo(0)){
		  grimReaperDuration = clearInterval(grimReaperDuration);
		  grimReaperTimeout = clearTimeout(grimReaperTimeout);
		  if(useTicket) activateSkillButton(skillId);
		  else startCooldownSkill(skillId);
		}
	  },(1000/setting.gameSpeed));
	}
  };
  
  var calcCooldownSkillTimer = function(totalCooldownSkill, lastCooldownDatetime){
	let cooldownTimer = new Decimal(totalCooldownSkill).sub(Math.floor((Date.now()-lastCooldownDatetime) / 1000));
	return cooldownTimer;
  };
  
  var activateSkillButton = function(skillId){
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	if(unlockSkill.lastCooldownDatetime > 0 && unlockSkill.isCooldown == true){
	  startCooldownSkill(skillId);
	}else{
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-disabled,skill-active", true);
	  componentAction ("use-skill-button-"+skillId, "updateClass", "skill-running,skill-active", true);
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Use Skill - Ready To Use", true);
	  showNotifIcon("skill-tab-button", true);
	  
	  unlockSkill.lastStartDatetime = 0;
	  unlockSkill.isActive = false;
	  unlockSkill.useTicket = false;
	}
  };
  
  var startCooldownSkill = function(skillId) {
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let totalCooldownSkill = new Decimal(unlockSkill.cooldown).sub(artifactSkillCooldown(skillId)).div(setting.gameSpeed);
	let cooldownTimer = 0;
	
	unlockSkill.lastStartDatetime = 0;
	unlockSkill.isActive = false;
	unlockSkill.lastHit = 0;
	if(unlockSkill.lastCooldownDatetime == 0){
	  unlockSkill.lastCooldownDatetime = Date.now();
	  unlockSkill.isCooldown = true;
	  cooldownTimer = new Decimal(totalCooldownSkill);
	}else cooldownTimer = calcCooldownSkillTimer(totalCooldownSkill, unlockSkill.lastCooldownDatetime);
	
	$("#use-skill-button-"+skillId).prop('disabled', true);
	componentAction ("skill-timer-desc-"+skillId, "replaceText", "Cooldown Timer - "+offlineTimeText(cooldownTimer), true);
	componentAction ("use-skill-button-"+skillId, "updateClass", "skill-running,skill-disabled", true);
	
	let skillCooldown = setInterval(function() {
	  cooldownTimer = calcCooldownSkillTimer(totalCooldownSkill, unlockSkill.lastCooldownDatetime);
	  componentAction ("skill-timer-desc-"+skillId, "replaceText", "Cooldown Timer - "+offlineTimeText(cooldownTimer));
	  if(cooldownTimer.lessThanOrEqualTo(0)){
		$("#use-skill-button-"+skillId).prop('disabled', false);
		
		let removeIndex = skillCooldownInterval.map(function(item) { return item.id; }).indexOf(skillId);
		if(removeIndex!== -1) skillCooldownInterval.splice(removeIndex, 1);
		
		skillCooldown = clearInterval(skillCooldown);
		unlockSkill.lastCooldownDatetime = 0;
		unlockSkill.isCooldown = false;
		activateSkillButton(skillId);
	  } 
	},1000);
	let searchSkillCooldownInterval = skillCooldownInterval.find(item => item.id === skillId);
	if(searchSkillCooldownInterval)searchSkillCooldownInterval.interval = skillCooldown;
	else{
	  let newObjInterval = {
	    id: skillId,
	    lastUse: Date.now(),
	    cooldown: unlockSkill.cooldown,
	    interval: skillCooldown
	  };
	  skillCooldownInterval.push(newObjInterval);
	}
	saveGame();
  };
  
  var artifactSkillDamage = function(skillId){
	let bonusArtifactSkillDamage;
	
	switch(skillId){
	  case 0:
		bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 12);
		break;
	  case 1:
		bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 15);
		break;
	  case 2:
		bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 18);
		break;
	  case 3:
		bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 21);
		break;
	  case 4:
		bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 35);
		break;
	  case 5:
		bonusArtifactSkillDamage = hero.unlockArtifact.find(item => item.id === 24);
		break;
	}
	if(bonusArtifactSkillDamage) return new Decimal(bonusArtifactSkillDamage.damage);
	else return new Decimal(0);
  };
  
  var artifactSkillDuration = function(skillId){
	let bonusArtifactSkillDuration;
	
	switch(skillId){
	  case 0:
		bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 13);
		break;
	  case 1:
		bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 16);
		break;
	  case 2:
		bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 19);
		break;
	  case 3:
		bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 22);
		break;
	  case 4:
		bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 36);
		break;	
	  case 5:
		bonusArtifactSkillDuration = hero.unlockArtifact.find(item => item.id === 25);
		break;
	}
	if(bonusArtifactSkillDuration) return new Decimal(bonusArtifactSkillDuration.damage);
	else return new Decimal(0);
  };
  
  var artifactSkillCooldown = function(skillId){
	let bonusArtifactSkillCooldown;
	
	switch(skillId){
	  case 0:
		bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 14);
		break;
	  case 1:
		bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 17);
		break;
	  case 2:
		bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 20);
		break;
	  case 3:
		bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 23);
		break;
	  case 4:
		bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 37);
		break;	
	  case 5:
		bonusArtifactSkillCooldown = hero.unlockArtifact.find(item => item.id === 26);
		break;
	}
	if(bonusArtifactSkillCooldown) return new Decimal(bonusArtifactSkillCooldown.damage);
	else return new Decimal(0);
  };
  
  var calcPrestigeToken = function(orbsMultiplier){
	switch(orbsMultiplier){
	  case 2:
		return setting.base2OrbsPrestige;
		break;
	  case 3:
	    return setting.base3OrbsPrestige;
		break;
	  case 5:
		return setting.base5OrbsPrestige;
		break;
	  default:
		return 0;
		break;
	};
  };
  
  var startPrestige = function(){
	if(hero.maxFloor >= unlockNewFeatureFloor("artifact")){
	  let totalOrbs = new Decimal(calcTotalOrbs());
	  let textOrbs = "Orb";
	  
	  if(totalOrbs > 1) textOrbs = "Orbs";
	  componentAction ("prestige-text-confirm", "replaceText", numberFormat(totalOrbs)+" "+textOrbs);
	  
	  let text2 = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Orbs x2</div><div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex middle-content"><img src="assets/images/token.svg" class="image-size"></img>'+calcPrestigeToken(2)+'</div>';
	  let text3 = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Orbs x3</div><div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex middle-content"><img src="assets/images/token.svg" class="image-size"></img>'+calcPrestigeToken(3)+'</div>';
	  if($.trim( $('#prestige-ok-button-2').text() ).length == 0) $("#prestige-ok-button-2").append(text2);
	  if($.trim( $('#prestige-ok-button-3').text() ).length == 0) $("#prestige-ok-button-3").append(text3);
	  
	  if(hero.quintuplePrestige){
		componentAction("prestige-5-div","removeClass","d-none");
	    let text5 = '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">Orbs x5</div><div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex middle-content"><img src="assets/images/token.svg" class="image-size"></img>'+calcPrestigeToken(5)+'</div>';
	    if($.trim( $('#prestige-ok-button-5').text() ).length == 0) $("#prestige-ok-button-5").append(text5);
	  }else componentAction("prestige-5-div","addClass","d-none");
	  componentAction("popup-prestige-token","replaceText",numberFormat(hero.token));
	  $("#modalPrestigeConfirm").modal('show');
	}
  };
  
  var confirmRunPrestige = function(orbsMultiplier){
	orbsMultiplier = parseInt(orbsMultiplier,10);
	let totalOrbs = new Decimal(calcTotalOrbs());
	let totalToken = new Decimal(calcPrestigeToken(orbsMultiplier));
	let heroToken = new Decimal(hero.token);
	
	if(heroToken.greaterThanOrEqualTo(totalToken)){
	  $("#modalPrestigeConfirm").modal('hide');
	  if(hero.settingConfirmUseToken){
	    $("#modalPrestigeTokenConfirm").modal('show');
	    componentAction("prestige-token","replaceText",totalToken);
	    componentAction("prestige-orbs-multiplier","replaceText",orbsMultiplier);
	    componentAction("prestige-token-ok-button","inputText",orbsMultiplier);
	  }else runPrestige(orbsMultiplier);
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You don't have enough token to do x"+orbsMultiplier+" prestige");
	}
  };
  
  var runPrestige = function(orbsMultiplier=1){
	orbsMultiplier = parseInt(orbsMultiplier,10);
	if(hero.maxFloor >= unlockNewFeatureFloor("artifact")){
	  let totalToken = new Decimal(calcPrestigeToken(orbsMultiplier));
	  let heroToken = new Decimal(hero.token);
	  
	  if(heroToken.greaterThanOrEqualTo(totalToken)){
	    let totalOrbs = new Decimal(calcTotalOrbs());
	    let extraOrbs = new Decimal(runExtraOrbs(totalOrbs));
	    let totalPrestigeOrbs = new Decimal(totalOrbs).plus(extraOrbs).mul(orbsMultiplier);
	    let textOrbs = "Orb";
	    let totalGainOrbs = new Decimal(hero.totalGainOrbs);
		
	    hero.orbs = new Decimal(hero.orbs).plus(totalPrestigeOrbs);
	    hero.lastPrestigeDatetime = Date.now();
	    hero.lastPrestigeOrbs = totalPrestigeOrbs;
	    if(hero.totalCountPrestige==0) hero.lastPrestigeShow = false;
		else hero.lastPrestigeShow = true;
		hero.token = new Decimal(hero.token).sub(totalToken);
		updateTask(29,totalToken);
	  
	    totalGainOrbs = totalGainOrbs.plus(totalPrestigeOrbs);
	    hero.totalGainOrbs = totalGainOrbs;
	    updateTask(2);
	    hero.totalCountPrestige += 1;
		hero.settingOnlineProgress = true;
		if(setting.devPage){
		  let currentDate = getCurrentDate();
		  let currentTime = getCurrentTime();
		  newObjPrestigeData = {
			dateTime: currentDate + " " + currentTime,
			orbs: totalGainOrbs,
			maxFloor: hero.maxFloor,
		  };
		  hero.prestigeDateTime.push(currentDatetime);
		}
	    resetGame(true, function(){
		  saveGame();
	      window.location.reload(true);
		});
	  }else{
		$("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "You don't have enough token to do x"+orbsMultiplier+" prestige");  
	  }
	}  
  };
  
  var upgradeLevelHero = function (){
	maxHeroLevelBuy = 0;
	let upgradeFee = updateUpgradeLevelFeeHero();
	let heroCoin = new Decimal(hero.coin);	
		
	if(heroCoin.greaterThanOrEqualTo(upgradeFee) && upgradeFee.greaterThan(0)){
	  let heroDPC = new Decimal(hero.dpc);
	  let totalSpentCoin = new Decimal(hero.totalSpentCoin);
	  upgradeFee = runUpgradeDisc(upgradeFee);
	  heroCoin = heroCoin.sub(upgradeFee);
	  hero.coin = heroCoin;
	  
	  totalSpentCoin = totalSpentCoin.plus(upgradeFee);
	  hero.totalSpentCoin = totalSpentCoin;
	  
	  heroDPC = heroDPC.plus(calcNextHeroDpc());
	  hero.dpc = heroDPC;
	  
	  if(setting.levelUpgradeMultiplier > 0){
		hero.heroLevel += setting.levelUpgradeMultiplier;
		updateTask(7,setting.levelUpgradeMultiplier);
	  }else if(setting.levelUpgradeMultiplier == 0){
		hero.heroLevel += maxHeroLevelBuy;
		updateTask(7,maxHeroLevelBuy);
	  }	  
	  if(hero.highestHeroLevel < hero.heroLevel) hero.highestHeroLevel = hero.heroLevel;
	  
	  updateHeroDpc();
	  if(tutorialAnimation == "world2" && currentTutorialStep == 1) nextTutorial();
	  initDisplay();
	}
  };
  
  var upgradeLevelWeapon = function (){
	maxWeaponLevelBuy = 0;
	let upgradeFee = updateUpgradeLevelFeeWeapon();
	let heroCoin = new Decimal(hero.coin);
	let unlockPet = hero.unlockPet.find(item => item.id === 1);
	
    if(heroCoin.greaterThanOrEqualTo(upgradeFee)){
	  let weaponDpc = new Decimal(hero.weaponDpc);
	  let totalSpentCoin = new Decimal(hero.totalSpentCoin);
	  upgradeFee = runUpgradeDisc(upgradeFee);
	  heroCoin = heroCoin.sub(upgradeFee);
	  hero.coin = heroCoin;
	  
	  totalSpentCoin = totalSpentCoin.plus(upgradeFee);
	  hero.totalSpentCoin = totalSpentCoin;
	  
	  weaponDpc = weaponDpc.plus(calcNextWeaponDpc());
	  hero.weaponDpc = weaponDpc;
	  
	  if(hero.weaponLevel == 0){
		hero.weaponLevel += 1;
		updateTask(8);
	  }else{
		if(setting.levelUpgradeMultiplier > 0){
		  hero.weaponLevel += setting.levelUpgradeMultiplier;
		  updateTask(8, setting.levelUpgradeMultiplier);
	    }else if(setting.levelUpgradeMultiplier == 0){
  		  hero.weaponLevel += maxWeaponLevelBuy;
		  updateTask(8, maxWeaponLevelBuy);
		}
	  }
	  
	  if(hero.highestWeaponLevel < hero.weaponLevel) hero.highestWeaponLevel = hero.weaponLevel;
	  if(!unlockPet) unlockNewPet(1);
	  
	  updateHeroDpc();
	  initDisplay();
	}	
  };
  
  var createHighestPartner = function(partnerId,unlockPartner=null,partnerStatus="Battling"){
	let partnerLevel = 0;
	let partnerDps = 0;
	if(unlockPartner){
	  partnerLevel = unlockPartner.level;
	  partnerDps = unlockPartner.dps;
	}
	let partnerData = partner.find(item => item.id === partnerId);
	let newObjHighestPartner = {
		id: partnerId,
		level: partnerLevel,
		dps: partnerDps,
		bonusDps: 0,
		status: partnerStatus,
		upgradeLevel: 0,
		enhanceLevel: 0,
		baseDps: partnerData.baseDps,
		baseDpsLevel: 1,
		baseCritChancePercentage: 5,
		critChanceLevel: 0,
		baseCritDamagePercentage: 125,
		critDamageLevel: 0,
		baseAbilityDamagePercentage: 0,
		abilityDamageLevel: 0,
		enhanceDpsPercentage: 0,
		enhanceCritDamagePercentage: 0,
		enhanceCritChancePercentage: 0,
		enhanceAbilityDamagePercentage: 0,
		enhanceAbilityChancePercentage: 0,
		ability: []
	  };
	  return newObjHighestPartner;
  };
  
  var checkRoundedLevel = function(multiplierUpgrade,currentLevel,type,dataId){
	let roundedUpgradeMultiplier = 0;

	roundedUpgradeMultiplier = multiplierUpgrade;
	let nextLevel = 0;
	if(multiplierUpgrade > 0){
	  nextLevel = currentLevel + multiplierUpgrade;
	  if(nextLevel > setting.maxPartnerLevel) nextLevel = setting.maxPartnerLevel;
	  
	  if(currentLevel < 10 && nextLevel > 10) roundedUpgradeMultiplier = 10 - currentLevel;
	  else{
		let targetLevel = 25;
		if(type.toLowerCase() == "partner"){
		  let nextId = (dataId * 1) + 1;
		  let nextPartner = partner.find(item => item.id === nextId);
		  if(nextPartner) if((currentLevel * 1) < nextPartner.unlockReq && (currentLevel + targetLevel) >= nextPartner.unlockReq && (currentLevel + multiplierUpgrade) >= nextPartner.unlockReq) targetLevel = nextPartner.unlockReq;
		}
		let a = Math.floor(currentLevel / targetLevel);
		let b = Math.floor(nextLevel / targetLevel);
		if(a != b){
		  targetLevel = (a+1) * targetLevel;
		  roundedUpgradeMultiplier = targetLevel - currentLevel;
		}
	  }
	}
	return roundedUpgradeMultiplier;
  };
  
  var roundedLevelUpgrade = function(currentLevel,multiplierUpgrade,type="",dataId=-1,cantReturnZero=false,saveToVar=false){
	let roundedUpgradeMultiplier = multiplierUpgrade;
	if(multiplierUpgrade == 0 && cantReturnZero) multiplierUpgrade = setting.maxPartnerLevel;
		
	roundedUpgradeMultiplier = checkRoundedLevel(multiplierUpgrade,currentLevel,type,dataId);
	switch(type.toLowerCase()){
	  case "partner":
	    let localRoundedPartnerLevelBuy = roundedPartnerLevelBuy.find(item => item.id === dataId);
		if(saveToVar){
		  if(localRoundedPartnerLevelBuy){
		    localRoundedPartnerLevelBuy.roundedLevel = roundedUpgradeMultiplier;
		  }else{
		    let newObjRoundedPartner = {
			  id: dataId,
			  roundedLevel: roundedUpgradeMultiplier,
		    };
		    roundedPartnerLevelBuy.push(newObjRoundedPartner);
		  }
		}else{
		  if(localRoundedPartnerLevelBuy) roundedUpgradeMultiplier = localRoundedPartnerLevelBuy.roundedLevel;
		  else roundedUpgradeMultiplier = 0;
		}
		break;
	};
	return roundedUpgradeMultiplier;
  };

  var upgradeLevelPartner = function(e){
	if(e){
	  let partnerId = parseInt(e.value,10);
	  let petId = partnerId + 3;
	  let localMaxPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === partnerId);
	  let unlockPet = hero.unlockPet.find(item => item.id === petId);
	  if(localMaxPartnerLevelBuy) localMaxPartnerLevelBuy.maxLevelBuy = 0;
	  let roundedUpgradeMultiplier = 0;
	  let upgradeFee = updateUpgradeLevelFeePartner(partnerId);
	  let heroCoin = new Decimal(hero.coin);
	  let partnerStatus = 'Battling';
	  
      if(heroCoin.greaterThanOrEqualTo(upgradeFee)){
		let partnerDps = new Decimal(hero.dps);
		let nextDps = new Decimal(calcNextPartnerDps(partnerId));
		let totalSpentCoin = new Decimal(hero.totalSpentCoin);
		let canStartDpsInterval = false;
		
		upgradeFee = runUpgradeDisc(upgradeFee);
		heroCoin = heroCoin.sub(upgradeFee);
	    hero.coin = heroCoin;
		
		totalSpentCoin = totalSpentCoin.plus(upgradeFee);
	    hero.totalSpentCoin = totalSpentCoin;
	    
		if(partnerDps.equals(0) && nextDps.greaterThan(0)) canStartDpsInterval = true;
		partnerDps = partnerDps.plus(nextDps);
	    hero.dps = partnerDps.floor();
	    if(canStartDpsInterval) startDpsInterval(true);
		
		let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
		let partnerData = partner.find(item => item.id === partnerId);
		if(unlockPartner){
		  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
		  if(highestUnlockPartner)unlockPartner.status = highestUnlockPartner.status;
		  let unlockPartnerDps = new Decimal(unlockPartner.dps);
		  
		  if(setting.levelUpgradeMultiplier > 0){
			if(unlockPartner.level > 0){
			  if(hero.settingRoundedUpgrade) unlockPartner.level = unlockPartner.level + roundedLevelUpgrade(unlockPartner.level, setting.levelUpgradeMultiplier, "partner", partnerId);
			  else unlockPartner.level += setting.levelUpgradeMultiplier;
			}else unlockPartner.level += 1;
			updateTask(9, setting.levelUpgradeMultiplier);
	      }else if(setting.levelUpgradeMultiplier == 0){
			if(unlockPartner.level == 0){
			  unlockPartner.level += 1;
			  updateTask(9, 1);
			}else{
			  let localMaxPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === partnerId);
			  unlockPartner.level += localMaxPartnerLevelBuy.maxLevelBuy;
			  updateTask(9, localMaxPartnerLevelBuy.maxLevelBuy);
			}
		  }
		  unlockPartnerDps = unlockPartnerDps.plus(nextDps);
		  unlockPartner.dps = unlockPartnerDps;
		}else{
		  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
		  let weaponId = -1;
		  if(highestUnlockPartner){
			partnerStatus = highestUnlockPartner.status;
			weaponId = highestUnlockPartner.weaponId;
		  }
		  let newObjPartner = {
			id: partnerId,
			level: 1,
			dps: nextDps,
			bonusDps: 0,
			totalDps: 0,
			status: partnerStatus,
			abilityId: -1,
			abilityCounter: 0,
			abilityInterval: 0,
			abilityAccuracy: 0,
			abilityDamage: 0,
			weaponId: weaponId,
			critHit: false,
			dpsMultiplier: 0,
			critMultiplier: 0,
			weaponDps: 0,
			weaponMinDps: 0,
			weaponMaxDps: 0,
			weaponExponent: 0,
		  };
		  hero.unlockPartner.push(newObjPartner);
		  hero.countPartner += 1;
		  calcTotalPartnerDps(partnerId,"current");
		  $("#barracks-area-div").empty();
		  updateTask(9);
		}
		calculateAllItemBenefit();
		
		let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
		unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
		if(highestUnlockPartner){
		  let highestUnlockPartnerDps = new Decimal(highestUnlockPartner.dps);
		  if(highestUnlockPartner.level < unlockPartner.level) highestUnlockPartner.level = unlockPartner.level;
		  if(!highestUnlockPartner.dps) highestUnlockPartner.dps = unlockPartner.dps;
		  if(highestUnlockPartnerDps.lessThan(unlockPartner.dps)) highestUnlockPartner.dps = unlockPartner.dps;
		  if(highestUnlockPartner.status.localeCompare(partnerStatus) != 0) highestUnlockPartner.status = partnerStatus;
		}else{
		  let newObjHighestPartner = createHighestPartner(partnerId,unlockPartner);
		  hero.highestUnlockPartner.push(newObjHighestPartner);
		  if(hero.highestFloor >= unlockNewFeatureFloor("barracks")){
		    let partnerData = partner.find(item => item.id === partnerId);
		    insertPartnerAbility(partnerId,partnerData.type);
		  }
		}
		
		calculateAllPartnerAbility(partnerId);
		if(!unlockPet) unlockNewPet(petId);
		calcTotalDps(true,"dungeon",true);
		saveGame();
	    initDisplay();
	  }
	  if(tutorialAnimation == "world3" && partnerId == 0) nextTutorial();
	}
  };
  
  var upgradeLevelLabor = function(e){
	let laborId = parseInt(e.id.replace("upgrade-labor-button-",""),10);
	let unlockLabor = hero.unlockLabor.find(item => item.id === laborId);
	let upgradeFee = new Decimal(0);
	let heroCoin = new Decimal(hero.coin);
	if(unlockLabor && unlockLabor.level > 0) upgradeFee = updateUpgradeLevelFeeLabor(laborId);
	else upgradeFee = new Decimal(100).sub(hero.bonusCoinLaborUpgradeFee).div(100).mul(unlockLabor.baseFee).ceil();
	
	if(unlockLabor.level < setting.maxLaborLevel){
      if(heroCoin.greaterThanOrEqualTo(upgradeFee)){
	    unlockLabor.currentPrize = new Decimal(calcNextLaborPrize(laborId)).plus(unlockLabor.currentPrize);
	  
	    if(setting.levelUpgradeMultiplier > 0){
		  if(unlockLabor.level > 0){
		    unlockLabor.level += setting.levelUpgradeMultiplier;
		    if(unlockLabor.level > setting.maxLaborLevel) unlockLabor.level = setting.maxLaborLevel;
		  }else{
		    unlockLabor.level += 1;
		    insertNewUnlockLabor();
	 	  }
		  updateTask(28, setting.levelUpgradeMultiplier);
	    }else if(setting.levelUpgradeMultiplier == 0){
		  if(unlockLabor.level == 0){
		    unlockLabor.level += 1;
		    insertNewUnlockLabor();
		    updateTask(28, 1);
		  }else{
		    let localMaxLaborLevelBuy = maxLaborLevelBuy.find(item => item.id === laborId);
		    unlockLabor.level += localMaxLaborLevelBuy.maxLevelBuy;
		    updateTask(28, localMaxLaborLevelBuy.maxLevelBuy);
		  }
	    }
	    hero.coin = new Decimal(hero.coin).sub(upgradeFee);
	    saveGame();
	    initDisplay();
	  }
	}else{
	  let enhanceData = calcEnhanceLaborFee(laborId);
	  let enhanceFee = new Decimal(enhanceData["enhanceFee"]);
	  let enhancePrize = new Decimal(enhanceData["enhancePrize"]);
	  let coinHero = new Decimal(hero.coin);
	  
	  if(coinHero.greaterThanOrEqualTo(enhanceFee)){
		if(unlockLabor){
		  unlockLabor.grade += 1;
		  unlockLabor.level = 1;
		  unlockLabor.baseFee = new Decimal(enhanceData.enhanceFee);
		  unlockLabor.basePrize = new Decimal(enhanceData.enhancePrize);
		  unlockLabor.currentPrize = new Decimal(enhanceData.enhancePrize);
		  hero.coin = new Decimal(hero.coin).sub(enhanceFee);
		  updateLabor(true);
		}
	  }
	}
  };
  
  var upgradeLevelSkill = function (e) {
	if(e){
	  let skillId = parseInt(e.value,10);
	  let localMaxSkillLevelBuy = maxSkillLevelBuy.find(item => item.id === skillId);
	  if(localMaxSkillLevelBuy) localMaxSkillLevelBuy.maxLevelBuy = 0;
	  let currentSkillLevel = 0;  
	  let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	  
	  if(unlockSkill)currentSkillLevel = unlockSkill.level;
		  
	  if(currentSkillLevel < 10){
		let upgradeFee = updateUpgradeLevelFeeSkill(skillId);
	    let heroCoin = new Decimal(hero.coin);
		let skillDamage = 0;
        
		if(heroCoin.greaterThanOrEqualTo(upgradeFee)){		  
		  let nextDamage = calcNextSkillDamage(skillId);
		  let skillData = skill.find(item => item.id === skillId);
		  let totalSpentCoin = new Decimal(hero.totalSpentCoin);
		  upgradeFee = runUpgradeDisc(upgradeFee);
		  heroCoin = heroCoin.sub(upgradeFee);
		  hero.coin = heroCoin;
		  
		  totalSpentCoin = totalSpentCoin.plus(upgradeFee);
	      hero.totalSpentCoin = totalSpentCoin;

		  if(unlockSkill){
			if(setting.levelUpgradeMultiplier == 1) unlockSkill.level += setting.levelUpgradeMultiplier;
	        else if(setting.levelUpgradeMultiplier >= 0){
			  let localMaxSkillLevelBuy = maxSkillLevelBuy.find(item => item.id === skillId);
			  unlockSkill.level += localMaxSkillLevelBuy.maxLevelBuy;
		    }
		  
			let unlockSkillDamage = new Decimal(unlockSkill.damage);
			
			unlockSkill.damage = nextDamage;
		  }else{
			let newObjSkill = {
			  id: skillId,
			  level: 1,
			  damage: nextDamage,
			  duration: skillData.baseDuration,
			  cooldown: skillData.baseCooldown,
			  isActive: false,
			  lastStartDatetime: 0,
			  isCooldown: false,
			  lastCooldownDatetime: 0,
		      useTicket: false,
			};
			hero.unlockSkill.push(newObjSkill);
		  }
		  $("#skill-image-"+skillId).attr("src", "assets/images/levelup.svg");
		  saveGame();
		  initDisplay();
	    }	
	  }
	}
  };
  
  var upgradeLevelArtifact = function(e){
	if( !$( "#tourtip" ).length){
	  let artifactId = parseInt(e,10);
	  if(artifactId >= 0){
	    let upgradeFee = new Decimal(calcNextUpgradeArtifactFee(artifactId)).ceil();
	    let heroOrbs = new Decimal(hero.orbs);
	    let weaponDpc = new Decimal(hero.weaponDpc);
	    let artifactData = artifact.find(item => item.id === artifactId);
	  
        if(heroOrbs.greaterThanOrEqualTo(upgradeFee)){
		  let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
		  let artifactDamage = new Decimal(hero.artifactDamagePercentage);
		
		  if(unlockArtifact){
		    if(unlockArtifact.level < artifactData.maxLevel || artifactData.maxLevel == 0){
			  hero.totalSpentOrbs = new Decimal(hero.totalSpentOrbs).plus(upgradeFee);
	          heroOrbs = heroOrbs.sub(upgradeFee);
	          hero.orbs = heroOrbs;
			
			  let searchArrayArtifactLevel = arrayArtifactLevel.find(item => item.artifactId === artifactId);
			  let upgradeLevel = searchArrayArtifactLevel.maxLevel;
			  updateTask(4,upgradeLevel);
			  unlockArtifact.level += upgradeLevel;
		      unlockArtifact.damage = new Decimal(unlockArtifact.level).mul(artifactData.baseDamage);			
			  calculateAllArtifactDamage();
		      saveGame();
		      initDisplay();
	          updateArtifactArea();
		    }
		  }
 	    }else{
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", "You don't have enough orbs to upgrade "+artifactData.name);
	    }
	  }
	}
  };
  
  var shopTradeToken = function(e){
	if(e){
	  let shopId = parseInt(e.value,10);
	  let shopData = shop.find(item => item.id === shopId);
	  let heroToken = new Decimal(hero.token);
	  let canShop = true;
	  let alertShop = "";
	  
	  if(heroToken.greaterThanOrEqualTo(shopData.token)){
		let shopDescription = '';
		if(shopData.duration == 0){
		  switch(shopData.typeName){
			case "Gods Slot":
			  if(hero.activeGodsSlot >= setting.maxActiveGodsSlot){
			    canShop = false;
			    alertShop = "You already reach maximum Gods Slot";
			  }
			  shopDescription = "increase "+shopData.bonusValue+' '+shopData.typeName+' for '+shopData.unit;
			  break;
			case "Ticket":
			case "Instant Coin":
			  let materialId;
			  switch(shopData.id){
			    case 18:
			      materialId = 80;
				  break;
			    case 19:
			      materialId = 81;
				  break;
			    case 20:
			      materialId = 82;
				  break;
			    case 21:
			      materialId = 83;
				  break;
			    case 22:
			      materialId = 84;
				  break;
			    case 23:
			      materialId = 85;
				  break;
			    case 24:
			      materialId = [80,81,82,83,84,85];
				  break;
				case 25:
				  materialId = 76;
				  break;
				case 26:
				  materialId = 77;
				  break;
				case 27:
				  materialId = 78;
				  break;
				case 28:
				  materialId = 79;
				  break; 
			  };
			  if(materialId >= 76 && materialId <= 85){
			    let unlockItem = hero.unlockItem.find(item => item.itemId === materialId);
			    if(unlockItem == null || unlockItem == undefined){
				  if(hero.countBackpack >= hero.maxBackpack) canShop = false;
			    }else{
				  if(unlockItem.qty == 0 && hero.countBackpack >= hero.maxBackpack) canShop = false;
			    }
			    if(canShop == false) alertShop = "Your backpack has no room for new item";
			  }
			  if(shopData.typeName == "Ticket") shopDescription = 'buy '+shopData.bonusValue+' '+shopData.typeName+' of '+shopData.unit;
			  else if(shopData.typeName == "Instant Coin") shopDescription = "buy 1 "+shopData.unit;
			  break;
			default:
			  shopDescription = "buy 1 "+shopData.unit;
			  break;
		  };
		}else shopDescription = "increase "+shopData.typeName+' '+shopData.bonusValue+'% for '+shopData.duration+' '+shopData.unit;
		if(canShop){
		  if(hero.settingConfirmUseToken){
		    $("#modalShopForm").modal("show");
		    componentAction ("shop-ok-button", "inputText", shopId);
		    componentAction ("shop-token", "replaceText", numberFormat(shopData.token));
		    componentAction ("shop-description", "replaceText", shopDescription);
		  }else runShop(shopId);
		}else{
		  $("#modalNotification").modal("show");
		  componentAction ("notification-text", "replaceText", alertShop);
		}
	  }else{
		$("#modalNotification").modal("show");
		componentAction ("notification-text", "replaceText", "You don't have enough token");
	  }
	}		
  };
  
  var formulaBonusPermanentShop = function(typeName){
	
  };
  
  var permanentShopCalculation = function(typeName){
	let bonusPermanentShop = new Decimal(0);
	switch(typeName){
	  case 'DPC':
		bonusPermanentShop = new Decimal(hero.shopDpcLevel).div(10).floor().plus(1).mul(100);
	    break;
	  case 'DPS':
	    bonusPermanentShop = new Decimal(hero.shopDpsLevel).div(10).floor().plus(1).mul(100);
		break;
	  case 'Coin':
	    bonusPermanentShop = new Decimal(hero.shopCoinLevel).div(10).floor().plus(1).mul(100);
		break;
	  case 'Orbs':
	    bonusPermanentShop = new Decimal(hero.shopOrbsLevel).div(10).floor().plus(1).mul(100);
		break;	
	};
	return bonusPermanentShop;
  };
  
  var runShop = function(shopId){
	shopId = parseInt(shopId,10);
	let successShop = true;
	let shopData = shop.find(item => item.id === shopId);
	let heroToken = new Decimal(hero.token);
	
	if(heroToken.greaterThanOrEqualTo(shopData.token)){
	  let currentDatetime = Date.now();
	  let endDatetime = 0;
	  let bonusDuration = 0;
	  let materialId = 0;
	  let materialArray = [];
	  
	  switch(shopData.unit){
		case 'Hours':
		  bonusDuration = shopData.duration * 3600 * 1000;
		  break;
		case 'Days':
		  bonusDuration = shopData.duration * 24 * 3600 * 1000;
		  break;  
	  }
	  endDatetime = currentDatetime + bonusDuration;
	  switch(shopData.typeName){
		case 'DPC':
		  if(bonusDuration == 0){
			if(new Decimal(hero.bonusShopDpcPercentage).equals(0)) hero.bonusShopDpcPercentage = new Decimal(100);
			else hero.bonusShopDpcPercentage = new Decimal(permanentShopCalculation(shopData.typeName)).plus(hero.bonusShopDpcPercentage);
			if(hero.shopDpcLevel) hero.shopDpcLevel += 1;
			else hero.shopDpcLevel = 1;
			componentAction("shop-desc-"+shopData.typeName.toLowerCase(),"replaceText",showShopAreaDesc(shopData));
		  }else{
			if(hero.tempBonusShopDpcTime == 0) hero.tempBonusShopDpcTime = endDatetime;
			else hero.tempBonusShopDpcTime += bonusDuration;
		  }
		  break;
		case 'DPS':
		  if(bonusDuration == 0){
			if(new Decimal(hero.bonusShopDpsPercentage).equals(0)) hero.bonusShopDpsPercentage = new Decimal(100);
			else hero.bonusShopDpsPercentage = new Decimal(permanentShopCalculation(shopData.typeName)).plus(hero.bonusShopDpsPercentage);
			if(hero.shopDpsLevel) hero.shopDpsLevel += 1;
			else hero.shopDpsLevel = 1;
			componentAction("shop-desc-"+shopData.typeName.toLowerCase(),"replaceText",showShopAreaDesc(shopData));
		  }else{
			if(hero.tempBonusShopDpsTime == 0) hero.tempBonusShopDpsTime = endDatetime;
			else hero.tempBonusShopDpsTime += bonusDuration;
		  }
		  break;
		case 'Coin':
		  if(bonusDuration == 0){
			if(new Decimal(hero.bonusShopCoinPercentage).equals(0)) hero.bonusShopCoinPercentage = new Decimal(100);
			else hero.bonusShopCoinPercentage = new Decimal(permanentShopCalculation(shopData.typeName)).plus(hero.bonusShopCoinPercentage);
			if(hero.shopCoinLevel) hero.shopCoinLevel += 1;
			else hero.shopCoinLevel = 1;
			componentAction("shop-desc-"+shopData.typeName.toLowerCase(),"replaceText",showShopAreaDesc(shopData));
		  }else{
			if(hero.tempBonusShopCoinTime == 0) hero.tempBonusShopCoinTime = endDatetime;
			else hero.tempBonusShopCoinTime += bonusDuration;
		  }
		  break;
		case 'All Boost':
		  if(bonusDuration == 0){
			if(new Decimal(hero.bonusShopDpcPercentage).equals(0)) hero.bonusShopDpcPercentage = new Decimal(100);
			else hero.bonusShopDpcPercentage = new Decimal(permanentShopCalculation("DPC")).plus(hero.bonusShopDpcPercentage);
			if(hero.shopDpcLevel) hero.shopDpcLevel += 1;
			else hero.shopDpcLevel = 1;
			componentAction("shop-desc-dmg","replaceText",showShopAreaDesc("DPC"));
			
			if(new Decimal(hero.bonusShopDpsPercentage).equals(0)) hero.bonusShopDpsPercentage = new Decimal(100);
			else hero.bonusShopDpsPercentage = new Decimal(permanentShopCalculation("DPS")).plus(hero.bonusShopDpsPercentage);
			if(hero.shopDpsLevel) hero.shopDpsLevel += 1;
			else hero.shopDpsLevel = 1;
			componentAction("shop-desc-dps","replaceText",showShopAreaDesc("DPS"));
			
			if(new Decimal(hero.bonusShopCoinPercentage).equals(0)) hero.bonusShopCoinPercentage = new Decimal(100);
			else hero.bonusShopCoinPercentage = new Decimal(permanentShopCalculation("Coin")).plus(hero.bonusShopCoinPercentage);
			if(hero.shopCoinLevel) hero.shopCoinLevel += 1;
			else hero.shopCoinLevel = 1;
			componentAction("shop-desc-coin","replaceText",showShopAreaDesc("Coin"));
		  }else{
			if(hero.tempBonusShopDpcTime == 0) hero.tempBonusShopDpcTime = endDatetime;
			else hero.tempBonusShopDpcTime += bonusDuration;
			
			if(hero.tempBonusShopDpsTime == 0) hero.tempBonusShopDpsTime = endDatetime;
			else hero.tempBonusShopDpsTime += bonusDuration;
			
			if(hero.tempBonusShopCoinTime == 0) hero.tempBonusShopCoinTime = endDatetime;
			else hero.tempBonusShopCoinTime += bonusDuration;
		  }	  
		  break;
		case 'Gods Slot':
		  if(hero.activeGodsSlot < setting.maxActiveGodsSlot) hero.activeGodsSlot++;
		  else successShop = false;
		  break;
		case 'Orbs':
		  if(bonusDuration == 0){
			hero.bonusShopOrbsPercentage = new Decimal(permanentShopCalculation(shopData.typeName)).plus(hero.bonusShopOrbsPercentage);
			if(hero.shopOrbsLevel) hero.shopOrbsLevel += 1;
			else hero.shopOrbsLevel = 1;
			componentAction("shop-desc-orbs","replaceText",showShopAreaDesc(shopData));
		  }else successShop = false;
		  break;
		case 'Ticket':
		case 'Instant Coin':
		  switch(shopData.id){
			case 18:
		      materialId = 80;		  
		      break;
			case 19:
			  materialId = 81;
			  break;
			case 20:
			  materialId = 82;
			  break;
			case 21:
			  materialId = 83;
			  break;
			case 22:
			  materialId = 84;
			  break;
			case 23:
			  materialId = 85;
			  break;
			case 24:
			  materialArray = [80,81,82,83,84,85];
			  break;  
			case 25:
			  materialId = 76;
			  break;
			case 26:
			  materialId = 77;
			  break;
			case 27:
			  materialId = 78;
			  break;
			case 28:
			  materialId = 79;
			  break;    
		  };
		  if(materialArray.length > 0){
			for(let i=0;i<materialArray.length;i++){
			  materialId = materialArray[i];
			  let unlockItem = hero.unlockItem.find(item => item.itemId === materialId);
			  let materialData = material.find(item => item.id === materialId);
			  if(unlockItem == null || unlockItem == undefined){
				if(hero.countBackpack >= hero.maxBackpack) successShop = false;
			  }else{
				if(unlockItem.qty == 0 && hero.countBackpack >= hero.maxBackpack) successShop = false;
			  }
			  if(successShop) insertNewUnlockItem(materialId,1,"ticket",materialData.name,"all","backpack");
			}
		  }else if(materialId >= 76 && materialId <= 85){
			let unlockItem = hero.unlockItem.find(item => item.itemId === materialId);
			let materialData = material.find(item => item.id === materialId);
			if(unlockItem == null || unlockItem == undefined){
			  if(hero.countBackpack >= hero.maxBackpack) successShop = false;
			}else{
			  if(unlockItem.qty == 0 && hero.countBackpack >= hero.maxBackpack) successShop = false;
			}
			if(successShop){
			  if(materialId >= 80 && materialId <= 85) insertNewUnlockItem(materialId,1,"ticket",materialData.name,"all","backpack");
			  else if(materialId >= 76 && materialId <= 79) insertNewUnlockItem(materialId,1,"coin",materialData.name,"all","backpack");
			}
		  }
		  let unlockItem = hero.unlockItem.find(item => item.itemId === materialId && (item.itemType == "coin" || item.itemType == "ticket"));
		  componentAction("notif-shop-item","replaceText",shopData.unit);
		  componentAction("notif-shop-storage","replaceText",unlockItem.storageType);
		  componentAction("notif-shop-ok-button","replaceText","Open "+unlockItem.storageType);
		  componentAction("notif-shop-ok-button","inputText",unlockItem.storageType.toLowerCase());
		  $("#modalNotifShop").modal("show");
		  break;
	  }
	  if(successShop){
		hero.token = new Decimal(hero.token).sub(shopData.token);
		updateTask(29, shopData.token);
		updateHeroDpc();
		updateHeroDps();
	  }
	  showShopArea();
	  checkCssSetting();
	}
  };
  
  var confirmSellArtifact = function(e){
	if( !$( "#tourtip" ).length){
	  if(e){
	    let artifactId = parseInt(e.value,10);
	    let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
	    let artifactData = artifact.find(item => item.id === artifactId);
	    let totalOrbsGain = new Decimal(calcSellArtifact(artifactId));
	    let notifText = "lv "+unlockArtifact.level+" "+artifactData.name+" for "+numberFormat(totalOrbsGain);
	    if(totalOrbsGain > 1) notifText += " Orbs";
	    else notifText += " Orb";
	  
	    componentAction ("sell-artifact-notification", "replaceText", notifText);
	    $('#sell-artifact-ok-button').val(artifactId);
	    $("#modalSellArtifactConfirm").modal('show');
	  }
	}
  };
  
  var calcSellArtifact = function(artifactId){
	let unlockFee = new Decimal(calcCurrentUnlockArtifactFee()).mul(100-hero.bonusArtifactUnlockFeePercentage).div(100).ceil();
	let upgradeFee = new Decimal(calcCurrentUpgradeArtifactFee(artifactId));
	let totalFee = new Decimal(unlockFee).plus(upgradeFee);
	totalFee = totalFee.div(2).floor();
	return totalFee;
  };

  var sellArtifact = function(artifactId){
	let totalFee = new Decimal(calcSellArtifact(artifactId));
	
	var index = hero.unlockArtifact.findIndex(function(e){
	  return e.id === artifactId;
	});
	if(index !== -1){
	  hero.unlockArtifact.splice(index, 1);
	  $("#artifact-area-div").off('click','#upgrade-artifact-button-'+artifactId);
	  $("#artifact-area-"+artifactId).remove();
	  hero.countArtifact--;
	  hero.orbs = new Decimal(hero.orbs).plus(totalFee);
	  calculateAllArtifactDamage();
	  insertSellArtifact(artifactId);
	}
	showArtifactArea();
	saveGame();
  };
  
  var actionCounterValue = function(e){
	let arrayString = e.value.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	let type = arrayString[2];
	let action = arrayString[3];
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let unlockAbility = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	let totalPoint = unlockAbility.abilityPoint;
	let value = 0;
	
	if(type == "acc"){
	  switch(action.toLowerCase()){
	    case "allminus":
		  if(unlockAbility.tempAccuracy > unlockAbility.accuracy){
			unlockAbility.tempAbilityPoint += unlockAbility.tempAccuracy - unlockAbility.accuracy;
			unlockAbility.tempAccuracy = unlockAbility.accuracy;
		  }
		  break;
		case "minus":
		  if(unlockAbility.tempAccuracy > unlockAbility.accuracy){
			unlockAbility.tempAccuracy -= 1;
			unlockAbility.tempAbilityPoint += 1;
		  }
		  break;
		case "plus":
	      if(unlockAbility.tempAbilityPoint > 0){
			if(hero.type == "free" && unlockAbility.tempAccuracy < setting.maxFreeLevelAccuracyAbility){
			  unlockAbility.tempAccuracy += 1;
			  unlockAbility.tempAbilityPoint -= 1;
			}else if(hero.type == "premium" && unlockAbility.tempAccuracy < setting.maxPremiumLevelAccuracyAbility){
			  unlockAbility.tempAccuracy += 1;
			  unlockAbility.tempAbilityPoint -= 1;
			}
		  }
		  break;
		case "allplus":
		  if(unlockAbility.tempAbilityPoint > 0){
	        if(hero.type == "free" && unlockAbility.tempAccuracy < setting.maxFreeLevelAccuracyAbility){
			  unlockAbility.tempAccuracy += unlockAbility.tempAbilityPoint;
			  unlockAbility.tempAbilityPoint = 0;
			  if(unlockAbility.tempAccuracy > setting.maxFreeLevelAccuracyAbility){
				unlockAbility.tempAbilityPoint = unlockAbility.tempAccuracy - setting.maxFreeLevelAccuracyAbility;
				unlockAbility.tempAccuracy = setting.maxFreeLevelAccuracyAbility;
			  }
			}else if(hero.type == "premium" && unlockAbility.tempAccuracy < setting.maxPremiumLevelAccuracyAbility){
			  unlockAbility.tempAccuracy += unlockAbility.tempAbilityPoint;
			  unlockAbility.tempAbilityPoint = 0;
			  if(unlockAbility.tempAccuracy > setting.maxPremiumLevelAccuracyAbility){
				unlockAbility.tempAbilityPoint = unlockAbility.tempAccuracy - setting.maxPremiumLevelAccuracyAbility;
				unlockAbility.tempAccuracy = setting.maxPremiumLevelAccuracyAbility;
			  }
			}
		  }
		  break;
	  };  
	  if(unlockAbility.tempAccuracy != unlockAbility.accuracy) componentAction(type+"-counter-"+partnerId+"-"+abilityId,"addClass","text-info");
	  else componentAction(type+"-counter-"+partnerId+"-"+abilityId,"removeClass","text-info");
	  componentAction(type+"-counter-"+partnerId+"-"+abilityId, "replaceText", numberFormat(unlockAbility.tempAccuracy));
	}else if(type == "dam"){
	  switch(action.toLowerCase()){
	    case "allminus":
		  if(unlockAbility.tempDamage > unlockAbility.damage){
			unlockAbility.tempAbilityPoint += unlockAbility.tempDamage - unlockAbility.damage;
			unlockAbility.tempDamage = unlockAbility.damage;
		  }
		  break;
		case "minus":
		  if(unlockAbility.tempDamage > unlockAbility.damage){
			unlockAbility.tempDamage -= 1;
			unlockAbility.tempAbilityPoint += 1;
		  }
		  break;
		case "plus":
	      if(unlockAbility.tempAbilityPoint > 0){
			unlockAbility.tempDamage += 1;
			unlockAbility.tempAbilityPoint -= 1;
		  }
		  break;
		case "allplus":
		  if(unlockAbility.tempAbilityPoint > 0){
			unlockAbility.tempDamage += unlockAbility.tempAbilityPoint;
			unlockAbility.tempAbilityPoint = 0;
		  }
		  break;
	  };  
	  if(unlockAbility.tempDamage != unlockAbility.damage) componentAction(type+"-counter-"+partnerId+"-"+abilityId,"addClass","text-info");
	  else componentAction(type+"-counter-"+partnerId+"-"+abilityId,"removeClass","text-info");
	  componentAction(type+"-counter-"+partnerId+"-"+abilityId, "replaceText", numberFormat(unlockAbility.tempDamage));
	}
	componentAction("ability-point-"+partnerId+"-"+abilityId, "replaceText", numberFormat(unlockAbility.tempAbilityPoint));
	if(unlockAbility.tempAbilityPoint != unlockAbility.abilityPoint){
 	  $("#save-ability-partner-button-"+partnerId+"-"+abilityId).prop('disabled', false);
	  componentAction("save-ability-partner-button-"+partnerId+"-"+abilityId, "removeClass", "d-none");
	  componentAction("activate-ability-partner-button-"+partnerId+"-"+abilityId, "addClass", "d-none");
	}else{
	  $("#save-ability-partner-button-"+partnerId+"-"+abilityId).prop('disabled', true);
	  componentAction("save-ability-partner-button-"+partnerId+"-"+abilityId, "addClass", "d-none");
	  componentAction("activate-ability-partner-button-"+partnerId+"-"+abilityId, "removeClass", "d-none");
	}
  };
  
  var confirmSaveAbilityPartner = function(e){
	let arrayString = e.value.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	
	if(highestUnlockPartner){
	  let unlockAbility = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	  if(unlockAbility){
	    $("#modalConfirmSaveAbility").modal('show');
	    componentAction ("save-ability-ok-button", "inputText", e.value);
	  }
	}
  };
  
  var confirmActivateAbility = function(e){
	let arrayString = e.value.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let partnerData = partner.find(item => item.id === partnerId);
	let abilityData = partnerAbility.find(item => item.id === abilityId);
	let currentAction = $("#activate-ability-partner-text-"+partnerId+"-"+abilityId).text();
	
	if(highestUnlockPartner){
	  let unlockAbility = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	  if(unlockAbility){
		let activeAbility = highestUnlockPartner.ability.filter(item => item.isActive === true);
	      $("#modalConfirmActivateAbility").modal('show');
	      componentAction("activate-ability-ok-button", "inputText", e.value);
		  componentAction("ability-action", "replaceText", currentAction);
		  componentAction("activate-ability-name", "replaceText", abilityData.name);
		  componentAction("activate-partner-name", "replaceText", partnerData.name);
		  componentAction("activate-ability-ok-button", "replaceText", "Yes, "+currentAction+" It");
	  }
	}	
  };
  
  var saveAbilityPartner = function(){
	let arrayString = $("#save-ability-ok-button").val(); 
	arrayString = arrayString.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	
	if(highestUnlockPartner){
	  let unlockAbility = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	  if(unlockAbility){
		unlockAbility.accuracy = unlockAbility.tempAccuracy;
		unlockAbility.damage = unlockAbility.tempDamage;
		unlockAbility.abilityPoint = unlockAbility.tempAbilityPoint;
		
		componentAction("acc-counter-"+partnerId+"-"+abilityId,"removeClass","text-info");
		componentAction("dam-counter-"+partnerId+"-"+abilityId,"removeClass","text-info");
		componentAction("save-ability-partner-button-"+partnerId+"-"+abilityId, "addClass", "d-none");
	    componentAction("activate-ability-partner-button-"+partnerId+"-"+abilityId, "removeClass", "d-none");
		
		if(unlockAbility.abilityPoint > 0){
		  componentAction("icon-point-"+partnerId+"-"+abilityId, "removeClass", "d-none");
		  componentAction("icon-point-"+partnerId, "removeClass", "d-none");
		}else{
		  componentAction("icon-point-"+partnerId+"-"+abilityId, "addClass", "d-none");
		  componentAction("icon-point-"+partnerId, "addClass", "d-none");
		}
		
		checkCssSetting();
	  }
	}
	showDetailPartnerAbillity(partnerId);
  };
  
  var updateAbilityIcon = function(abilityId,partnerId,imgType){
	let prevActiveAbilityData = partnerAbility.find(item => item.id === abilityId);
	if(prevActiveAbilityData){
	  let prevAbilityTypeData = abilityType.find(item => item.id === prevActiveAbilityData.abilityTypeId);
	  if(prevAbilityTypeData){
		let initialAbilityType = prevAbilityTypeData.name.charAt(0).toLowerCase();
		if(imgType=="color"){
		  $("#icon-ability-"+initialAbilityType+"-"+partnerId).attr("src", "assets/images/"+initialAbilityType+".svg");
		  componentAction("icon-ability-"+initialAbilityType+"-"+partnerId,"updateClass","generate-icon,");
		  $('#icon-ability-'+initialAbilityType+'-'+partnerId).css({"filter":""});
		}else{
		  $("#icon-ability-"+initialAbilityType+"-"+partnerId).attr("src", "assets/images/"+initialAbilityType+"-bw.svg");
		  componentAction("icon-ability-"+initialAbilityType+"-"+partnerId,"updateClass",",generate-icon");
		}
	  }
	}
  };
  
  var activateAbilityPartner = function(e){
	let arrayString = e.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let partnerData = partner.find(item => item.id === partnerId);
	let abilityData = partnerAbility.find(item => item.id === abilityId);
	let prevActiveAbilityId = -1;
	
	if(highestUnlockPartner){
	  let unlockAbility = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	  if(unlockAbility){
		let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);  
		if(!unlockAbility.isActive){
		  let activeAbility = highestUnlockPartner.ability.filter(item => item.isActive === true);
		  for(let i=0;i<activeAbility.length;i++){
			activeAbility[i].isActive = false;
			prevActiveAbilityId = activeAbility[i].abilityId;
		  }
		  unlockAbility.isActive = true;
		  if(unlockPartner)unlockPartner.abilityId = abilityId;
		  calculateAllPartnerAbility();
		  updateAbilityIcon(abilityId,partnerId,"color");
		  if(unlockAbility.abilityPoint > 0) componentAction("icon-point-"+partnerId,"removeClass","d-none");
		  else componentAction("icon-point-"+partnerId,"addClass","d-none");
		  if(prevActiveAbilityId > -1)updateAbilityIcon(prevActiveAbilityId,partnerId,"bw");
		}else{
		  updateAbilityIcon(abilityId,partnerId,"bw");
		  unlockAbility.isActive = false;
		  if(unlockPartner)unlockPartner.abilityId = -1;
		}
		unlockAbility.newAbility = false;
	  }
	}
	saveGame();
	checkCssSetting();
	showDetailPartnerAbillity(partnerId);
  };
  
  var chooseTrainingPartner = function(e){
	let slotId = parseInt(e.value,10);
	let trainingSlot = hero.trainingZone.trainingSlot.find(item => item.slotId === slotId);
	if(trainingSlot){
	  let partnerId = trainingSlot.partnerId;
	  let abilityId = trainingSlot.abilityId;
	  let value = partnerId+"="+abilityId+"="+slotId;
	  let partnerData = partner.find(item => item.id === partnerId);
	  let partnerAbilityData = partnerAbility.find(item => item.id === abilityId);
	
	  $("#modalConfirmStopTrainingAbility").modal('show');
	  componentAction ("stop-training-ability-ok-button", "inputText", value);
	  componentAction ("stop-training-ability-text", "replaceText", partnerAbilityData.name);
	  componentAction ("stop-training-partner-text", "replaceText", partnerData.name);
	}else{
	  let dropDownList = ["-1=-- Please Choose Elite --"];
	  let availableHighestUnlockPartner = hero.highestUnlockPartner.filter(item => item.status === "Battling" || item.status === "Resting");
	  if(hero.settingOrderPartner == "asc"){
	    for(let i=0;i<availableHighestUnlockPartner.length;i++){
		  let partnerId = availableHighestUnlockPartner[i].id;
		  let partnerData = partner.find(item => item.id === partnerId);
		  dropDownList.push(partnerId+"="+partnerData.name);
	    }
	  }else if(hero.settingOrderPartner == "desc"){
	    for(let i=(availableHighestUnlockPartner.length-1);i>=0;i--){
		  let partnerId = availableHighestUnlockPartner[i].id;
		  let partnerData = partner.find(item => item.id === partnerId);
		  dropDownList.push(partnerId+"="+partnerData.name);
	    }
	  }
	  componentAction("list-partner-div-"+slotId,"clearText","");
	  componentAction("list-ability-div-"+slotId,"clearText","");
	  componentAction("button-training-div-"+slotId,"clearText","");
	  componentAction("list-partner-div-"+slotId,"removeClass","d-none");
	  $("#list-partner-div-"+slotId).append(createDropDownList(dropDownList,"list-partner-"+slotId)).off('change',"#list-partner-"+slotId).on('change',"#list-partner-"+slotId,function(){
	    chooseTrainingAbility(this,slotId); 
	  });
	}
  };
  
  var chooseTrainingAbility = function(e,index){
	let partnerId = parseInt(e.value,10);
	let unlockPartnerAbility = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let dropDownList = ["-1=-- Please Choose Ability --"];
	for(let i=0;i<unlockPartnerAbility.ability.length;i++){
	  let abilityId = unlockPartnerAbility.ability[i].abilityId;
	  let partnerAbilityData = partnerAbility.find(item => item.id === abilityId);
	  dropDownList.push(partnerId+"-"+abilityId+"="+partnerAbilityData.name);
	}
	componentAction("list-ability-div-"+index,"removeClass","d-none");
	componentAction("list-ability-div-"+index,"clearText","");
	componentAction("button-training-div-"+index,"clearText","");
	$("#list-ability-div-"+index).append(createDropDownList(dropDownList,"list-ability-"+index)).off('change',"#list-ability-"+index).on('change',"#list-ability-"+index,function(){
	  showButtonTraining(this,index); 
	});
  };
  
  var showButtonTraining = function(e,index){
	let arrayValue = e.value;
	let backgroundClass = "";
	if(hero.settingBackground.toLowerCase() == "dark") backgroundClass = "dark-mode";
	componentAction("button-training-div-"+index,"removeClass","d-none");
	let buttonTrainingDiv = '<button id="start-training-button-' + index + '" class="upgrade-level-button '+backgroundClass+' mt-2" value="' + arrayValue + '">Start Training</button>';
	componentAction("button-training-div-"+index,"clearText","");
	$("#button-training-div-"+index).append(buttonTrainingDiv).off('click',"#start-training-button-"+index).on('click',"#start-training-button-"+index,function(){
	  confirmStartTrainingAbility(this,index); 
	});
  };
  
  var confirmStartTrainingAbility = function(e,index){
	let arrayValue = e.value.split("-");
	let partnerId = parseInt(arrayValue[0],10);
	let abilityId = parseInt(arrayValue[1],10);
	let value = partnerId+"="+abilityId+"="+index;
	let partnerData = partner.find(item => item.id === partnerId);
	let partnerAbilityData = partnerAbility.find(item => item.id === abilityId);
	
	$("#modalConfirmStartTrainingAbility").modal('show');
	componentAction ("training-ability-ok-button", "inputText", value);
	componentAction ("training-ability-text", "replaceText", partnerAbilityData.name);
	componentAction ("training-partner-text", "replaceText", partnerData.name);
  };
  
  var startTrainingAbility = function(e){
	let arrayString = e.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	let slotId = parseInt(arrayString[2],10);
	let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let unlockAbilityPartner = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	let restTrainingTime = calcRestTimeTraining(unlockAbilityPartner.maxLevel);
	let totalTrainingTime = unlockAbilityPartner.trainingTime;
	restTrainingTime = restTrainingTime - totalTrainingTime;
	if(highestUnlockPartner && unlockAbilityPartner){
	  let newTrainingSlot = {
	    slotId: slotId,
	    partnerId: partnerId,
	    abilityId: abilityId,
	    startTraining: Date.now(),
	    statusTraining: 'training',
	  };
	  hero.trainingZone.trainingSlot.push(newTrainingSlot);
	  componentAction("training-ability-timer-"+slotId,"replaceText",offlineTimeText(restTrainingTime));
	  if(unlockPartner){
	    unlockPartner.abilityId = -1;
	    unlockPartner.status = "Training";
	  }
	  highestUnlockPartner.status = "Training";
	  unlockAbilityPartner.trainingStatus = true;
	  updateDwellersStatus("trainer", slotId, "start");
	  saveGame();
	  componentAction("training-area-div","clearText","");
	  showTrainingArea();
	  $("#partner-area-div").empty();
	}
  };
  
  var stopTrainingAbility = function(e,completeTraining=false){
	let arrayString = e.split("=");
	let partnerId = parseInt(arrayString[0],10);
	let abilityId = parseInt(arrayString[1],10);
	let slotId = parseInt(arrayString[2],10);
	let trainingSlot = hero.trainingZone.trainingSlot.find(item => item.slotId === slotId);
	
	if(trainingSlot){
	  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	  let unlockAbilityPartner = highestUnlockPartner.ability.find(item => item.abilityId === abilityId);
	  let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	  let startTraining = trainingSlot.startTraining;
	  let trainingTime = (unlockAbilityPartner.trainingTime + Math.floor((Date.now() - startTraining)/1000*setting.gameSpeed));
	  if(completeTraining) unlockAbilityPartner.trainingTime = 0;
	  else unlockAbilityPartner.trainingTime = trainingTime;
	  unlockAbilityPartner.trainingStatus = false;
	  highestUnlockPartner.status = 'Resting';
	  if(unlockPartner) unlockPartner.status = 'Resting';
	  if(trainingSlot.interval) clearTimeout(trainingSlot.interval);
	  
	  let removeIndex = hero.trainingZone.trainingSlot.map(function(item) { return item.slotId; }).indexOf(slotId);
	  if(removeIndex!== -1) hero.trainingZone.trainingSlot.splice(removeIndex, 1);
	  updateDwellersStatus("trainer", slotId, "complete");
	  saveGame();
	  componentAction("training-area-div","clearText","");
	  showTrainingArea();
	}
  };
  
  var activateCompanion = function(e){
	let companionId = parseInt(e.value,10);
	let unlockCompanion = hero.unlockCompanion.find(item => item.id === companionId);
	
	if(unlockCompanion.active) unlockCompanion.active = false;
	else{
	  let activeCompanion = hero.unlockCompanion.find(item => item.active === true);
	  if(activeCompanion) activeCompanion.active = false;
	  unlockCompanion.active = true;
	}
	saveGame();
	calculateAllCompanionDamage();
	showCompanionArea();
  };
  
  var chooseDwellersRole = function(e){
	let dwellersAbility = e.value.toLowerCase();
	let unlockDwellersStatus = hero.unlockDwellers;
	if(dwellersAbility != "all") unlockDwellersStatus = unlockDwellersStatus.filter(item => item.currentAbility === dwellersAbility);
	let dwellersStatus = removeDuplicateArray(unlockDwellersStatus, e => e.status);
	let cleanDwellersStatus = [];
	cleanDwellersStatus.push("=");
	cleanDwellersStatus.push("all=All Status");
	for(let i=0;i<dwellersStatus.length;i++){
	  cleanDwellersStatus.push(dwellersStatus[i].status+"="+firstLetterFormat(dwellersStatus[i].status,"uppercase"));
	}
	$("#span-dwellers-status").empty();
	$("#span-dwellers-status").append(createDropDownList(cleanDwellersStatus,"dwellers-status")).off('change',"#dwellers-status").on('change',"#dwellers-status",function(){
	  filterListDwellers(e.value,this);
	});
  };
  
  var filterListDwellers = function(dwellersAbility, e){
	let dwellersStatus = e.value.toLowerCase();
	if(dwellersStatus != "") showHouseArea(dwellersAbility, dwellersStatus);
  };
  
  var chooseAdventureArea = function(e){
	let arrayString = e.value.split("=");
	let zoneId = parseInt(arrayString[0],10);
	let zoneSlot = parseInt(arrayString[1],10);
	let petId = parseInt(arrayString[2],10);
	
	if(zoneId >= 0 && zoneSlot >= 0){
	  let unlockPet = hero.unlockPet.find(item => item.id === petId);
	  if(unlockPet.statusAdventure == '' && unlockPet.collectReward == '') insertAdventurePet(e);
	  else if(unlockPet.statusAdventure == 'running' && unlockPet.collectReward == '') confirmCancelAdventurePet(e);
	  else confirmCollectReward(e.value);
	}else showAdventureArea(petId);
  };
  
  var insertAdventurePet = function(e){
	let arrayString = e.value.split("=");
	let zoneId = parseInt(arrayString[0],10);
	let zoneSlot = parseInt(arrayString[1],10);
	let petId = parseInt(arrayString[2],10);
	
	if(petId >= 0){
	  if(zoneId >= 0 && zoneSlot >= 0){
		let zoneData = zone.find(item => item.id === zoneId);
		let petData = pet.find(item => item.id === petId);
		let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
		let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === zoneSlot);
		if(!unlockZoneSlot){
		  $("#modalStartAdventureConfirm").modal('show');
		  componentAction ("confirm-adventure-ok-button", "inputText", e.value);
		  componentAction ("selected-pet-name", "replaceText", petData.name);
		  componentAction ("selected-adventure-area", "replaceText", zoneData.name);
		}else{
		  if(unlockZoneSlot.statusAdventure == 'running' && unlockZoneSlot.collectReward == '') confirmCancelAdventurePet(e);
		  else if(unlockZoneSlot.statusAdventure == 'complete' && unlockZoneSlot.collectReward == 'later') confirmCollectReward(e.value); 
		}
	  }
	}else{
	  showPetArea(zoneId,zoneSlot);
	}
  };
  
  var confirmCancelAdventurePet = function(e){
	let arrayString = e.value.split("=");
	let zoneId = parseInt(arrayString[0],10);
	let zoneSlot = parseInt(arrayString[1],10);
	let petId = parseInt(arrayString[2],10);
	
	let zoneData = zone.find(item => item.id === zoneId);
	let petData = pet.find(item => item.id === petId);
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === zoneSlot);
	if(unlockZoneSlot){
	  $("#modalCancelAdventureConfirm").modal('show');
	  componentAction ("cancel-adventure-ok-button", "inputText", e.value);
	  componentAction ("cancel-pet-name", "replaceText", petData.name);
	  componentAction ("cancel-adventure-area", "replaceText", zoneData.name);
	}
  };
  
  var startAdventurePet = function(arrayString){
	arrayString = arrayString.split("=");
	let zoneId = parseInt(arrayString[0],10);
	let slotId = parseInt(arrayString[1],10);
	let petId = parseInt(arrayString[2],10);
	let petData = pet.find(item => item.id === petId);
	let zoneData = zone.find(item => item.id === zoneId);
	let unlockPet = hero.unlockPet.find(item => item.id === petId);
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	
	if(unlockZone){
	  let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slot === slotId);
	  if(!unlockZoneSlot){
	    let startAdventureTime = Date.now();
		let adventureTime = (zoneData.adventureTime * 3600 * 1000 * (100 - hero.bonusAdventureTimePercentage) / 100) / setting.gameSpeed;
	    let endAdventureTime = startAdventureTime + adventureTime;
		
	    let newObjAdventureSlot = {
	      slotId: slotId,
	      petId: petId,
	      startAdventure: startAdventureTime,
		  endAdventure: endAdventureTime,
		  statusAdventure: 'running',
		  collectReward: ''
	    };
	    unlockZone.adventureSlot.push(newObjAdventureSlot);
	    
	    if(unlockPet){
		  unlockPet.adventureZone = zoneId;
		  unlockPet.adventureSlot = slotId;
		  if(!unlockPet.statusAdventure) unlockPet.statusAdventure = 'running';
		  if(!unlockPet.collectReward) unlockPet.collectReward = '';
	    }
	  }
	}
	if(!($("#pet-div").hasClass("d-none"))){
	  if(!$("#pet-area-div").hasClass("d-none")) showPetArea();
	  if(!$("#adventure-area-div").hasClass("d-none")) showAdventureArea();
	}
	startCooldownAdventureTimer(petId, zoneId, slotId);
  };
  
  var cancelAdventurePet = function(arrayString){
	arrayString = arrayString.split("=");
	let zoneId = parseInt(arrayString[0],10);
	let slotId = parseInt(arrayString[1],10);
	let petId = parseInt(arrayString[2],10);
	let petData = pet.find(item => item.id === petId);
	let zoneData = zone.find(item => item.id === zoneId);
	let unlockPet = hero.unlockPet.find(item => item.id === petId);
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === slotId);
	
	let endAdventureTime = unlockZoneSlot.endAdventure;
	let restAdventureTime = Math.ceil((endAdventureTime - Date.now()) / 2000);
	
	if(unlockPet){
	  unlockPet.statusAdventure = "cancel";
	  componentAction ("note-button-pet-adventure-"+petId, "clearText", "");
	}
	if(unlockZoneSlot){
	  unlockZoneSlot.statusAdventure = "cancel";
	  unlockZoneSlot.endAdventure = Date.now() + (restAdventureTime*1000);
	  if(!checkAdventureZoneStatus(unlockZoneSlot)){ componentAction ("note-button-adventure-slot-"+zoneId, "clearText", "");}
	}
	startCooldownAdventureTimer(petId, zoneId, slotId);
  };
  
  var calcCooldownAdventureTime = function(zoneId, slotId){
	let cooldownTimer = 0;
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	if(unlockZone){
	  let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === slotId);
	  if(unlockZoneSlot)cooldownTimer = Math.ceil((unlockZoneSlot.endAdventure - Date.now()) / 1000);
	}
	return cooldownTimer;
  };
  
  var checkCooldownAdventureTimer = function(afterOffline=false){
	if(!($("#modalOfflineForm").data('bs.modal') || {})._isShown && !($("#modalDailyCheckIn").data('bs.modal') || {})._isShown){
	  updateAdventureStatus();
	  if(hero.countZone > 0 && hero.countPet > 0){
	    for(let i=0;i<hero.unlockPet.length;i++){
		  let statusAdventure = hero.unlockPet[i].statusAdventure;
		  let collectReward = hero.unlockPet[i].collectReward;
		  if(statusAdventure == 'running' || statusAdventure == 'cancel' || (statusAdventure == 'complete' && collectReward == '')){
			let petId = hero.unlockPet[i].id;
		    let zoneId = hero.unlockPet[i].adventureZone;
		    let slotId = hero.unlockPet[i].adventureSlot;
			if(i == (hero.unlockPet.length - 1)) afterOffline = false;
			startCooldownAdventureTimer(petId, zoneId, slotId, afterOffline);
		  }		  
		}
	  }
	}
	saveGame();
  };
  
  var startCooldownAdventureTimer = function(petId, zoneId, slotId, afterOffline=false){
	let petData = pet.find(item => item.id === petId);
	let unlockPet = hero.unlockPet.find(item => item.id === petId);
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	let cooldownTimer = calcCooldownAdventureTime(zoneId, slotId);
	let adventureIntervalId;
	let adventureInterval;
	
	if(cooldownTimer > 0){
	  if(unlockPet && unlockPet.statusAdventure == "cancel"){
		updateAdventureButtonClass("button-pet-adventure-"+petId, "skill-disabled");
		$("#button-pet-adventure-"+petId).prop('disabled', true);
		updateAdventureButtonClass("button-adventure-slot-"+zoneId+"-"+slotId, "skill-disabled");
		$("#button-adventure-slot-"+zoneId+"-"+slotId).prop('disabled', true);
	  }else if(unlockPet && unlockPet.statusAdventure == "running"){
		$("#button-pet-adventure-"+petId).prop('disabled', false);
		componentAction ("note-button-pet-adventure-"+petId, "replaceText", constNoteCancelAdventure);
		updateAdventureButtonClass("button-pet-adventure-"+petId, "skill-running");
		$("#button-adventure-slot-"+zoneId+"-"+slotId).prop('disabled', false);
		componentAction ("note-button-adventure-slot-"+zoneId, "replaceText", constNoteCancelAdventure);
		updateAdventureButtonClass("button-adventure-slot-"+zoneId+"-"+slotId, "skill-running");
	  }
	  componentAction ("pet-adventure-name-"+petId, "replaceText", petData.name);
	  componentAction ("hyphen-"+petId, "replaceText", "-");
	  componentAction ("slot-adventure-name-"+petId, "replaceText", offlineTimeText(cooldownTimer));
	  componentAction ("adventure-pet-name-"+zoneId+"-"+slotId, "replaceText", petData.name);
	  componentAction ("adventure-slot-name-"+zoneId+"-"+slotId, "replaceText", offlineTimeText(cooldownTimer));
	  
	  adventureIntervalId = zoneId+'='+slotId+'='+petId;
	  let objAdventureInterval = adventureTimerInterval.find(item => item.id === adventureIntervalId);
	  if(!objAdventureInterval){
	    adventureInterval = setTimeout(function loopCooldownAdventureTimer() {
		  cooldownTimer = calcCooldownAdventureTime(zoneId, slotId);
		  if(unlockPet && unlockPet.statusAdventure == "cancel"){
			updateAdventureButtonClass("button-pet-adventure-"+petId, "skill-disabled");
			updateAdventureButtonClass("button-adventure-slot-"+zoneId+"-"+slotId, "skill-disabled");
		  }else if(unlockPet && unlockPet.statusAdventure == "running"){
			updateAdventureButtonClass("button-pet-adventure-"+petId, "skill-running");
			updateAdventureButtonClass("button-adventure-slot-"+zoneId+"-"+slotId, "skill-running");
		  }
	      componentAction ("slot-adventure-name-"+petId, "replaceText", offlineTimeText(cooldownTimer));
	      componentAction ("adventure-slot-name-"+zoneId+"-"+slotId, "replaceText", offlineTimeText(cooldownTimer));

	      if(cooldownTimer <= 0) stopCooldownAdventureTimer(petId, zoneId, slotId, afterOffline);
		  else{
			if(adventureInterval) adventureInterval = clearTimeout(adventureInterval);
			adventureInterval = setTimeout(loopCooldownAdventureTimer, (1000/setting.gameSpeed));
			adventureTimerInterval.interval = adventureInterval;
		  }
	    },(1000/setting.gameSpeed));
	    let newObjInterval = {
	      id: adventureIntervalId,
		  interval: adventureInterval
	    };
	    adventureTimerInterval.push(newObjInterval);
	  }else adventureInterval = objAdventureInterval.interval;
	}else stopCooldownAdventureTimer(petId, zoneId, slotId, afterOffline);
	saveGame();
  };
  
  var stopCooldownAdventureTimer = function(petId, zoneId, slotId, afterOffline=false){
	let petData = pet.find(item => item.id === petId);
	let unlockPet = hero.unlockPet.find(item => item.id === petId);
	let zoneData = zone.find(item => item.id === zoneId);
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === slotId);
	let removeIndex = -1;
	
	if(unlockZoneSlot){
	  if(unlockZoneSlot.statusAdventure == 'cancel'){
		removeIndex = unlockZone.adventureSlot.map(function(item) { return item.slotId; }).indexOf(slotId);
		if(removeIndex!== -1)unlockZone.adventureSlot.splice(removeIndex, 1);
		componentAction ("button-adventure-slot-"+zoneId+"-"+slotId, "inputText", (zoneId+'='+slotId+'=-1'));
		updateAdventureButtonClass("button-adventure-slot-"+zoneId+"-"+slotId, "");
	  }else if(unlockZoneSlot.statusAdventure == 'running') unlockZoneSlot.statusAdventure = 'complete';
	}
	if(unlockPet){
	  if(unlockPet.statusAdventure == 'cancel'){
		unlockPet.statusAdventure = '';
		unlockPet.collectReward = '';
		componentAction ("button-pet-adventure-"+petId, "inputText", "-1=-1="+petId);
		updateAdventureButtonClass("button-pet-adventure-"+petId, "");
	  }else if(unlockPet.statusAdventure == 'running') unlockPet.statusAdventure = 'complete';
	}
	let searchId = zoneId+'='+slotId+'='+petId;
	let searchAdventureInterval = adventureTimerInterval.find(item => item.id === searchId);
	if(searchAdventureInterval) searchAdventureInterval.interval = clearTimeout(searchAdventureInterval.interval);
	removeIndex = adventureTimerInterval.map(function(item) { return item.id; }).indexOf(searchId);
	if(removeIndex!== -1)adventureTimerInterval.splice(removeIndex, 1);
	let statusRunningAdventureZone = false;
	
	$("#button-pet-adventure-"+petId).prop('disabled', false);
	componentAction ("note-button-pet-adventure-"+petId, "replaceText", "", true);
	componentAction ("pet-adventure-name-"+petId, "replaceText", petData.name, true);
	componentAction ("hyphen-"+petId, "clearText", "", true);
	componentAction ("slot-adventure-name-"+petId, "clearText", "", true);

	$("#button-adventure-slot-"+zoneId+"-"+slotId).prop('disabled', false);
	
	if(!checkAdventureZoneStatus(unlockZone.adventureSlot)) componentAction ("note-button-adventure-slot-"+zoneId, "replaceText", "", true);
	componentAction ("adventure-pet-name-"+zoneId+"-"+slotId, "replaceText", "Pet",true);
	componentAction ("adventure-slot-name-"+zoneId+"-"+slotId, "replaceText", "Slot "+(slotId+1),true);
	checkAdventureStatus(afterOffline);
	saveGame();
  };
  
  var updateAdventureButtonClass = function(buttonId,buttonClass){
	if($(buttonId)){
	  componentAction (buttonId, "removeClass", "skill-active",true);
	  componentAction (buttonId, "removeClass", "skill-running",true);
	  componentAction (buttonId, "removeClass", "skill-disabled",true);
	  componentAction (buttonId, "removeClass", "collect-reward",true);
	  componentAction (buttonId, "addClass", buttonClass,true);
	}		
  };
  
  var checkAdventureZoneStatus = function(unlockZoneSlot){
	let statusRunningAdventureZone = false;
	for(let i=0;i<unlockZoneSlot.length;i++){
	  if(unlockZoneSlot[i].statusAdventure == 'running'){
		statusRunningAdventureZone = true;
	  }
	}
	return statusRunningAdventureZone;
  };
  
  var updateAdventureStatus = function(){
	for(let i=0;i<hero.unlockPet.length;i++){
	  hero.unlockPet[i].adventureSlot = -1;
	  hero.unlockPet[i].adventureZone = -1;
	  hero.unlockPet[i].collectReward = "";
	  hero.unlockPet[i].statusAdventure = "";
	}
	for(let i=0;i<hero.unlockZone.length;i++){
	  hero.unlockZone[i].adventureSlot = checkDuplicateAdventure(hero.unlockZone[i].adventureSlot);
	  let adventureSlot = hero.unlockZone[i].adventureSlot;
	  for(let a=0;a<hero.unlockZone[i].currSlot;a++){
		let activeAdventureSlot = adventureSlot.find(item => item.slotId === a);
		if(activeAdventureSlot){
		  let unlockPet = hero.unlockPet.find(item => item.id === activeAdventureSlot.petId);
		  if(!unlockPet) hero.unlockZone[i].adventureSlot.splice(a, 1);
		  let zoneData = zone.find(item => item.id === hero.unlockZone[i].id);
		  if(activeAdventureSlot.statusAdventure != "cancel"){
			let endAdventureTime = activeAdventureSlot.startAdventure + ((zoneData.adventureTime * 3600 * 1000 * (100 - hero.bonusAdventureTimePercentage) / 100) / setting.gameSpeed);
		    if(!(activeAdventureSlot.endAdventure == endAdventureTime))activeAdventureSlot.endAdventure = endAdventureTime;
		  }
		  if(activeAdventureSlot.endAdventure < Date.now()){
			activeAdventureSlot.statusAdventure = "complete";
			if(activeAdventureSlot.collectReward != "later") activeAdventureSlot.collectReward = "";
			if(unlockPet){
			  unlockPet.adventureSlot = activeAdventureSlot.slotId;
			  unlockPet.adventureZone = hero.unlockZone[i].id;
			  unlockPet.statusAdventure = activeAdventureSlot.statusAdventure;
			  unlockPet.collectReward = activeAdventureSlot.collectReward;
			}
		  }else{
		    if(activeAdventureSlot.statusAdventure != "running" && activeAdventureSlot.statusAdventure != "cancel"){
			  activeAdventureSlot.statusAdventure = "running";
			  activeAdventureSlot.collectReward = "";
		    }
			if(unlockPet){
			  unlockPet.adventureSlot = activeAdventureSlot.slotId;
			  unlockPet.adventureZone = hero.unlockZone[i].id;
			  unlockPet.statusAdventure = activeAdventureSlot.statusAdventure;
			  unlockPet.collectReward = activeAdventureSlot.collectReward;
			}
		  }	
		}
	  }
	}  
  };
  
  var checkAdventureStatus = function(afterOffline=false){
	let countCompleteAdventure = 0;
	let arrayAdventureValue = [];
    for(let i=0;i<hero.unlockPet.length;i++){
	  let statusAdventure = hero.unlockPet[i].statusAdventure;
	  let collectReward = hero.unlockPet[i].collectReward;
	  if (statusAdventure == 'complete' && collectReward == ''){
		let petId = hero.unlockPet[i].id;
		let zoneId = hero.unlockPet[i].adventureZone;
		let slotId = hero.unlockPet[i].adventureSlot;
		
		arrayAdventureValue.push(zoneId+"="+slotId+"="+petId);
		countCompleteAdventure++;
	  }
	}
	
	if(afterOffline){
	  if(!($("#modalOfflineForm").data('bs.modal') || {})._isShown ) afterOffline = false;
	}
	if(countCompleteAdventure > 0 && !afterOffline){
	  if(countCompleteAdventure == 1){
		let adventureValue = arrayAdventureValue[0];
		let arrayString = adventureValue.split("=");
		let zoneId = parseInt(arrayString[0],10);
		let slotId = parseInt(arrayString[1],10);
		let petId = parseInt(arrayString[2],10);
		let zoneData = zone.find(item => item.id === zoneId);
		let petData = pet.find(item => item.id === petId);
		if(!($("#modalListRewardAdventureConfirm").data('bs.modal') || {})._isShown ) $("#modalRewardAdventureConfirm").modal("show");
		
		componentAction ("confirm-reward-adventure-ok-button", "inputText", adventureValue,true);
		componentAction ("stop-adventure-pet-name", "replaceText", petData.name,true);
		componentAction ("stop-adventure-area-name", "replaceText", zoneData.name,true);
	  }else{
		let adventureString = "";
		for(let i=0;i<countCompleteAdventure;i++){
		  let adventureValue = arrayAdventureValue[i];
		  let arrayString = adventureValue.split("=");
		  let zoneId = parseInt(arrayString[0],10);
		  let petId = parseInt(arrayString[2],10);
		  let zoneData = zone.find(item => item.id === zoneId);
		  let petData = pet.find(item => item.id === petId);
		  adventureString += (i+1)+". Pet "+petData.name+" at "+zoneData.name+"\n";
		}
		
		if(($("#modalRewardAdventureConfirm").data('bs.modal') || {})._isShown ) $("#modalRewardAdventureConfirm").modal("hide");
		$("#modalListRewardAdventureConfirm").modal("show");
		componentAction ("listAdventureName", "replaceText", adventureString, true);
	  }
	}
  };
  
  var confirmCollectReward = function(e){
	let arrayString = e.split("=");
	let zoneId = parseInt(arrayString[0],10);
	let zoneSlot = parseInt(arrayString[1],10);
	let petId = parseInt(arrayString[2],10);
	
	let petData = pet.find(item => item.id === petId);
	let zoneData = zone.find(item => item.id === zoneId);
	$("#modalCollectRewardAdventureConfirm").modal("show");
	componentAction ("collect-reward-pet-name", "replaceText", petData.name);
	componentAction ("collect-reward-area-name", "replaceText", zoneData.name);
	componentAction ("collect-reward-adventure-ok-button", "inputText", e);
  };
  
  var confirmCollectRewardAdventurePet = function(arrayString,isCollectLater=false){
	if(arrayString == 'complete'){
	  let petId = -1;
	  let zoneId = -1;
	  let slotId = -1;
	  for(let i=0;i<hero.unlockPet.length;i++){
		petId = -1;
	    zoneId = -1;
	    slotId = -1;
	    let statusAdventure = hero.unlockPet[i].statusAdventure;
	    let collectReward = hero.unlockPet[i].collectReward;
		
	    if (statusAdventure == 'complete' && collectReward == ''){
		  petId = hero.unlockPet[i].id;
		  zoneId = hero.unlockPet[i].adventureZone;
		  slotId = hero.unlockPet[i].adventureSlot;
	    }
		if(zoneId >= 0 && slotId >= 0 && petId >= 0) collectRewardAdventurePet(zoneId,slotId,petId,isCollectLater);
	  }	  
	}else{
	  arrayString = arrayString.split("=");
	  let zoneId = parseInt(arrayString[0],10);
	  let slotId = parseInt(arrayString[1],10);
	  let petId = parseInt(arrayString[2],10);
	  collectRewardAdventurePet(zoneId,slotId,petId,isCollectLater);
	}
	if(!($("#pet-div").hasClass("d-none"))){
	  if(!$("#pet-area-div").hasClass("d-none")) showPetArea();
	  if(!$("#adventure-area-div").hasClass("d-none")) showAdventureArea();
	}
  };
  
  var collectRewardAdventurePet = function(zoneId,slotId,petId,isCollectLater=false){
	let addSlotStatus = false;
	let petData = pet.find(item => item.id === petId);
	let zoneData = zone.find(item => item.id === zoneId);
	let unlockZone = hero.unlockZone.find(item => item.id === zoneId);
	let unlockZoneSlot = unlockZone.adventureSlot.find(item => item.slotId === slotId);
	let unlockPet = hero.unlockPet.find(item => item.id === petId);
	
	if(isCollectLater){
	  if(unlockPet) unlockPet.collectReward = "later";
	  if(unlockZoneSlot) unlockZoneSlot.collectReward = "later";
	  
	  componentAction ("button-pet-adventure-"+petId, "updateClass", "skill-active,collect-reward");
	  componentAction ("pet-adventure-name-"+petId, "replaceText", "Complete");
	  componentAction ("hyphen-"+petId, "replaceText", "-");
	  componentAction ("slot-adventure-name-"+petId, "replaceText", "Collect Reward");

	  componentAction ("button-adventure-slot-"+zoneId+"-"+slotId, "updateClass", "skill-active,collect-reward");
  	  componentAction ("adventure-pet-name-"+zoneId+"-"+slotId, "replaceText", "Complete");
	  componentAction ("adventure-slot-name-"+zoneId+"-"+slotId, "replaceText", "Collect Reward");
	}else{
	  componentAction ("button-pet-adventure-"+petId, "updateClass", "skill-running,skill-active");
	  componentAction ("button-pet-adventure-"+petId, "updateClass", "collect-reward,skill-active");
	  componentAction ("pet-adventure-name-"+petId, "replaceText", petData.name);
	  componentAction ("hyphen-"+petId, "clearText", "");
	  componentAction ("slot-adventure-name-"+petId, "clearText", "");

	  componentAction ("button-adventure-slot-"+zoneId+"-"+slotId, "updateClass", "skill-running,skill-active");
	  componentAction ("button-adventure-slot-"+zoneId+"-"+slotId, "updateClass", "collect-reward,skill-active");
	  componentAction ("adventure-pet-name-"+zoneId+"-"+slotId, "replaceText", "Pet");
	  componentAction ("adventure-slot-name-"+zoneId+"-"+slotId, "replaceText", "Slot "+(slotId+1));
	  
	  if(unlockPet){
		unlockPet.adventureZone = -1;
		unlockPet.adventureSlot = -1;
		unlockPet.statusAdventure = '';
		unlockPet.collectReward = '';
	  }
		
	  let removeIndex = unlockZone.adventureSlot.map(function(item) { return item.slotId; }).indexOf(slotId);
	  if (removeIndex !== -1)unlockZone.adventureSlot.splice(removeIndex, 1);
	  let percentAdventureExp = new Decimal(100).plus(hero.bonusAdventureExpPercentage);
	  let percentAdventureCoin = new Decimal(100).plus(hero.bonusAdventureCoinPercentage).plus(hero.bonusAllCoinPercentage);
	  let adventureExp = new Decimal(unlockZone.bonusExp).mul(percentAdventureExp).div(100);
	  let adventureCoin = new Decimal(unlockZone.bonusCoin).mul(percentAdventureCoin).div(100);
	  let petReqLevelUp = unlockPet.level * petData.upgradeReqExp;
	  let randomPercentage = Math.random()*100;
	  if(randomPercentage <= hero.bonusDoubleAdventurePercentage) unlockZone.adventureCount+=2;
	  else unlockZone.adventureCount++;
		
	  hero.coin = new Decimal(hero.coin).plus(adventureCoin);
	  hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(adventureCoin);
	  addedCoin = true;
	  
	  unlockPet.currExp = new Decimal(unlockPet.currExp).plus(adventureExp);
	  updateTask(12);
	  switch(zoneId){
		case 0:
		  updateTask(13);
		  break;
		case 1:
		  updateTask(14);
		  break;
		case 2:
		  updateTask(15);
		  break;
		case 3:
		  updateTask(16);
		  break;
		case 4:
		  updateTask(17);
		  break;
		}
	  updateTask(18,unlockZone.bonusExp*1);
	  updateTask(19,unlockZone.bonusCoin*1);
	  let adventureReqLevelUp = unlockZone.level * zoneData.baseUpgradeReq;
	  if(unlockZone.adventureCount >= adventureReqLevelUp){
		unlockZone.level++;
		  
		if(unlockZone.level % setting.bonusZoneSlot == 0 || unlockZone.level / 5 == 1){
		  unlockZone.currSlot += 1;
		  addSlotStatus = true;
		}
		unlockZone.adventureCount -= adventureReqLevelUp;
		unlockZone.bonusCoin = new Decimal(unlockZone.level - 1).mul(zoneData.baseCoin / 2).plus(zoneData.baseCoin).floor();
		unlockZone.bonusExp = new Decimal(unlockZone.level - 1).mul(zoneData.baseExp / 2).plus(zoneData.baseExp).floor();
		  
		let nextZoneId = zoneId+1;
		let nextZoneData = zone.find(item => item.id === nextZoneId);
		
		if(nextZoneData){
		  if(unlockZone.level == nextZoneData.unlockReqLevel){
		    let nextUnlockZone = hero.unlockZone.find(item => item.id === nextZoneId);
		    if(!nextUnlockZone) insertNewUnlockZone(nextZoneId,nextZoneData);
		  }
		}
	  }
	  while(unlockPet.currExp >= petReqLevelUp){
	    unlockPet.level++;
		unlockPet.currExp = new Decimal(unlockPet.currExp).sub(petReqLevelUp);
		unlockPet.currBonus = petData.multiplierBonus * unlockPet.level;
		petReqLevelUp = unlockPet.level * petData.upgradeReqExp;
		
		if(petId > 2){
		  let partnerId = petId - 3;
		  let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
		  if(unlockPartner){
		    let bonusDps = new Decimal(calcNextPartnerDps(partnerId,unlockPet.currBonus));
		    unlockPartner.bonusDps = bonusDps;
			calcTotalDps();
		  }
		}
	  };
		
	  if(!($("#pet-div").hasClass("d-none"))){
		if(addSlotStatus) componentAction("adventure-area-div","clearText","");
	  }
	}	
	saveGame();
  };
  
  var checkUncompleteAchievement = function(){
	let uncompleteAchievement = hero.achievement.filter(item => new Decimal(item.balance).greaterThan(new Decimal(item.target)));
	if(uncompleteAchievement.length == 0){
	  removeNotifIcon("achievement");
	  removeNotifIcon("info-div");
	};
  };
  
  var collectAllAchievementReward = function(){
	for(let i=0;i<hero.achievement.length;i++){
	  let achievementData = achievement.find(item => item.id === i);
	  let unlockAchievement = hero.achievement.find(item => item.id === i);  
	  let achievementBalance = new Decimal(unlockAchievement.balance);
	  let achievementTarget = new Decimal(unlockAchievement.target);
		
	  while(achievementBalance.greaterThanOrEqualTo(achievementTarget) && unlockAchievement.level < achievementData.maxLoop){
		collectAchievementReward(unlockAchievement.id);
		unlockAchievement = hero.achievement.find(item => item.id === i);  
	    achievementBalance = new Decimal(unlockAchievement.balance);
	    achievementTarget = new Decimal(unlockAchievement.target);
	  }
	}	  
  };
  
  var collectAchievementReward = function(achievementId){
	achievementId = parseInt(achievementId,10);
	let achievementData = achievement.find(item => item.id === achievementId);
	let unlockAchievement = hero.achievement.find(item => item.id === achievementId);
	let achievementReward = (unlockAchievement.level%2==0 ? (unlockAchievement.level+1): unlockAchievement.level);
	let achievementBalance = new Decimal(unlockAchievement.balance);
	let achievementTarget = new Decimal(unlockAchievement.target);
	  
	if(achievementBalance.greaterThanOrEqualTo(achievementTarget) && unlockAchievement.level < achievementData.maxLoop){
	  unlockAchievement.level++;
	  unlockAchievement.prevTarget = unlockAchievement.target;
	  if(achievementData.targetMultiplier > 1) unlockAchievement.target = new Decimal(unlockAchievement.target).mul(achievementData.targetMultiplier);
	  else unlockAchievement.target = new Decimal(unlockAchievement.target).plus(achievementData.targetMultiplier);
	  if(achievementBalance.lessThan(new Decimal(unlockAchievement.target))){
		removeNotifIcon("achievement-button-"+achievementId);
		checkUncompleteAchievement();
	  };
	  hero.token = new Decimal(hero.token).plus(achievementReward);
	  saveGame();
	  showAchievementArea();
	  $("#achievement-image-"+achievementId).css({"filter":""});
	  checkCssSetting();
	}
  };
  
  var recalculateAllUnlockLabor = function(){
	let prevLaborFee = new Decimal(0);
	let prevLaborPrize = new Decimal(0);
	let prevMultiPriceToFee = new Decimal(0);
	
	let unlockLabor = hero.unlockLabor.filter(item => item.level > 0);
	for(let i=0;i<unlockLabor.length;i++){
	  let baseLaborFee = new Decimal(0);
	  let baseLaborPrize = new Decimal(0);
	  let multiPriceToFee = new Decimal(0);
	  
	  if(i == 0){
		baseLaborFee = new Decimal(setting.baseLaborFee);
	    baseLaborPrize = new Decimal(setting.baseLaborPrize);
		multiPriceToFee = new Decimal(baseLaborFee).div(baseLaborPrize);
	  }else{
		baseLaborFee = prevLaborFee.mul(setting.laborCostMultiplier * i);
		multiPriceToFee = new Decimal(1).plus(setting.laborCostPrizeMultiplier).mul(prevMultiPriceToFee);
		baseLaborPrize = baseLaborFee.div(multiPriceToFee).floor();
	  }
	  prevLaborFee = baseLaborFee;
	  prevLaborPrize = baseLaborPrize;
	  prevMultiPriceToFee = multiPriceToFee;
	  
	  if(unlockLabor[i].baseCost) delete(unlockLabor[i].baseCost);
	  unlockLabor[i].baseFee = baseLaborFee;
	  unlockLabor[i].basePrize = baseLaborPrize;
	  
	  if(unlockLabor[i].grade && unlockLabor[i].grade > 1){
		for(let a=1;a<unlockLabor[i].grade;a++){
	      let enhanceData = calcEnhanceLaborFee(i);
	      baseLaborFee = new Decimal(enhanceData["enhanceFee"]);
	      baseLaborPrize = new Decimal(enhanceData["enhancePrize"]);
		  unlockLabor[i].baseFee = baseLaborFee;
		  unlockLabor[i].basePrize = baseLaborPrize;
		  if(unlockLabor[i].level == 1) unlockLabor[i].currentPrize = unlockLabor[i].basePrize;
		  else{
			let currentPrize = new Decimal(0);
			for(let b=1;b<=unlockLabor[i].level;b++){
			  currentPrize = new Decimal(b).mul(unlockLabor[i].basePrize).plus(currentPrize);
			}
			unlockLabor[i].currentPrize = currentPrize;
		  }
		}
	  }else unlockLabor[i].currentPrize = unlockLabor[i].basePrize;  
	}		
  };
  
  var insertNewUnlockLabor = function(){
	let unlockLaborCount = hero.countLabor;
	let prevLaborFee = new Decimal(0);
	let prevLaborPrize = new Decimal(0);
	let prevMultiPriceToFee = new Decimal(0);
	let maxLabor = 0;
	
	if(unlockLaborCount == 0){
	  prevLaborFee = new Decimal(setting.baseLaborFee);
	  prevLaborPrize = new Decimal(setting.baseLaborPrize);
	  maxLabor = 2;
	}else{
	  let lastUnlockLabor = hero.unlockLabor.find(item => item.id === (unlockLaborCount-1));
	  if(lastUnlockLabor.level > 0){
	    prevLaborFee = new Decimal(lastUnlockLabor.baseFee);
	    prevLaborPrize = new Decimal(lastUnlockLabor.basePrize);
		maxLabor = 1;
	  }
	}
	prevMultiPriceToFee = new Decimal(prevLaborFee).div(prevLaborPrize);

	for(let i=0;i<maxLabor;i++){
	  let index = i+unlockLaborCount;
	  if(hero.countLabor < 26){
		let baseLaborFeeLevel = new Decimal(0);
		let baseLaborPrizeLevel = new Decimal(0);
		let multiPriceToFee = new Decimal(0);
		  
		if(index == 0){
		  baseLaborFeeLevel = prevLaborFee;
		  baseLaborPrizeLevel = prevLaborPrize;
		  multiPriceToFee = prevMultiPriceToFee;
		}else{
		  baseLaborFeeLevel = prevLaborFee.mul(setting.laborCostMultiplier * index);
		  multiPriceToFee = new Decimal(1).plus(setting.laborCostPrizeMultiplier).mul(prevMultiPriceToFee);
		  baseLaborPrizeLevel = baseLaborFeeLevel.div(multiPriceToFee).floor();
		}
		prevLaborFee = baseLaborFeeLevel;
		prevLaborPrize = baseLaborPrizeLevel;
		prevMultiPriceToFee = multiPriceToFee;
		  
		let newObjLabor = {
		  id: index,
		  grade: 1,
		  level: 0,
		  baseFee: baseLaborFeeLevel,
		  basePrize: baseLaborPrizeLevel,
		  currentPrize: 0,
		};
		hero.unlockLabor.push(newObjLabor);
		hero.countLabor += 1;
	  }
	}
  };
  
  var insertNewUnlockZone = function(zoneId,zoneData){
	hero.countZone++;
	let newObjZone = {
	  id: zoneId,
	  level: 1,
	  bonusExp: zoneData.baseExp,
	  bonusCoin: zoneData.baseCoin,
	  currSlot: zoneData.baseSlot,
	  adventureCount: 0,
	  adventureSlot: []
	};
	hero.unlockZone.push(newObjZone);
  };
  
  var insertNewUnlockCompanion = function(showResult=false){
	let newCompanionId = availableCompanion[Math.floor(Math.random() * availableCompanion.length)];
	let unlockCompanion = hero.unlockCompanion.find(item => item.id === newCompanionId);
	let companionData = companion.find(item => item.id === newCompanionId);
	if(unlockCompanion){
	  while(unlockCompanion.level >= companionData.maxLevel && companionData.maxLevel > 0){
		newCompanionId = availableCompanion[Math.floor(Math.random() * availableCompanion.length)];
	  }
	  if(unlockCompanion.level < companionData.maxLevel || companionData.maxLevel == 0){
	    unlockCompanion.level++;
	    unlockCompanion.damage = unlockCompanion.level * companionData.damage;
	    unlockCompanion.buff = unlockCompanion.level * companionData.buff;
	  }
	}else{
	  hero.countCompanion++;
	  let newObjCompanion = {
	    id: newCompanionId,
	    level: 1,
	    damage: companionData.damage,
	    buff: companionData.buff,
		active: false,
	  };
 	  hero.unlockCompanion.push(newObjCompanion);
	}
	if(hero.filledCompanionSlot == hero.generatedCompanionSlot) hero.startGenerateCompanion = Date.now();
	if(showResult){
	  updateDwellersStatus("warlords", hero.filledCompanionSlot, "complete");
	  if(hero.filledCompanionSlot <= 0) hero.filledCompanionSlot = 0;
	  else hero.filledCompanionSlot -= 1;
	}
	updateDwellersStatus("warlords", hero.filledCompanionSlot, "start");
	if(showResult){
	  let notifText = "Congratz, you got companion "+companionData.name;
	  componentAction("notification-text","replaceText",notifText);
	  $("#modalNotification").modal("show");
	}
	if(!$("#companion-div").hasClass("d-none")) showCompanionArea();
  };
  
  var updateStorage = function(actionType,unlockItem=null){
	let equipmentData = equipment.find(item => item.id === unlockItem.id);
	if(equipmentData){
	  let partnerType = equipmentData.partnerType.toLowerCase();
	
	  switch(actionType.toLowerCase()){
	    case "delete":
	      switch(unlockItem.storageType.toLowerCase()){
		    case "backpack":
		      hero.countBackpack -= 1;
			  break;
		    case "warehouse":
		      hero.countWarehouse -= 1;
			  break;
			default:
			  let partnerData = partner.find(item => item.name === unlockItem.storageType);
			  if(partnerData){
				let partnerId = partnerData.id;
				
				let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
				let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
				unlockPartner[equipmentData.itemType.toLowerCase()+"Id"] = -1;
				highestUnlockPartner[equipmentData.itemType.toLowerCase()+"Id"] = -1;
			  }
			  break;
		  };
		  hero.countItem -= 1;
		  break;
	    case "insert":
	      switch(unlockItem.storageType.toLowerCase()){
		    case "backpack":
		      hero.countBackpack += 1;
			  showNotifIcon("backpack-tab-button");
			  break;
		    case "warehouse":
		      hero.countWarehouse += 1;
			  showNotifIcon("warehouse-tab-button");
			  break;
		  };
		  showNotifIcon("warehouse");
		  showNotifIcon("town-div");
		break;	
	  };
	}
  };
  
  var insertNewEquipmentStatus = function(dropEquipment,unlockGradeEquipment,storageType){
	let settingAutoSell = hero.settingAutoSellEquipment.find(item => item.id === unlockGradeEquipment.id);

	let variant = new Decimal(0);
	let minValue = new Decimal(0);
	let maxValue = new Decimal(0);
	let highMinValue = new Decimal(0);
	let lowMinValue = new Decimal(0);
	let highMaxValue = new Decimal(0);
	let lowMaxValue = new Decimal(0);
	let exponent = new Decimal(0);
	let multiplier = new Decimal(10).pow(unlockGradeEquipment.weaponExponent);

	if(dropEquipment.itemType.toLowerCase() == "all"){
	  exponent = new Decimal(10).pow(Math.floor(Decimal.log10(unlockGradeEquipment.allWeaponBaseMin))-1);
	  minValue = new Decimal(unlockGradeEquipment.allWeaponBaseMin).div(exponent);
	  maxValue = new Decimal(unlockGradeEquipment.allWeaponBaseMax).div(exponent);
	}else{
	  exponent = new Decimal(10).pow(Math.floor(Decimal.log10(unlockGradeEquipment.specifiedWeaponBaseMin))-1);	
	  minValue = new Decimal(unlockGradeEquipment.specifiedWeaponBaseMin).div(exponent);
	  maxValue = new Decimal(unlockGradeEquipment.specifiedWeaponBaseMax).div(exponent);
	}
	variant = new Decimal(maxValue).sub(minValue).mul(0.4);
	lowMinValue = minValue;
	highMinValue = variant.plus(lowMinValue).floor();
	highMaxValue = maxValue;
	lowMaxValue = highMaxValue.sub(variant).ceil();
	let minValueArray = roundedBigValue(new Decimal(randomBetweenNumber(lowMinValue,highMinValue)).mul(exponent).mul(multiplier),"ceil").split("=");
	let maxValueArray = roundedBigValue(new Decimal(randomBetweenNumber(lowMaxValue,highMaxValue)).mul(exponent).mul(multiplier),"ceil").split("=");
	let compareArray = compareMinMaxValue(minValueArray,maxValueArray).split("=");
	
	let newEquipmentObject = {
	  id: hero.countItem,
	  itemId: dropEquipment.id,
	  gradeId: unlockGradeEquipment.id,
	  itemType: dropEquipment.itemType.toLowerCase(),
	  minValue: compareArray[0],
	  maxValue: compareArray[1],
	  qty: 1,
	  exponentValue: compareArray[2],
	  name: dropEquipment.name,
	  partnerType: dropEquipment.partnerType,
	  upgradeLevel: 0,
	  enhanceLevel: 0,
	  status: "normal", /*normal, broken*/
	  slotCount: 0,
	  storageType: storageType,
	  newItem: true,
	};

	let newItemObject = {
	  itemId:hero.countItem,
	  qty: 1,
	};
	
	if(settingAutoSell.autoSell){
	  let totalSphere = calculateItemSphere(newEquipmentObject);
	  let sellSphere = calculateSellSphere(totalSphere);
	  hero.sphere = (hero.sphere*1) + (sellSphere*1);
	}else{
	  hero.unlockItem.push(newEquipmentObject);
	  showNotifIcon(storageType+"-item-area-"+hero.countItem);
	  hero.countItem += 1;
	
	  updateStorage("insert",newEquipmentObject);
	}
	
	return newEquipmentObject;
  };
  
  var insertNewUnlockEquipment = function(showResult=false,dropEquipmentGradeId=-1,selectedDropRate=null,fromCheckIn=false,qtyFromCheckIn=0){
	let dropEquipment;
	let canGetEquipment = false;
	let dropEquipmentGrade = -1;
	let storageType = "backpack";
	let arrayDropEquipmentGrade;

	if(dropEquipmentGradeId < 0){
	  if(hero.countBackpack < hero.maxBackpack || fromCheckIn == true){
		canGetEquipment = true;
	    let unlockGradeEquipment = gradeEquipment.filter(item => item.reqFloor <= hero.highestFloor);
		if(unlockGradeEquipment.length == 0) unlockGradeEquipment.push(gradeEquipment[0]);
	    if(unlockGradeEquipment.length > 0){
		  let dropRateEquipment;
		  if(selectedDropRate != null) dropRateEquipment = selectedDropRate;
		  else dropRateEquipment = equipmentDropRate[unlockGradeEquipment.length-1];
		  
		  let dropPercentage = Math.random()*100;
		  arrayDropEquipmentGrade = filterArray(dropRateEquipment,dropPercentage,1);
		  if(fromCheckIn && qtyFromCheckIn > 1){
			for(let i=1;i<qtyFromCheckIn;i++){
			  dropPercentage = Math.random()*100;
			  arrayDropEquipmentGrade[i] = filterArray(dropRateEquipment,dropPercentage,1)[0];
			}
		  }
		  if(arrayDropEquipmentGrade.length > 0)dropEquipmentGrade = arrayDropEquipmentGrade[0];
		}
		if(hero.filledEquipmentSlot == hero.generatedEquipmentSlot && fromCheckIn == false) hero.startGenerateEquipment = Date.now();
	  }
	}else{
	  let gradeEquipmentData = gradeEquipment.find(item => item.id === dropEquipmentGradeId);
	  dropEquipmentGrade = gradeEquipmentData.name;
	  let arrayStorage = hero.unlockItem.filter(item => item.storageType === storageType);
	  let countStorage = arrayStorage.length;
	  
	  switch(storageType.toLowerCase()){
		case "backpack":
		  if(countStorage < hero.maxBackpack) canGetEquipment = true;
		  break;
		case "warehouse":
		  if(countStorage < hero.maxWarehouse) canGetEquipment = true;
		  break;  
	  };
	}
	
	calcDefaultModalWidth();
	$('.modal-dialog').css({"max-width":(defaultModalWidth)});
	$('.modal-dialog').css({"width":(defaultModalWidth)});
	
	if(canGetEquipment){
	  let listEquipment = equipment.filter(item => item.grade === dropEquipmentGrade);
	  let unlockGradeEquipment = gradeEquipment.find(item => item.name === dropEquipmentGrade);
	  let newEquipment = [];
	  if(fromCheckIn){
	    for(let i=0;i<qtyFromCheckIn;i++){
		  if(i>0){
			listEquipment = equipment.filter(item => item.grade === arrayDropEquipmentGrade[i]);
			unlockGradeEquipment = gradeEquipment.find(item => item.name === arrayDropEquipmentGrade[i]);
		  }
		  dropEquipment = listEquipment[Math.floor(Math.random() * listEquipment.length)];
		  newEquipment.push(insertNewEquipmentStatus(dropEquipment,unlockGradeEquipment,storageType));
		}
	  }else{
		dropEquipment = listEquipment[Math.floor(Math.random() * listEquipment.length)];  
		newEquipment.push(insertNewEquipmentStatus(dropEquipment,unlockGradeEquipment,storageType));
	  }
	  if(dropEquipmentGradeId < 0 && fromCheckIn == false){
	    if(showResult){
	      updateDwellersStatus("collector", hero.filledEquipmentSlot, "complete");
		  if(hero.filledEquipmentSlot <= 0) hero.filledEquipmentSlot = 0;
		  else hero.filledEquipmentSlot -= 1;
 	    }
	    updateDwellersStatus("collector", hero.filledEquipmentSlot, "start");
	  }

	  if(showResult){
		$("#notification-text").empty();
		let equipmentName = "";
		let equipmentDiv = "";
		let sellSphere = 0;
		for(let i=0;i<newEquipment.length;i++){
		  equipmentDiv += showEquipmentList(newEquipment[i],storageType);
		  if(i==0) equipmentName += newEquipment[i].name;
		  else equipmentName += ", "+newEquipment[i].name;

		  let settingAutoSell = hero.settingAutoSellEquipment.find(item => item.id === newEquipment[i].gradeId);
		  if(settingAutoSell.autoSell){
		    let totalSphere = calculateItemSphere(newEquipment[i]);
			sellSphere = (calculateSellSphere(totalSphere)*1);
			equipmentDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-2 middle-align">This equipment is automatically sold and you get '+numberFormat(sellSphere)+' sphere</div>';
		  }
		}
		
		let appendNotifDiv = '<div id="modal-header2" class="row col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 left-align">';
	    appendNotifDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 mb-2 middle-align">Congratz, you got equipment '+equipmentName+' in your '+storageType+'</div>';
		appendNotifDiv += equipmentDiv;
	    appendNotifDiv += '</div>';
		$("#notification-text").append(appendNotifDiv);
	    $("#modalNotification").modal("show");
		calcHeightScrollDiv("modal");
	  }
	  if(!$("#warehouse-div").hasClass("d-none") && !$("#"+storageType.toLowerCase()+"-area-div").hasClass("d-none")) showWarehouseArea(storageType);
	}else{
	  let notifText = "Your backpack has no room for new equipment";
	  componentAction("notification-text","replaceText",notifText);
	  $("#modalNotification").modal("show");
	}
  };
  
  var confirmTradeGodsFragment = function(selectedFragmentCount){
	let fragmentCount = 0;
	let soulCount = 0;
	switch(selectedFragmentCount){
	  case 'All':
	    fragmentCount = Math.floor(hero.soul / setting.soulEachFragment);
	    break;
	  default:
		fragmentCount = parseInt(selectedFragmentCount,10);
		break;
	}
	
	soulCount = fragmentCount * setting.soulEachFragment;
	if(hero.soul >= soulCount){
	  $("#modalConfirmTradeSoul").modal("show");
	  componentAction ("trade-soul-ok-button", "inputText", fragmentCount);
	  componentAction ("soul-trade-text", "replaceText", soulCount);
	  componentAction ("gods-fragment-text", "replaceText", fragmentCount);
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You don't have enough soul to exchange");
	}
  };
  
  var tradeGodsFragment = function(e){
	let fragmentCount = parseInt((e*1),10);
	let soulCount = fragmentCount * setting.soulEachFragment;
	let listFragment = [];
	let notifString = 'You receive ';
	
	if(hero.soul >= soulCount){
	  updateTask(23,soulCount);
	  for(let i=0;i<fragmentCount;i++){
		let godsId = availableGods[Math.floor(Math.random() * availableGods.length)];
	    let godsData = gods.find(item => item.id === godsId);		
	    let unlockFragment = hero.unlockFragment.find(item => item.id === godsId);
	    if(unlockFragment) unlockFragment.count++;
	    else{
		  let newObjFragment = {
	        id: godsId,
	        count: 1,
	      };
	      hero.unlockFragment.push(newObjFragment);
	    }
		
		let searchFragment = listFragment.find(item => item.id === godsId);
		if(searchFragment) searchFragment.count++;
		else{
		  let newObjListFragment = {
		    id: godsId,
		    name: godsData.name,
	        count: 1,
		  };
		  listFragment.push(newObjListFragment);
		}
		hero.soul -= setting.soulEachFragment;
	  }
	  if(listFragment.length > 1) notifString += numberFormat(fragmentCount)+" Fragments\n";
	  else notifString += numberFormat(fragmentCount)+" Fragment\n";
	  
	  for(let i=0;i<listFragment.length;i++){
		if(listFragment[i].count > 1) notifString += numberFormat(listFragment[i].count)+" Fragments of ";
		else notifString += numberFormat(listFragment[i].count)+" Fragment of ";
		notifString += listFragment[i].name+"\n";
	  }
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", notifString);
	  saveGame();
	  showTempleArea();
	}
  };
  
  var writeDungeonBattleLog = function(logText,recentCoin){
	dungeonBattleLog = ""; 
	if(new Decimal(recentCoin).greaterThan(0)){
	  if(intervalRecentCoin > 0) intervalRecentCoin = clearInterval(intervalRecentCoin);
	  if( !$("#dungeon-div").hasClass("d-none")) $("#recent-coin").text("+"+numberFormat(recentCoin));
	  intervalRecentCoin = setInterval (function (){
		intervalRecentCoin = clearInterval(intervalRecentCoin);
		componentAction("recent-coin","clearText","");
	  },400);
	  
	}
	if(!$("#dungeon-battle-log-area-div").hasClass("d-none")){
	  if(countDungeonBattleLog >= 10) countDungeonBattleLog = 0;
	  $("#battle-log-"+countDungeonBattleLog).remove();
	  let appendBattleLogDiv = '<div id="battle-log-'+countDungeonBattleLog+'" class="v-center-flex col-12">'+logText+'</div>';
	  $("#dungeon-battle-log-area-div").prepend(appendBattleLogDiv);
	  countDungeonBattleLog += 1;
	}
  };
  
  var drawGodsImage = function(gender){
	if(gender == "M") return '<img src="assets/images/gods-color.svg" class="image-size"></img>';
	else return '<img src="assets/images/goddess-color.svg" class="image-size"></img>';  
  };
  
  var calcBaseDpc = function(){
	return new Decimal(hero.dpc).plus(hero.weaponDpc);  
  };
  
  var calcCompanionDpc = function(){
	if(hero.highestFloor >= unlockNewFeatureFloor("companion")){
	  let companionDpc = new Decimal(hero.companionDpcPercentage).mul(calcBaseDpc()).div(100);
	  if(companionDpc.greaterThan(1)) return companionDpc;
	  else return new Decimal(1);
	}else return new Decimal(0);
  };
  
  var calcTotalDpc = function (isManualClick=false) {
	let skillId = 1;
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId); 
	let baseDpc = calcBaseDpc().mul(formulaCompanionPercentage(hero.companionDpcPercentage));
	let subTotalPercentage = new Decimal(100).plus(hero.bonusDpcPercentage).plus(hero.bonusAllDamagePercentage).plus(hero.artifactDamagePercentage).mul(formulaCompanionPercentage(hero.companionAllDamagePercentage));
	let totalPercentage;
	if(hero.tempBonusShopDpcTime > 0) totalPercentage = new Decimal(200).plus(hero.bonusShopDpcPercentage).mul(subTotalPercentage).div(10000);
	else totalPercentage = new Decimal(100).plus(hero.bonusShopDpcPercentage).mul(subTotalPercentage).div(10000);

	let totalDpc = new Decimal(baseDpc).mul(totalPercentage);
	let percentageBonusDpc = new Decimal(hero.percentageBonusDpc);
	hero.percentageBonusDpc = totalPercentage.mul(100);
	
	let dpsToDpcDamage = new Decimal(hero.companionDpsToDpcPercentage).plus(hero.enhanceDpsToDpcPercentage).div(100).mul(hero.totalDps);
	totalDpc = totalDpc.plus(dpsToDpcDamage);
	
	if(totalDpc.round().greaterThan(hero.highestDpc)){
	  hero.highestDpc = totalDpc.round();
	  updateAchievement(0);
	}
	totalDpc = increaseGodsDpc(totalDpc);
	
	let enhanceDpcForBossEnemyPercentage = new Decimal(hero.enhanceDpcForBossEnemyPercentage);
	let enhanceDpcForNormalEnemyPercentage = new Decimal(hero.enhanceDpcForNormalEnemyPercentage);
	let enhanceBonusPercentage = new Decimal(100).plus(hero.enhanceDpcForAllEnemyPercentage).plus(hero.enhanceAllDamagePercentage);
	
	if(hero.floor % enemy.bossFloor == 0 && enhanceDpcForBossEnemyPercentage.greaterThan(0)){
	  enhanceBonusPercentage = enhanceBonusPercentage.plus(enhanceDpcForBossEnemyPercentage);	
	}else if(hero.floor % enemy.bossFloor != 0 && enhanceDpcForNormalEnemyPercentage.greaterThan(0)){
	  enhanceBonusPercentage = enhanceBonusPercentage.plus(enhanceDpcForNormalEnemyPercentage);	
	}
	enhanceBonusPercentage = enhanceBonusPercentage.div(100);
	totalDpc = totalDpc.mul(enhanceBonusPercentage);
	if(unlockSkill && unlockSkill.isActive){
	  let totalDamagePercentage = new Decimal(100).plus(unlockSkill.damage).plus(artifactSkillDamage(skillId)).div(100);
	  totalDpc = totalDpc.mul(totalDamagePercentage).floor();
	}
	
	if(isManualClick){
	  let randomCrit = Math.random()*100;
	  if(randomCrit <= calcTotalCritChance()){
	    critDpc = true;	
	    totalDpc = totalDpc.mul(calcTotalCritDamage());
	  }
	}
	return totalDpc.round();
  };
  
  var calcMinMaxDPS = function(){
	let totalMinDps = new Decimal(0);
	let totalMaxDps = new Decimal(0);
	let enhanceBonusPercentage = new Decimal(calcTotalEnhanceDps("dungeon"));
	
	let battlingPartner = hero.unlockPartner.filter(item => item.status === "Battling");
	for(let i=0;i<battlingPartner.length;i++){
	  let unlockPartner = battlingPartner[i];
	  totalMinDps = new Decimal(10).pow(unlockPartner.weaponExponent).mul(unlockPartner.weaponMinDps).plus(unlockPartner.dungeonDps).plus(totalMinDps);
	  totalMaxDps = new Decimal(10).pow(unlockPartner.weaponExponent).mul(unlockPartner.weaponMaxDps).plus(unlockPartner.dungeonDps).plus(totalMaxDps);
	}
	
	totalMinDps = new Decimal(formulaDps(true,totalMinDps)).mul(enhanceBonusPercentage).round();
	totalMaxDps = new Decimal(formulaDps(true,totalMaxDps)).mul(enhanceBonusPercentage).round();

	totalMinDps = new Decimal(calcDpsWhenSkillRunning(totalMinDps));
	totalMaxDps = new Decimal(calcDpsWhenSkillRunning(totalMaxDps));
	
	hero.totalMinDps = totalMinDps;
	hero.totalMaxDps = totalMaxDps;
  };
  
  var formulaDps = function(isOnline=false,dpsValue){
	let companionTotalMultiplier = new Decimal(hero.companionAllDamagePercentage).plus(hero.companionAllDpsPercentage).plus(100).div(100);
	let subTotalPercentage = new Decimal(100).plus(hero.bonusAllDamagePercentage).plus(hero.artifactDamagePercentage).mul(companionTotalMultiplier);
	if(isOnline) subTotalPercentage = subTotalPercentage.plus(hero.bonusDpsPercentage);
	else subTotalPercentage = subTotalPercentage.plus(hero.bonusOfflineDpsPercentage);
	let totalPercentage = new Decimal(100).plus(hero.bonusShopDpsPercentage);
	if(hero.tempBonusShopDpsTime > 0 && isOnline) totalPercentage = totalPercentage.plus(100);

	totalPercentage = totalPercentage.mul(subTotalPercentage).div(10000);
	let totalDps = new Decimal(dpsValue).mul(totalPercentage);
	hero.percentageBonusDps = totalPercentage.mul(100);
	
	totalDps = new Decimal(increaseGodsDps(totalDps));
	return totalDps.floor();
  };
  
  var calcBattlingDps = function(battleType,isLoopAction=false){
	let totalDps = new Decimal(0);
	if(battleType=="dungeon"){
	  let battlingPartner = hero.unlockPartner.filter(item => item.status === "Battling");
	  for(let i=0;i<battlingPartner.length;i++){
	    if(battleType=="dungeon") totalDps = totalDps.plus(calcTotalPartnerDps(battlingPartner[i].id,"current",isLoopAction));
	  }
	}else{
	  let availablePartner = hero.highestUnlockPartner.filter(item => item.status === "Battling");
	  for(let i=0;i<availablePartner.length;i++){
	    totalDps = totalDps.plus(calcTotalPartnerDps(availablePartner[i].id,battleType));
	  }
	}
	if(isLoopAction && battleType == "dungeon") hero.dps = totalDps.floor();
	
	return totalDps;
  };
  
  var calcTotalEnhanceDps = function(battleType,isBoss=false){
	let enhanceDpsForBossEnemyPercentage = new Decimal(hero.enhanceDpsForBossEnemyPercentage);
	let enhanceDpsForNormalEnemyPercentage = new Decimal(hero.enhanceDpsForNormalEnemyPercentage);
	let enhanceBonusPercentage = new Decimal(100).plus(hero.enhanceAllDamagePercentage);
	
	if(battleType == "dungeon"){
	  if((hero.floor % enemy.bossFloor == 0 || isBoss) && enhanceDpsForBossEnemyPercentage.greaterThan(0)){
	    enhanceBonusPercentage = enhanceBonusPercentage.plus(enhanceDpsForBossEnemyPercentage);
	  }else if((hero.floor % enemy.bossFloor != 0 || !isBoss) && enhanceDpsForNormalEnemyPercentage.greaterThan(0)){
	    enhanceBonusPercentage = enhanceBonusPercentage.plus(enhanceDpsForNormalEnemyPercentage);
	  }
	}
	enhanceBonusPercentage = enhanceBonusPercentage.div(100);
	return enhanceBonusPercentage;
  };
  
  var calcDpsWhenSkillRunning = function(totalDps){
	let skillId = 2;
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	totalDps = new Decimal(totalDps);

	if(unlockSkill && unlockSkill.isActive){
	  let totalSkillPercentage = new Decimal(100).plus(unlockSkill.damage).plus(artifactSkillDamage(skillId)).div(100);
	  totalDps = totalDps.mul(totalSkillPercentage).round();
	}
	return totalDps;
  };
  
  var calcTotalDps = function (isOnline=true,battleType="dungeon",isLoopAction=false,isBoss=true) {
	let partnerDps = new Decimal(calcBattlingDps(battleType,isLoopAction));
	let totalDps = new Decimal(formulaDps(isOnline,partnerDps));
	if(totalDps.round().greaterThan(hero.highestDps)){
	  hero.highestDps = totalDps.round();
	  updateAchievement(1);
	}
	
	let enhanceBonusPercentage = new Decimal(calcTotalEnhanceDps(battleType));
	totalDps = totalDps.mul(enhanceBonusPercentage);
	
	if(battleType == "tower"){
	  totalDps = new Decimal(100).plus(hero.bonusTowerDamage).div(100).mul(totalDps).round();
	}else if(battleType == "dungeon" && isLoopAction){
	  hero.totalDps = totalDps.round();
	  if(isOnline){
		totalDps = new Decimal(calcDpsWhenSkillRunning(totalDps));
	  }
	}
	
	return totalDps.round();
  };

  var calcTotalCritChance = function(){
	return ((hero.companionCritChancePercentage*1)+(hero.bonusCritChancePercentage*1))*((hero.enhanceDpcCritChancePercentage*1)+100)/100;
  };
  
  var calcTotalCritDamage = function(){
	let heroCritDamage = new Decimal(150).plus(hero.companionCritDpcPercentage).plus(hero.bonusCritDamagePercentage).plus(hero.enhanceDpcCritDamagePercentage);
	return heroCritDamage.div(100);
  };
  
  var calcNextUpgradePartnerStat = function(statType,partnerId,forView=false){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let nextStat = new Decimal(0);
	switch(statType){
	  case "dps":
		if(highestUnlockPartner.baseDpsLevel == 0){
		  let partnerData = partner.find(item => item.id === partnerId);
		  nextStat = partnerData.baseDps;
		}else nextStat = new Decimal(highestUnlockPartner.baseDps).mul(setting.partnerUpgradeStatMultiplier).ceil();
		break;
	  case "ability-damage":
	    if(highestUnlockPartner.abilityDamageLevel == 0) nextStat = setting.baseAbilityDamage;
		else nextStat = new Decimal(highestUnlockPartner.baseAbilityDamagePercentage).mul(setting.partnerUpgradeStatMultiplier).ceil();
		break;
	  case "crit-chance":
		nextStat = new Decimal(0.15);
		break;
	  case "crit-damage":
	    nextStat = new Decimal(highestUnlockPartner.baseCritDamagePercentage).mul(setting.partnerUpgradeStatMultiplier).floor();
		break;
	};
	return nextStat;
  };
  
  var calcNextRequiredPartnerSpirit = function(statType,partnerId){
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let nextSpirit = new Decimal(0);
	switch(statType){
	  case "dps":
	    nextSpirit = new Decimal(setting.partnerUpgradeSpiritMultiplier).pow(highestUnlockPartner.baseDpsLevel).mul(setting.basePartnerUpgradeSpirit);
		break;
	  case "ability-damage":
	    nextSpirit = new Decimal(setting.partnerUpgradeSpiritMultiplier).pow(highestUnlockPartner.abilityDamageLevel).mul(setting.basePartnerUpgradeSpirit);
		break;
	  case "crit-chance":
		nextSpirit = new Decimal(setting.partnerUpgradeSpiritMultiplier).pow(highestUnlockPartner.critChanceLevel).mul(setting.basePartnerUpgradeSpirit);
		break;
	  case "crit-damage":
	    nextSpirit = new Decimal(setting.partnerUpgradeSpiritMultiplier).pow(highestUnlockPartner.critDamageLevel).mul(setting.basePartnerUpgradeSpirit);
		break;
	};
	return nextSpirit.ceil();	
  };
  
  var formulaRewardCoin = function(floorNumber){
	let rewardCoin = new Decimal(floorNumber).mul(enemy.baseCoin).div(1.15).ceil();
	let coinMultiplier = new Decimal(floorNumber).div(100);
	if(coinMultiplier.lessThan(1)) coinMultiplier = new Decimal(1);
	rewardCoin = rewardCoin.mul(coinMultiplier).floor();
	return rewardCoin;
  };
  
  var calcTotalRewardCoin = function (isOnline=true,idleRun=false) {
	let rewardCoin = formulaRewardCoin(hero.floor);
	let subTotalPercentage = new Decimal(100).plus(hero.bonusAllCoinPercentage).plus(hero.artifactDamagePercentage).mul(formulaCompanionPercentage(hero.companionAllCoinPercentage));
	
	if(isOnline) subTotalPercentage = subTotalPercentage.plus(hero.bonusCoinPercentage);
	else subTotalPercentage = subTotalPercentage.plus(hero.bonusOfflineCoinPercentage);
	
	let totalPercentage = new Decimal(100).plus(hero.bonusShopCoinPercentage);
	if(hero.tempBonusShopCoinTime > 0 && isOnline) totalPercentage = totalPercentage.plus(100);
	
	totalPercentage = totalPercentage.mul(subTotalPercentage).div(10000);
	let totalRewardCoin = new Decimal(rewardCoin).mul(totalPercentage);
	
	if(isOnline && !idleRun){
	  let percentageBonusCoin = new Decimal(hero.percentageBonusCoin);
	  hero.percentageBonusCoin = totalPercentage.mul(100);
	
	  let skillId = 3;
	  let unlockSkill = hero.unlockSkill.find(item => item.id === skillId); 
	  if(unlockSkill && unlockSkill.isActive){
	    let totalDamagePercentage = new Decimal(100).plus(unlockSkill.damage).plus(artifactSkillDamage(skillId)).div(100);
	    totalRewardCoin = totalRewardCoin.mul(totalDamagePercentage).round();
	  }
	}
	if(hero.floor % enemy.bossFloor == 0){
	  let bossCoinPercentage = new Decimal(hero.bonusBossCoinPercentage).mul(formulaCompanionPercentage(hero.companionBossCoinPercentage)).plus(hero.enhanceCoinForBossEnemyPercentage).plus(hero.enhanceCoinForAllEnemyPercentage).plus(100).div(100);
	  totalRewardCoin = totalRewardCoin.mul(bossCoinPercentage).mul(2);
	  
	  let enhance10CoinChanceForBossEnemyPercentage = (hero.enhance10CoinChanceForBossEnemyPercentage * 1) + (hero.enhance10CoinChanceForAllEnemyPercentage * 1);
	  let randomPercentage = Math.random()*100;
	  if(randomPercentage <= enhance10CoinChanceForBossEnemyPercentage) totalRewardCoin = totalRewardCoin.mul(10);
	}else{
	  let enemyCoinPercentage = new Decimal(hero.companionEnemyCoinPercentage).plus(hero.enhanceCoinForNormalEnemyPercentage).plus(hero.enhanceCoinForAllEnemyPercentage).plus(100).div(100);
	  totalRewardCoin = totalRewardCoin.mul(enemyCoinPercentage);
	  
	  let enhance10CoinChanceForNormalEnemyPercentage = (hero.enhance10CoinChanceForNormalEnemyPercentage * 1) + (hero.enhance10CoinChanceForAllEnemyPercentage * 1);
	  let randomPercentage = Math.random()*100;
	  if(randomPercentage <= enhance10CoinChanceForNormalEnemyPercentage) totalRewardCoin = totalRewardCoin.mul(10);
	}
	return totalRewardCoin.ceil();
  };
  
  var calcTotalOrbs = function (){
	let baseOrbs = new Decimal(hero.maxFloor).div(10).ceil().sub(11).div(setting.prestigeFloorBonus).mul(10).plus(setting.baseGainOrbsCalculation).floor();
	let bonusMultiplier = new Decimal(hero.maxFloor).sub(unlockNewFeatureFloor("artifact")).div(10).ceil().pow(setting.orbsMultiplier);
	if(bonusMultiplier <= 1) bonusMultiplier = 1;
	baseOrbs = baseOrbs.mul(bonusMultiplier);
	if(baseOrbs.lessThan(0)) baseOrbs = new Decimal(1);
	else{
	  if(hero.maxFloor%10 == 0) baseOrbs = baseOrbs.plus(10);
	  baseOrbs = baseOrbs.plus(hero.maxFloor%10);
	}

	let totalLevel = new Decimal(calcTotalPartnerLevel()).plus(hero.heroLevel).plus(hero.weaponLevel);
	let levelMultiplier = totalLevel.div(50).ceil().pow(setting.orbsMultiplier);
	if(levelMultiplier.lessThan(1)) levelMultiplier = new Decimal(1);
	let partnerOrbs = totalLevel.div(setting.prestigePartnerLevelBonus).mul(levelMultiplier);
	let subTotalPercentage = new Decimal(100).plus(hero.bonusOrbsPercentage);
	let totalPercentage = new Decimal(100).plus(hero.bonusShopOrbsPercentage).mul(subTotalPercentage).div(10000);
	let totalOrbs = baseOrbs.plus(partnerOrbs).mul(totalPercentage);
	
	let percentageBonusOrbs = new Decimal(hero.percentageBonusOrbs);
	let totalPercentageStat = totalPercentage.mul(100);
	if(percentageBonusOrbs.lessThan(totalPercentageStat)) hero.percentageBonusOrbs = totalPercentage*100;
	
	return totalOrbs.floor();
  };

  var runPartnerAbility = function(unlockPartner, totalAbilityDamage, abilityId, loopAbility=1){
	let partnerDps = new Decimal(unlockPartner.dps);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === unlockPartner.id);
	let abilityDamagePercentage = new Decimal(unlockPartner.abilityDamage).plus(highestUnlockPartner.baseAbilityDamage);
	let partnerData = partner.find(item => item.id === unlockPartner.id);
	let bonusPartnerTypePercentage = new Decimal(calcAbilityDamage(partnerData.type));
	let enhanceAbilityDamagePercentage = new Decimal(highestUnlockPartner.enhanceAbilityDamagePercentage);
	if(enhanceAbilityDamagePercentage.greaterThan(0)) bonusPartnerTypePercentage = bonusPartnerTypePercentage.mul(enhanceAbilityDamagePercentage).div(100);
	let abilityDamage = new Decimal(partnerDps).mul(abilityDamagePercentage).mul(hero.percentageBonusDps).div(10000).mul(bonusPartnerTypePercentage);
	totalAbilityDamage = totalAbilityDamage.plus(abilityDamage);

	updateTask(21,loopAbility);
	let highestPartnerLevel = hero.highestUnlockPartner.find(item => item.id === unlockPartner.id && item.status === "Battling");
	if(highestPartnerLevel){
	  let unlockPartnerAbility = highestPartnerLevel.ability.find(item => item.abilityId === abilityId && item.isActive == true);
	  if(unlockPartnerAbility){
	    if(unlockPartnerAbility.abilityLevel < unlockPartnerAbility.maxLevel){
		  unlockPartnerAbility.exp += loopAbility;
	      abilityChanges = true;
	      while(unlockPartnerAbility.exp >= unlockPartnerAbility.maxExp && unlockPartnerAbility.abilityLevel < unlockPartnerAbility.maxLevel){
			updateTask(20);
			unlockPartnerAbility.exp -= unlockPartnerAbility.maxExp;
		    unlockPartnerAbility.abilityLevel += 1;
		    unlockPartnerAbility.abilityPoint += 1;
		    unlockPartnerAbility.tempAbilityPoint += 1;
		    unlockPartnerAbility.maxExp = Math.ceil(unlockPartnerAbility.abilityLevel/5)*10;
			if(unlockPartnerAbility.abilityLevel == setting.reqLevelUnlockNewAbility){
			  let partnerAbilityData = partnerAbility.find(item => item.id === abilityId);
			  if(partnerAbilityData.abilityTypeId < 4){
			    let nextAbilityTypeId = partnerAbilityData.abilityTypeId + 1;
			    insertPartnerAbility(unlockPartner.id,partnerData.type,nextAbilityTypeId);
				componentAction("barracks-area-div","clearText","");
			  }
			}
		  }
		  if(unlockPartnerAbility.abilityLevel == unlockPartnerAbility.maxLevel) unlockPartnerAbility.exp = 0;
		}
	  }
	}
	return totalAbilityDamage;
  };
  
  var calcAbilityDamage = function(partnerType){
	let bonusPartnerTypePercentage = new Decimal(1);
	switch(partnerType){
		case "Melee":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusMeleeAbilityPercentage).div(100);
		  break;
		case "Stealth":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusStealthAbilityPercentage).div(100);
		  break;
		case "Sword":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusSwordAbilityPercentage).div(100);
		  break;
		case "Ranged":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusRangedAbilityPercentage).div(100);
		  break;
		case "Magic":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusMagicAbilityPercentage).div(100);
		  break;
		case "Firearm":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusFirearmAbilityPercentage).div(100);
		  break;
		case "Rune":
		  bonusPartnerTypePercentage = new Decimal(100).plus(hero.bonusRuneAbilityPercentage).div(100);
		  break;
	}
	return bonusPartnerTypePercentage;
  };
    
  var calcTotalAbility = function(idleLoop=1){
	idleLoop *= 1;
	let totalAbilityDamage = new Decimal(0);
	let battlingUnlockPartner = hero.unlockPartner.filter(item => item.status === "Battling");
	for(let i=0;i<battlingUnlockPartner.length;i++){
	  let unlockPartner = battlingUnlockPartner[i];
	  let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === unlockPartner.id);
	  let abilityId = unlockPartner.abilityId;
	  let abilityInterval = unlockPartner.abilityInterval;
	  let abilityAccuracy = (unlockPartner.abilityAccuracy * 1) * ((highestUnlockPartner.enhanceAbilityChancePercentage * 1)+100) / 100;
	  
	  if(idleLoop == 1){
		let counter = Math.floor(1 / setting.gameSpeed * 10) / 10;
		unlockPartner.abilityCounter += counter;
		unlockPartner.abilityCounter = Math.round(unlockPartner.abilityCounter * 10) / 10;
		
		if(unlockPartner.abilityCounter == abilityInterval){
		  let randomAbility = Math.random()*100;
		  unlockPartner.abilityCounter = 0;
		  if(randomAbility <= abilityAccuracy) totalAbilityDamage = runPartnerAbility(unlockPartner, totalAbilityDamage, abilityId);
		}
	  }else{
		let loopAbility = Math.floor(idleLoop / abilityInterval);
		let successAbility = Math.floor(loopAbility * abilityAccuracy * 0.9 / 100);
		totalAbilityDamage = runPartnerAbility(unlockPartner, totalAbilityDamage, abilityId, successAbility);
	  }
	  if(abilityChanges && !$("#barracks-div").hasClass("d-none") && !$("#barracks-area-div").hasClass("d-none") && $("#detail-partner-ability-area").length && !$("#ability-partner-area-"+unlockPartner.id+"-"+abilityId).hasClass("d-none")) updatePartnerAbility(unlockPartner.id,abilityId);
	}
	let totalPercentage = new Decimal(100).plus(hero.bonusAbilityPercentage).plus(hero.bonusAllDamagePercentage).plus(hero.artifactDamagePercentage);
	totalAbilityDamage = totalAbilityDamage.mul(totalPercentage).div(100);
	return totalAbilityDamage.floor();
  };
  
  var calcTotalWeaponDamage = function(partnerId=-1,type=""){
	let totalWeaponDamage = new Decimal(0);
	if(hero.highestFloor >= unlockNewFeatureFloor("equipment")){
	  if(partnerId >= 0){
	    let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	    if(unlockPartner){
		  if(type == "next") totalWeaponDamage = new Decimal(unlockPartner.weaponMinDps);
		  else totalWeaponDamage = new Decimal(10).pow(unlockPartner.weaponExponent).mul(randomBetweenNumber(new Decimal(unlockPartner.weaponMinDps),new Decimal(unlockPartner.weaponMaxDps)));
	    }
	  }else{
	    let battlingPartner = hero.unlockPartner.filter(item => item.status.toLowerCase() === "battling");
	    let equipmentMinValue = new Decimal(hero.equipmentMinValue);
	    let equipmentMaxValue = new Decimal(hero.equipmentMaxValue);
	    if(battlingPartner.length > 0 && equipmentMinValue.greaterThan(0) && equipmentMaxValue.greaterThan(0)){
	      if(type == "next") totalWeaponDamage = new Decimal(10).pow(hero.equipmentExponentValue).mul(equipmentMinValue);
		  else totalWeaponDamage = new Decimal(10).pow(hero.equipmentExponentValue).mul(randomBetweenNumber(equipmentMinValue,equipmentMaxValue));
	    }		
	  }
	}
	return totalWeaponDamage.round();
  };
  
  var calcTotalPartnerLevel = function (){
	let totalLevel = 0;
	for(let i=0;i<hero.unlockPartner.length;i++){
	  totalLevel += hero.unlockPartner[i].level;
	}
	return totalLevel;
  };
  
  var calcCurrentUnlockArtifactFee = function(){
	let unlockFee = new Decimal(hero.countArtifact).mul(Math.pow(setting.unlockArtifactMultiplier,hero.countArtifact)).floor();
	
	return unlockFee;
  };
  
  var calcNextUnlockArtifactFee = function(){
	let unlockFee = new Decimal(hero.countArtifact+1).mul(Math.pow(setting.unlockArtifactMultiplier,(hero.countArtifact+1))).floor();
	
	return unlockFee;
  };
  
  var formulaUpgradeArtifactMultiplier = function(maxLevel){
	let upgradeArtifactMultiplier = setting.upgradeArtifactMultiplier;
	switch(maxLevel){
	  case 50:
	    upgradeArtifactMultiplier += 0.2065;
		break;
	  case 100:
	    upgradeArtifactMultiplier += 0.04718;
		break;	
	}
	return upgradeArtifactMultiplier;
  };
  
  var formulaUpgradeArtifactFee = function(artifactLevel,artifactMultiplier,artifactTier,upgradeArtifactMultiplier){
	let baseArtifact = new Decimal(artifactLevel).mul(setting.upgradeArtifactBaseTier).mul(artifactMultiplier);
	let multiplier = new Decimal(upgradeArtifactMultiplier).pow(artifactTier+artifactLevel).mul(artifactTier);
	let upgradeFee = baseArtifact.mul(multiplier);
	
	return upgradeFee.ceil();
  };
  
  var calcCurrentUpgradeArtifactFee = function(artifactId){
	let upgradeArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
	let artifactData = artifact.find(item => item.id === artifactId);
	let upgradeFee = new Decimal(0);
	let lastUpgradeFee = new Decimal(0);
	let upgradeArtifactMultiplier = formulaUpgradeArtifactMultiplier(artifactData.maxLevel);

	if(upgradeArtifact){
	  for(let a=1; a<upgradeArtifact.level; a++){
		lastUpgradeFee = new Decimal(formulaUpgradeArtifactFee(a,artifactData.upgradeMultiplier,artifactData.tier,upgradeArtifactMultiplier));
		lastUpgradeFee = lastUpgradeFee.mul(100-hero.bonusArtifactUpgradeFeePercentage).div(100).ceil();
		upgradeFee = upgradeFee.plus(lastUpgradeFee);
 	  }
	}
	return upgradeFee;
  };
  
  var calcNextUpgradeArtifactFee = function(artifactId){
	let upgradeArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
	let artifactData = artifact.find(item => item.id === artifactId);
	let upgradeFee = new Decimal(0);
	let upgradeArtifactMultiplier = formulaUpgradeArtifactMultiplier(artifactData.maxLevel);
	
	if(upgradeArtifact){
	  let availableLevel = 0;
	  if(multiplierArtifact > 0){
	    for(let i=0;i<multiplierArtifact;i++){
		  if((upgradeArtifact.level+i+1 <= artifactData.maxLevel && artifactData.maxLevel > 0) || artifactData.maxLevel == 0){
	        let currentFee = new Decimal(formulaUpgradeArtifactFee((upgradeArtifact.level+i),artifactData.upgradeMultiplier,artifactData.tier,upgradeArtifactMultiplier));
			
			currentFee = currentFee.mul(100-hero.bonusArtifactUpgradeFeePercentage).div(100).ceil();
			upgradeFee = currentFee.plus(upgradeFee);
			availableLevel += 1;
		  }else i=multiplierArtifact;
	    }
		$("#upgrade-artifact-level-"+artifactId).text("+"+availableLevel);
	  }else if(multiplierArtifact == 0){
		let a = 0;
		let canLoop = true;
	    do{
		  let currentFee = new Decimal(formulaUpgradeArtifactFee((upgradeArtifact.level+a),artifactData.upgradeMultiplier,artifactData.tier,upgradeArtifactMultiplier));
		  currentFee = currentFee.mul(100-hero.bonusArtifactUpgradeFeePercentage).div(100).ceil();
		  if((upgradeArtifact.level+a+1 <= artifactData.maxLevel && artifactData.maxLevel > 0) || artifactData.maxLevel == 0){
		    if(currentFee.plus(upgradeFee).lessThanOrEqualTo(new Decimal(hero.orbs))){
			  a++;
			  upgradeFee = currentFee.plus(upgradeFee);
			}else canLoop = false;
		  }else canLoop = false;
	    }while(canLoop == true);    
		availableLevel = a;
		$("#upgrade-artifact-level-"+artifactId).text("+"+a);
		if(a == 0) upgradeFee = new Decimal(0);
	  }
	  let searchArrayArtifactLevel = arrayArtifactLevel.find(item => item.artifactId === artifactId);
		
	  if(searchArrayArtifactLevel){
		searchArrayArtifactLevel.maxLevel = availableLevel;
	  }else{
		let newObjArtifactUpgrade = {
	      artifactId: artifactId,
	      maxLevel: availableLevel,
	    };
	    arrayArtifactLevel.push(newObjArtifactUpgrade);
	  }
	}
	return upgradeFee;
  };
  
  var calcIdleTime = function(callback){
	calcOfflineTime(true);
	callback();
  };
  
  var calcOfflineTime = function (isIdle=false) {
	let onDateTime = Date.now();
	let offlineTime = new Decimal(onDateTime).sub(hero.lastActiveDatetime).div(1000).floor();

	if(offlineTime.greaterThanOrEqualTo(0)){
	  let offlineDps = new Decimal(0);
	  let bossOfflineDps = new Decimal(0);
	  let notifTitle = "offline";
	  if(isIdle){
		offlineDps = new Decimal(calcTotalDps(true,"dungeon",true,false));
		bossOfflineDps = new Decimal(calcTotalDps(true,"dungeon",true,true));
		notifTitle = "idle";
	  }else offlineDps = new Decimal(hero.totalDps);
	  let totalOfflineTimeLimit = new Decimal(setting.baseOfflineTimeLimit).plus(hero.bonusOfflineTimeLimit).mul(60);
	  let offlineTimeReward = offlineTime.mul(setting.gameSpeed).floor();
	  
	  if(offlineTimeReward.greaterThan(totalOfflineTimeLimit)) offlineTimeReward = totalOfflineTimeLimit;
	  if(offlineDps.greaterThan(0) && offlineTimeReward.greaterThanOrEqualTo(3)){
		let enemyHP = new Decimal(0);
		let rewardCoin = new Decimal(0);
		let totalRewardCoin = new Decimal(0);
	    let killingTime = new Decimal(0);
		let totalKillingCount = new Decimal(0);
		let maxBossTimer = new Decimal(formulaBossTimer());
		let dpsInterval = formulaIntervalDps();
		let autoProgress = true;
		if(isIdle) autoProgress = hero.settingOnlineProgress;
		else autoProgress = hero.settingOfflineProgress;
		
		if(autoProgress){
		  let canProgress = true;
		  while(offlineTimeReward.greaterThan(0)){
			enemyHP = initEnemy();
			rewardCoin = new Decimal(calcTotalRewardCoin(false));
			
			if(hero.floor % enemy.bossFloor == 0 && isIdle) killingTime = new Decimal(enemyHP).div(bossOfflineDps).ceil().mul(dpsInterval).div(1000).mul(setting.gameSpeed).ceil();
			else killingTime = new Decimal(enemyHP).div(offlineDps).ceil().mul(dpsInterval).div(1000).mul(setting.gameSpeed).ceil();
			
			if(hero.floor % enemy.bossFloor == 0){
			  if(killingTime.greaterThan(maxBossTimer) && offlineTimeReward.greaterThan(maxBossTimer)){
				canProgress = false;
				hero.settingOnlineProgress = false;
				setting.autoProgress = false;
				hero.floor--;
				killingTime = maxBossTimer;
			  }
			}else canProgress = true;
			
			let lastOfflineTime = new Decimal(offlineTimeReward).sub(killingTime);
			if(lastOfflineTime.greaterThanOrEqualTo(0) && offlineTimeReward.greaterThan(killingTime)){
			  if(canProgress){
			    hero.coin = new Decimal(hero.coin).plus(rewardCoin);
			    totalRewardCoin = totalRewardCoin.plus(rewardCoin);
			    totalKillingCount = totalKillingCount.plus(1);
				if(hero.floor < setting.limitFloor){
				  if(setting.autoProgress){
					hero.floor++;
				    if(hero.maxFloor < hero.floor) hero.maxFloor = hero.floor;
				    if(hero.highestFloor < hero.maxFloor) hero.highestFloor = hero.maxFloor;
				  }
				}
				unlockNewFeatures();
			  }
			}
			offlineTimeReward = offlineTimeReward.sub(killingTime);
			if(!isIdle) hero.totalOfflineDuration = new Decimal(hero.totalOfflineDuration).plus(offlineTime);
		  };
		}else{
		  let killingCount = new Decimal(0);
		  let killingReward = new Decimal(0);
		  if(offlineTimeReward.greaterThan(0)){
			enemyHP = initEnemy();
			rewardCoin = new Decimal(calcTotalRewardCoin(false));
			killingTime = new Decimal(enemyHP).div(offlineDps).ceil().mul(dpsInterval).div(1000).ceil();
			killingCount = offlineTimeReward.div(killingTime).floor();
		    killingReward = new Decimal(rewardCoin).mul(killingCount);	 
		    totalKillingCount = totalKillingCount.plus(killingCount);
			hero.totalOfflineDuration = new Decimal(hero.totalOfflineDuration).plus(offlineTime);
			totalRewardCoin = totalRewardCoin.plus(killingReward);
			hero.coin = new Decimal(hero.coin).plus(totalRewardCoin);
			hero.totalOfflineCoin = new Decimal(hero.totalOfflineCoin).plus(totalRewardCoin);
		  }
		}
		let totalLaborPrize = new Decimal(offlineTime).mul(setting.gameSpeed).div(10).floor().mul(calcTotalProduceLaborCoin());
		totalRewardCoin = totalRewardCoin.plus(totalLaborPrize);
		hero.coin = new Decimal(hero.coin).plus(totalLaborPrize);
		hero.totalOfflineCoin = new Decimal(hero.totalOfflineCoin).plus(totalLaborPrize);
		updateAchievement(2);
		let enemyText = (totalKillingCount > 1? " Enemies": " Enemy");
		let totalRewardCoinText = (totalRewardCoin.greaterThan(1)? " Coins": " Coin");

		let offlineText = "Welcome Back "+hero.userName+"\n";
		offlineText += "You are "+notifTitle+" for "+offlineTimeText(offlineTime)+"\n";
		if(offlineTime.greaterThan(totalOfflineTimeLimit)) offlineText += "Max "+notifTitle+" reward "+offlineTimeText(totalOfflineTimeLimit)+"\n";
		offlineText += "You are killing "+numberFormat(totalKillingCount)+enemyText+"\n";
		offlineText += "And you got "+numberFormat(totalRewardCoin)+totalRewardCoinText+"\n";
		
		$("#image-offline-form").attr("src", "assets/images/"+notifTitle+".svg");
		componentAction ("offline-text", "replaceText", offlineText, true);
		$('.modal').modal('hide');
		$("#modalOfflineForm").modal('show');
	  }
	  hero.lastActiveDatetime = Date.now();
	  saveGame();
	  return false;
	}else return true;
  };
  
  var offlineTimeText = function (offlineSecond) {
	if(offlineSecond >= 0){
	  let offlineYear = Math.floor(offlineSecond / 31104000);
	  let offlineMonth = Math.floor((offlineSecond - (offlineYear*31104000)) / 2592000);
	  let offlineDay = Math.floor((offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000)) / 86400);
	  let offlineHour = Math.floor((offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000) - (offlineDay*86400)) / 3600);
	  let offlineMin = Math.floor((offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000) - (offlineDay*86400) - (offlineHour*3600)) / 60);
	  let offlineSec = Math.floor(offlineSecond - (offlineYear*31104000) - (offlineMonth*2592000) - (offlineDay*86400) - (offlineHour*3600) - (offlineMin * 60));
	  let timerText = "";
	
	  if(offlineSecond >= 31104000) timerText += offlineYear+" Year ";
	  if(offlineSecond >= 2592000) timerText += offlineMonth+" Month ";
	  if(offlineSecond >= 86400 && offlineYear == 0) timerText += offlineDay+" Day ";
	  if(offlineSecond >= 3600 && offlineMonth == 0) timerText += offlineHour+" Hour ";
	  if(offlineSecond >= 60 && offlineDay == 0) timerText += offlineMin+" Min ";
	  if(offlineSecond < 3600 && offlineHour == 0)timerText += offlineSec+" Sec";
	
	  return timerText;
	}else return "-";
  };
  
  var offlineTimeFormat = function(offlineSecond){
	let offlineHour = Math.floor(offlineSecond / 3600);
	let offlineMinute = Math.floor((offlineSecond - (offlineHour * 3600)) / 60);
	let offlineSec = Math.floor(offlineSecond - (offlineHour * 3600) - (offlineMinute * 60));
	if(offlineHour < 10) offlineHour = "0"+offlineHour;
	if(offlineMinute < 10) offlineMinute = "0"+offlineMinute;
	if(offlineSec < 10) offlineSec = "0"+offlineSec;
	return offlineHour+":"+offlineMinute+":"+offlineSec;
  };
  
  var calcNextHeroDpc = function (level=0){
	let totalNextHeroDpc = new Decimal(0);
	let levelMultiplier = 0;
	
	if(level > 0) levelMultiplier = level;
	else{
	  if(setting.levelUpgradeMultiplier > 0) levelMultiplier = setting.levelUpgradeMultiplier;
	  else if(setting.levelUpgradeMultiplier == 0) levelMultiplier = maxHeroLevelBuy;
	}

	for(let a=0; a<levelMultiplier; a++){
	  let nextHeroDpc = new Decimal(hero.heroLevel + a + 1).div(setting.heroDpcMultiplier).ceil();
	  totalNextHeroDpc = totalNextHeroDpc.plus(nextHeroDpc);
	  if((hero.heroLevel + a + 1) / 10 == 1 || (hero.heroLevel + a + 1) % 25 == 0){
	    totalNextHeroDpc = totalNextHeroDpc.plus(hero.heroLevel + a + 1);
	  }
	}
	return totalNextHeroDpc.ceil();
  };
  
  var calcNextWeaponDpc = function (level=0){
	let totalNextWeaponDpc = new Decimal(0);
	let loopNextLevel = 0;
	
	if(level > 0) loopNextLevel = level;
	else{
	  if(hero.weaponLevel == 0) loopNextLevel = 1;
      else{
	    if(setting.levelUpgradeMultiplier > 0)loopNextLevel = setting.levelUpgradeMultiplier;
	    else if(setting.levelUpgradeMultiplier == 0)loopNextLevel = maxWeaponLevelBuy;
	  }
	}
	
	for(let a=0; a<loopNextLevel; a++){
	  let nextWeaponDpc = new Decimal(hero.weaponLevel + a + 1).div(setting.weaponDpcMultiplier).ceil().mul(setting.baseWeaponDpc);
	  totalNextWeaponDpc = totalNextWeaponDpc.plus(nextWeaponDpc);

	  if((hero.weaponLevel + a + 1) / 10 == 1 || (hero.weaponLevel + a + 1) % 25 == 0){
		totalNextWeaponDpc = totalNextWeaponDpc.plus((hero.weaponLevel + a + 1)*1.5);
	  }
	}
	return totalNextWeaponDpc.ceil();
  };
  
  var calcCurrentPartnerDps = function(partnerId,battleType=""){
	let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let highestUnlockPartnerBaseDps = new Decimal(0);
	if(highestUnlockPartner) highestUnlockPartnerBaseDps = new Decimal(highestUnlockPartner.baseDps);
	
	if(battleType==""){
	  let partnerData = partner.find(item => item.id === partnerId);
	  if(unlockPartner) return new Decimal(unlockPartner.dps).plus(unlockPartner.bonusDps).plus(highestUnlockPartnerBaseDps).sub(partnerData.baseDps);
	  else return new Decimal(0);
	}else if(battleType=="tower"){ 
	  return new Decimal(highestUnlockPartner.bonusDps).plus(highestUnlockPartner.baseDps);
	}else return new Decimal(0);
  };
  
  var calcCurrentLaborPrize = function(laborId){
	let unlockLabor = hero.unlockLabor.find(item => item.id === laborId);
	if(unlockLabor) return new Decimal(unlockLabor.currentPrize);
	else return new Decimal(0);
  };
  
  var calcNextPartnerDps = function (partnerId,level=0){
	let totalNextPartnerDps = new Decimal(0);
	let loopNextLevel = 0;
	let currentPartnerLevel = 0;

	let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	let partnerData = partner.find(item => item.id === partnerId);

	if(unlockPartner){
	  if(level > 0) loopNextLevel = level;
	  else{
		if(setting.levelUpgradeMultiplier > 0)loopNextLevel = roundedLevelUpgrade(unlockPartner.level, setting.levelUpgradeMultiplier, "partner", partnerId);
		else if(setting.levelUpgradeMultiplier == 0){
		  let localMaxPartnerLevelBuy = maxPartnerLevelBuy.find(item => item.id === partnerId);
	      if(localMaxPartnerLevelBuy) loopNextLevel = localMaxPartnerLevelBuy.maxLevelBuy;
		}
	  }	
	  currentPartnerLevel = unlockPartner.level;
    }else loopNextLevel = 1;
	
	for(let a=0; a<loopNextLevel; a++){
	  let nextPartnerDps = new Decimal(currentPartnerLevel + a + 1).div(setting.partnerDpsMultiplier).ceil().mul(partnerData.baseDps);
	  totalNextPartnerDps = totalNextPartnerDps.plus(nextPartnerDps);

	  if((currentPartnerLevel + a + 1) / 10 == 1 || (currentPartnerLevel + a + 1) % 25 == 0){
		totalNextPartnerDps = nextPartnerDps.mul(1.5).plus(totalNextPartnerDps);  
	  }
	}
	return totalNextPartnerDps.floor();
  };
  
  var calcNextLaborPrize = function (laborId,level=0){
	let totalNextLaborPrize = new Decimal(0);
	let loopNextLevel = 0;
	let currentLaborLevel = 0;
	let unlockLabor = hero.unlockLabor.find(item => item.id === laborId);

	if(unlockLabor.level > 0){
	  if(level > 0) loopNextLevel = level;
	  else{
		if(setting.levelUpgradeMultiplier > 0)loopNextLevel = setting.levelUpgradeMultiplier;
		else if(setting.levelUpgradeMultiplier == 0){
		  let localMaxLaborLevelBuy = maxLaborLevelBuy.find(item => item.id === laborId);
	      if(localMaxLaborLevelBuy) loopNextLevel = localMaxLaborLevelBuy.maxLevelBuy;
		}
	  }	
	  currentLaborLevel = unlockLabor.level;
    }else loopNextLevel = 1;

	for(let a=0; a<loopNextLevel; a++){
	  let nextLaborPrize = new Decimal(formulaUpgradeLabor(unlockLabor.basePrize,(currentLaborLevel+a+1)));
	  totalNextLaborPrize = totalNextLaborPrize.plus(nextLaborPrize);
	}
	return totalNextLaborPrize;
  };
  
  var formulaPartnerCritChance = function(highestUnlockPartner){
	let bonusPartnerCritChancePercentage = new Decimal(100);
	let partnerData = partner.find(item => item.id === highestUnlockPartner.id);
	switch(partnerData.type){
	  case "Melee":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusMeleeCritChancePercentage);
		break;
	  case "Stealth":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusStealthCritChancePercentage);
		break;
	  case "Sword":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusSwordCritChancePercentage);
	 	break;
	  case "Ranged":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusRangedCritChancePercentage);
		break;
	  case "Magic":
	    bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusMagicCritChancePercentage);
		break;
	  case "Firearm":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusFirearmCritChancePercentage);
		break;
	  case "Rune":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusRuneCritChancePercentage);
		break;
	};
	bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.div(100);
	return Math.floor((highestUnlockPartner.baseCritChancePercentage*1)*((highestUnlockPartner.enhanceCritChancePercentage*1)+100)*bonusPartnerCritChancePercentage)/100;  
  };
  
  var formulaNextPartnerCritChance = function(critChanceValue,highestUnlockPartner){
	let bonusPartnerCritChancePercentage = new Decimal(100);
	let partnerData = partner.find(item => item.id === highestUnlockPartner.id);
	switch(partnerData.type){
	  case "Melee":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusMeleeCritChancePercentage);
		break;
	  case "Stealth":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusStealthCritChancePercentage);
		break;
	  case "Sword":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusSwordCritChancePercentage);
	 	break;
	  case "Ranged":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusRangedCritChancePercentage);
		break;
	  case "Magic":
	    bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusMagicCritChancePercentage);
		break;
	  case "Firearm":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusFirearmCritChancePercentage);
		break;
	  case "Rune":
		bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.plus(hero.bonusRuneCritChancePercentage);
		break;
	};
	bonusPartnerCritChancePercentage = bonusPartnerCritChancePercentage.div(100);
	return Math.floor((critChanceValue*1)*((highestUnlockPartner.enhanceCritChancePercentage*1)+100)*bonusPartnerCritChancePercentage)/100;  
  };
  
  var calcTotalPartnerDps = function(partnerId=-1,type,isLoopAction=false,critHit=false){
	let totalPartnerDps = new Decimal(0);
	if(type == "current") totalPartnerDps = calcCurrentPartnerDps(partnerId);
	else if(type == "next") totalPartnerDps = calcNextPartnerDps(partnerId);
	else if(type == "tower") totalPartnerDps = calcCurrentPartnerDps(partnerId,type);
	
	let partnerData = partner.find(item => item.id === partnerId);
	let highestUnlockPartner = hero.highestUnlockPartner.find(item => item.id === partnerId);
	let bonusPartnerTypePercentage = new Decimal(100);
	let bonusPartnerTypeCritPercentage = new Decimal(0);
	if(highestUnlockPartner){
	  switch(partnerData.type){
	    case "Melee":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusMeleeDpsPercentage).mul(formulaCompanionPercentage(hero.companionMeleeDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusMeleeCritDamagePercentage);
		  break;
	    case "Stealth":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusStealthDpsPercentage).mul(formulaCompanionPercentage(hero.companionStealthDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusStealthCritDamagePercentage);
		  break;
	    case "Sword":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusSwordDpsPercentage).mul(formulaCompanionPercentage(hero.companionSwordDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusSwordCritDamagePercentage);
		  break;
	    case "Ranged":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusRangedDpsPercentage).mul(formulaCompanionPercentage(hero.companionRangedDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusRangedCritDamagePercentage);
		  break;
	    case "Magic":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusMagicDpsPercentage).mul(formulaCompanionPercentage(hero.companionMagicDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusMagicCritDamagePercentage);
		  break;
	    case "Firearm":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusFirearmDpsPercentage).mul(formulaCompanionPercentage(hero.companionFirearmDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusFirearmCritDamagePercentage);
		  break;
	    case "Rune":
		  bonusPartnerTypePercentage = new Decimal(bonusPartnerTypePercentage).plus(hero.bonusRuneDpsPercentage).mul(formulaCompanionPercentage(hero.companionRuneDpsPercentage)).div(100);
		  bonusPartnerTypeCritPercentage = new Decimal(bonusPartnerTypeCritPercentage).plus(hero.bonusRuneCritDamagePercentage);
		  break;
	  };
	  bonusPartnerTypePercentage = new Decimal(100).plus(highestUnlockPartner.enhanceDpsPercentage).div(100).mul(bonusPartnerTypePercentage);
	}
	
	if(highestUnlockPartner){	
	  let randomPercentage = Math.random()*100;
	  let partnerPercentage = formulaPartnerCritChance(highestUnlockPartner);
	  let unlockPartner = hero.unlockPartner.find(item => item.id === partnerId);
	  let bonusPartnerCritPercentage = new Decimal(1);
	  let weaponDps = new Decimal(calcTotalWeaponDamage(partnerId,type));
	  if(isLoopAction){
	    if(randomPercentage<=partnerPercentage || critHit == true){
		  critDps = true;
		  unlockPartner.critHit = true;
		  bonusPartnerCritPercentage = new Decimal(highestUnlockPartner.baseCritDamagePercentage).plus(highestUnlockPartner.enhanceCritDamagePercentage).plus(bonusPartnerTypeCritPercentage).div(100);
		  unlockPartner.critMultiplier = bonusPartnerCritPercentage;
		  if(!$("#partner-area-div").hasClass("d-none")) componentAction ("current-partner-dps-"+partnerId, "addClass", "unlock-info");
	    }else{
		  unlockPartner.critHit = false;
		  componentAction ("current-partner-dps-"+partnerId, "removeClass", "unlock-info");
		  if(!$("#partner-area-div").hasClass("d-none")) $("#current-partner-dps-"+partnerId).css({"color":""});
	    }
	  }
	  if(unlockPartner){
		totalPartnerDps = new Decimal(totalPartnerDps).mul(bonusPartnerTypePercentage);
		if(isLoopAction) unlockPartner.weaponDps = weaponDps;
	    if(type == "current"){
		  unlockPartner.dungeonDps = totalPartnerDps;
	    }else if(type == "tower"){
		  unlockPartner.towerDps = totalPartnerDps;
	    }
	  }
	  totalPartnerDps = totalPartnerDps.plus(weaponDps).mul(bonusPartnerCritPercentage).ceil();
	}
	return totalPartnerDps;
  };
  
  var calcTotalLaborPrize = function(laborId=-1,type){
	let totalLaborPrize = new Decimal(0);
	if(type == "current") totalLaborPrize = calcCurrentLaborPrize(laborId);
	else if(type == "next") totalLaborPrize = calcNextLaborPrize(laborId);
	let bonusLaborPrizePercentage = new Decimal(100).plus(hero.bonusCoinLaborYield).div(100);
	return totalLaborPrize.mul(bonusLaborPrizePercentage).ceil();
  };
  
  var calcNextSkillDamage = function (skillId){
	let nextSkillDamage = new Decimal(0);
	let loopNextLevel = 0;
	let currentSkillLevel = 0;
	let nextSkillLevel = 0;

	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let skillData = skill.find(item => item.id === skillId);

	if(unlockSkill){
		if(setting.levelUpgradeMultiplier == 1)loopNextLevel = setting.levelUpgradeMultiplier;
		else if(setting.levelUpgradeMultiplier >= 0){
		  let localMaxSkillLevelBuy = maxSkillLevelBuy.find(item => item.id === skillId);
	      loopNextLevel = localMaxSkillLevelBuy.maxLevelBuy;
		}
		
		currentSkillLevel = unlockSkill.level;
    }else loopNextLevel = 1;
	
	nextSkillLevel = currentSkillLevel + loopNextLevel;
	
	if(nextSkillLevel >= 10) nextSkillDamage = (10 * skillData.damageMultiplier) + skillData.baseDamage;
	else nextSkillDamage = ((nextSkillLevel-1) * skillData.damageMultiplier) + skillData.baseDamage;

	return nextSkillDamage;  
  };
  
  var setSequenceName = function(a){
	let textName = '';
	switch(a){
	  case 0:
	  case 20:
		textName = "1<sup>st</sup>";
		break;
	  case 1:
	  case 21:
		textName = "2<sup>nd</sup>";
		break;	
	  case 2:
	  case 22:
		textName = "3<sup>rd</sup>";
		break;
	  default:
		textName = (a+1)+"<sup>th</sup>";
		break;
	}
	return textName;
  };
  
  var runStealCoin = function(idleLoop=1){
	let stealCoinAmount = new Decimal(0);
	idleLoop *= 1;
	let godsData = gods.find(item => item.id === 0);
	let unlockGods = hero.unlockGods.find(item => item.id === 0);
	let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
	if(idleLoop == 1){
	  if(hero.bonusChanceStealCoinPercentage > 0){
	    let randomPercentage = Math.random()*100;
	    if(randomPercentage <= hero.bonusChanceStealCoinPercentage){
		  let totalRewardCoin = calcTotalRewardCoin();
	      stealCoinAmount = new Decimal(awakeningDamage).mul(totalRewardCoin).div(100).floor();
		  dungeonBattleLog = drawGodsImage(godsData.gender)+godsData.name + " steal " + numberFormat(stealCoinAmount) + '&nbsp;<img src="assets/images/coin.svg" class="image-size-2"></img><br/>';
		  writeDungeonBattleLog(dungeonBattleLog,stealCoinAmount);
	    }
	  }
	}else{
	  let successSteal = Math.floor(idleLoop * hero.bonusChanceStealCoinPercentage * 0.9 / 100);
	  let totalRewardCoin = calcTotalRewardCoin(true,true);
	  stealCoinAmount = new Decimal(awakeningDamage).mul(totalRewardCoin).mul(successSteal).div(100).floor();
	}
	if(stealCoinAmount.greaterThan(0)){
	  hero.coin = new Decimal(hero.coin).plus(stealCoinAmount).ceil();
	  hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(stealCoinAmount).ceil();
	  addedCoin = true;
	  updateHeroCoin();
	  saveGame();
	}
  };
  
  var runDpcToCoin = function(idleLoop=1){
	let convertCoinAmount = new Decimal(0);
	idleLoop *= 1;
	let godsData = gods.find(item => item.id === 1);
	let unlockGods = hero.unlockGods.find(item => item.id === 1);
	let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
		  
	if(idleLoop == 1){
	  if(hero.bonusChanceDpcToCoinPercentage > 0){
	    let totalDpc = new Decimal(calcTotalDpc());
	    let randomPercentage = Math.random()*100;
	    
	    if(randomPercentage <= hero.bonusChanceDpcToCoinPercentage){
	      convertCoinAmount = new Decimal(awakeningDamage).mul(totalDpc).div(100).floor();
		  dungeonBattleLog = drawGodsImage(godsData.gender)+godsData.name + " convert " + numberFormat(convertCoinAmount) + '&nbsp;<img src="assets/images/coin.svg" class="image-size-2"></img><br/>';
		  writeDungeonBattleLog(dungeonBattleLog,convertCoinAmount);
	    }
	  }
	}else{
	  let successConvert = Math.floor(idleLoop * hero.bonusChanceDpcToCoinPercentage * 0.9 / 100);
	  let totalDpc = new Decimal(calcTotalDpc());
	  let godsData = gods.find(item => item.id === 1);
	  convertCoinAmount = new Decimal(awakeningDamage).mul(totalDpc).mul(successConvert).div(100).floor();
	}
	if(convertCoinAmount.greaterThan(0)){
	  hero.coin = new Decimal(hero.coin).plus(convertCoinAmount).ceil();
	  hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(convertCoinAmount).ceil();
	  addedCoin = true;
	  updateHeroCoin();
	  saveGame();
	}
  };
  
  var runDpsToCoin = function(totalDps,idleLoop=1){
	let convertCoinAmount = new Decimal(0);
	idleLoop *= 1;
	let godsData = gods.find(item => item.id === 2);
	let unlockGods = hero.unlockGods.find(item => item.id === 2);
	let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
	if(idleLoop == 1){
	  if(hero.bonusChanceDpsToCoinPercentage > 0){
	    let randomPercentage = Math.random()*100;
	    if(randomPercentage <= hero.bonusChanceDpsToCoinPercentage){
	      convertCoinAmount = new Decimal(awakeningDamage).mul(totalDps).div(100).floor();
	      dungeonBattleLog = drawGodsImage(godsData.gender)+godsData.name + " convert " + numberFormat(convertCoinAmount) + '&nbsp;<img src="assets/images/coin.svg" class="image-size-2"></img><br/>';
		  writeDungeonBattleLog(dungeonBattleLog,convertCoinAmount);
	    }
	  }		
	}else{
	  let successConvert = Math.floor(idleLoop * hero.bonusChanceDpsToCoinPercentage * 0.9 / 100);
	  let godsData = gods.find(item => item.id === 2);
	  convertCoinAmount = new Decimal(awakeningDamage).mul(totalDps).mul(successConvert).div(100).floor();
	}
	if(convertCoinAmount.greaterThan(0)){
	  hero.coin = new Decimal(hero.coin).plus(convertCoinAmount).ceil();
	  hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(convertCoinAmount).ceil();
	  addedCoin = true;
	  updateHeroCoin();
	  saveGame();
	}
  };
  
  var runExtraCoin = function(totalRewardCoin){
	let extraCoinAmount = new Decimal(0);	
	if(hero.bonusChanceExtraCoinPercentage > 0){
	  let randomPercentage = Math.random()*100;	
	  let godsData = gods.find(item => item.id === 3);
	  let unlockGods = hero.unlockGods.find(item => item.id === 3);
	  let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
	  if(randomPercentage <= hero.bonusChanceExtraCoinPercentage){
		extraCoinAmount = new Decimal(awakeningDamage).mul(totalRewardCoin).div(100);
	    dungeonBattleLog = "(" + godsData.name + " give extra " + numberFormat(extraCoinAmount) + ")&nbsp;";
	  }
	}
	return extraCoinAmount;
  };
  
  var runExtraOrbs = function(totalOrbs){
	let extraOrbsAmount = new Decimal(0);
	if(hero.bonusChanceAddOrbsPrestigePercentage > 0){
	  let randomPercentage = Math.random()*100;
	  let godsData = gods.find(item => item.id === 4);
	  let unlockGods = hero.unlockGods.find(item => item.id === 4);
	  let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
	  if(randomPercentage <= hero.bonusChanceAddOrbsPrestigePercentage) extraOrbsAmount = new Decimal(awakeningDamage).mul(totalOrbs).div(100).floor();
	}
	return extraOrbsAmount;  
  };
  
  var runStealOrbs = function(){
	let extraOrbsAmount = new Decimal(0);
	if(hero.bonusChanceAddOrbsFloorPercentage > 0){
	  let randomPercentage = Math.random()*100;
	  let godsData = gods.find(item => item.id === 5);
	  let unlockGods = hero.unlockGods.find(item => item.id === 5);
	  let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
	  if(hero.maxFloor % godsData.buffTimer == 0){
	    if(randomPercentage <= hero.bonusChanceAddOrbsFloorPercentage){
	      let stealOrbsAmount = new Decimal(awakeningDamage);
	      hero.orbs = new Decimal(hero.orbs).plus(stealOrbsAmount).floor();
	      hero.totalGainOrbs = new Decimal(hero.totalGainOrbs).plus(stealOrbsAmount).floor();
	      updateHeroOrbs();
	      saveGame();
	    }
	  }
	}
  };
  
  var runCarriedCoin = function(lastCoin){
	let carriedCoin = new Decimal(0);
	if(hero.bonusChanceCarriedCoinPercentage > 0) carriedCoin = new Decimal(hero.bonusChanceCarriedCoinPercentage).mul(lastCoin).div(100).ceil();
	return carriedCoin;
  };
  
  var runUpgradeDisc = function(normalUpgradeFee){
	let upgradeFee = new Decimal(normalUpgradeFee);
	if(hero.bonusChanceUpgradeDiscountPercentage > 0){
	  let randomPercentage = Math.random()*100;
	  let godsData = gods.find(item => item.id === 7);
	  let unlockGods = hero.unlockGods.find(item => item.id === 7);
	  let awakeningDamage = unlockGods.awakeningLevel * godsData.awakeningMultiplier;
	  if(randomPercentage <= hero.bonusChanceUpgradeDiscountPercentage){
		upgradeFee = new Decimal(awakeningDamage).mul(upgradeFee).div(100).ceil(); 
	  }
	}
	return upgradeFee;
  };
  
  var increaseGodsDpc = function(currentDpc){
	let totalDpc = new Decimal(currentDpc);
	if(hero.bonusGodsDpcPercentage > 0) totalDpc = new Decimal(100+hero.bonusGodsDpcPercentage).mul(currentDpc).div(100).floor();
	return totalDpc;
  };
  
  var increaseGodsDps = function(currentDps){
	let totalDps = new Decimal(currentDps);
	if(hero.bonusGodsDpsPercentage > 0) totalDps = new Decimal(100).plus(hero.bonusGodsDpsPercentage).mul(currentDps).div(100).floor();
	return totalDps;
  };
  
  var hitGodsDamage = function(){
	let totalHitDamage = new Decimal(0);
	dungeonBattleLog = "";
	totalHitDamage = new Decimal(hitHighestDpc()).plus(hitHighestDps()).plus(hitCurrentSlashDamage()).plus(hitCurrentDpc()).plus(hitCurrentDps());
	if(dungeonBattleLog != "") dungeonBattleLog += " : "+numberFormat(totalHitDamage);
	return totalHitDamage;
  };
  
  var hitHighestDpc = function(){
	let hitDamage = new Decimal(0);
	if(hero.bonusChanceHitHighestDpcPercentage > 0){
	  let godsData = gods.find(item => item.id === 10);
	  let unlockGods = hero.unlockGods.find(item => item.id === 10);
	  if(countHitHighestDpc == 0){
	    hitDamage = new Decimal(hero.highestDpc).mul(hero.bonusChanceHitHighestDpcPercentage).div(100).floor();
		if(dungeonBattleLog == "") dungeonBattleLog += godsData.name;
	    else dungeonBattleLog += ", " + godsData.name;
		countHitHighestDpc++; 
	  }
	}
	return hitDamage;
  };
  
  var hitHighestDps = function(){
	let hitDamage = new Decimal(0);
	if(hero.bonusChanceHitHighestDpsPercentage > 0){
	  let godsData = gods.find(item => item.id === 11);
	  let unlockGods = hero.unlockGods.find(item => item.id === 11);
	  if(countHitHighestDps == 0){
	    hitDamage = new Decimal(hero.highestDps).mul(hero.bonusChanceHitHighestDpsPercentage).div(100).floor();
		if(dungeonBattleLog == "") dungeonBattleLog += godsData.name;
		else dungeonBattleLog += ", " + godsData.name;
		countHitHighestDps++;
	  }
	}
	return hitDamage;
  };
  
  var formulaSlashDamage = function(){
	return new Decimal(calcTotalDpc()).plus(hero.totalDps).mul(2).floor();  
  };
  
  var hitCurrentSlashDamage = function(){
	let hitDamage = new Decimal(0);
	if(hero.bonusChanceHitCurrentSlashPercentage > 0){
	  let godsData = gods.find(item => item.id === 12);
	  let unlockGods = hero.unlockGods.find(item => item.id === 12);
	  if(countHitCurrentSlash == 0){
	    let slashDamage = formulaSlashDamage();
	    hitDamage = new Decimal(slashDamage).mul(hero.bonusChanceHitCurrentSlashPercentage).div(100);
		hitDamage = new Decimal(100).plus(hero.enhanceSlashDamagePercentage).div(100).mul(hitDamage).floor();
		if(dungeonBattleLog == "") dungeonBattleLog += godsData.name;
		else dungeonBattleLog += ", " + godsData.name;
		countHitCurrentSlash++;
	  }
	}
	return hitDamage;  
  };
  
  var hitCurrentDpc = function(){
	let hitDamage = new Decimal(0);
	if(hero.bonusChanceHitCurrentDpcPercentage > 0){
	  let godsData = gods.find(item => item.id === 13);
	  let unlockGods = hero.unlockGods.find(item => item.id === 13);
	  if(countHitCurrentDpc == 0){
	    hitDamage = new Decimal(calcTotalDpc()).mul(hero.bonusChanceHitCurrentDpcPercentage).div(100).floor();
		if(dungeonBattleLog == "") dungeonBattleLog += godsData.name;
		else dungeonBattleLog += ", " + godsData.name;
		countHitCurrentDpc++;
	  }
	}
	return hitDamage;
  };
  
  var hitCurrentDps = function(){
	let hitDamage = new Decimal(0);
	if(hero.bonusChanceHitCurrentDpsPercentage > 0){
	  let godsData = gods.find(item => item.id === 14);
	  let unlockGods = hero.unlockGods.find(item => item.id === 14);
	  if(countHitCurrentDps == 0){
	    hitDamage = new Decimal(hero.totalDps).mul(hero.bonusChanceHitCurrentDpsPercentage).div(100).floor();
		if(dungeonBattleLog == "") dungeonBattleLog += godsData.name;
		else dungeonBattleLog += ", " + godsData.name;
		countHitCurrentDps++;
	  }
	}
	return hitDamage;
  };
  
  var confirmWithdrawTokenInBank = function(){
	$("#modalWithdrawToken").modal('show');
  };
  
  var withdrawTokenInBank = function(){
	let tokenInBank = new Decimal(hero.tokenInBank);
	if(tokenInBank.greaterThan(0)) hero.token = new Decimal(hero.token).plus(hero.tokenInBank);
	hero.tokenInBank = new Decimal(0);
	saveGame();
	updateSavingBalance();
  };
  
  var updateTab = function(menuName=""){ 
	let tabName = '';
	if(menuName!= ""){
	  lastActiveMenu = menuName;
	  removeNotifIcon(menuName+"-tab-button");
	}
	componentAction ("log-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	componentAction ("hero-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	componentAction ("partner-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	componentAction ("skill-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	componentAction ("labor-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	componentAction ("shop-tab-button", "updateClass", "tab-button-active,tab-button-unactive");
	
	componentAction ("dungeon-battle-log-area-div", "addClass", "d-none");
	componentAction ("hero-area-div", "addClass", "d-none");
	componentAction ("partner-area-div", "addClass", "d-none");
	componentAction ("skill-area-div", "addClass", "d-none");
	componentAction ("labor-area-div", "addClass", "d-none");
	componentAction ("shop-area-div", "addClass", "d-none");
	
	$("#dungeon-battle-log-area-div").empty();
	switch (menuName) {
	  case 'log':
	    tabName = "log-tab-button";
		componentAction ("buy-multiplier-div", "updateClass", "d-flex,d-none");
		calcHeightLogBattleDiv("dungeon-battle-log-area-div");
		menuName = "dungeon-battle-log";
		break;
	  case 'hero':
	    tabName = "hero-tab-button";
		componentAction ("buy-multiplier-div", "updateClass", "d-none,d-flex");
		break;
	  case 'partner':
	    tabName = "partner-tab-button";
		componentAction ("buy-multiplier-div", "updateClass", "d-none,d-flex");
		break;
      case 'skill':
	    tabName = "skill-tab-button";
		componentAction ("buy-multiplier-div", "updateClass", "d-none,d-flex");
		break;
	  case 'labor':
	    tabName = "labor-tab-button";
		componentAction ("buy-multiplier-div", "updateClass", "d-none,d-flex");
		break;	
      case 'shop':
	    tabName = "shop-tab-button";
		componentAction ("buy-multiplier-div", "updateClass", "d-flex,d-none");
		break;		
	};
	
	if(menuName != ""){
	  componentAction (tabName, "updateClass", "tab-button-unactive,tab-button-active");
	  componentAction (menuName+"-area-div", "removeClass", "d-none");
	  initDisplay();
	  
	  if(tutorialAnimation == "world3" && currentTutorialStep == 1 && menuName == "partner"){
		nextTutorial();
		if(hero.countPartner == 0) hero.coin = new Decimal(partner[0].basePrice).plus(hero.coin);
		updateHeroCoin();
	  }
	  checkCssSetting();
	}
  };
  
  var clickDPC = function() {
	let start = Date.now();
	let diffMiliSec = start - lastDateTimeClick;
	if(diffMiliSec > 85){
	  lastDateTimeClick = start;
	  hero.totalClick = new Decimal(hero.totalClick).plus(1);
	  
	  if(hero.fastestClickInterval > diffMiliSec) hero.fastestClickInterval = diffMiliSec;
	  if(tutorialAnimation == "world1" && currentTutorialStep == 3) nextTutorial();
	  hitDPC();
	};		
  };
  
  var hitDPC = function (){
	critDpc = false;
	let maxHpEnemy = new Decimal(enemy.maxHp);
	let totalDPC = new Decimal(0);
	
	if(setting.cheat == 1) totalDPC = new Decimal(currentEnemyHP);
	else totalDPC = new Decimal(calcTotalDpc(true));
	
	currentEnemyHP = currentEnemyHP.sub(totalDPC);
	let newHPBarWidth = new Decimal(currentEnemyHP).div(maxHpEnemy).mul(100);
	dungeonBattleLog = '<img src="assets/images/dpc.svg" class="image-size">Total DPC : '+numberFormat(totalDPC) +"<br/>";
	writeDungeonBattleLog(dungeonBattleLog);
	componentAction ("current-enemy-hp", "replaceText", numberFormat(currentEnemyHP));
	componentAction ("progress-bar", "animate", newHPBarWidth);
	
	if(critDpc){
	  updateHeroDpc(totalDPC);
	  if(intervalCritDpc > 0) intervalCritDpc = clearInterval(intervalCritDpc);
	  intervalCritDpc = setInterval (function (){
		intervalCritDpc = clearInterval(intervalCritDpc);
		critDpc = false;
		updateHeroDpc();
	  },300);
	}
	checkAction(true);
  };
  
  var runBillionaire = function (skillId) {
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let skillDamage = unlockSkill.damage;
	let rewardCoin = calcTotalRewardCoin();
	rewardCoin = rewardCoin.mul(skillDamage).div(100).floor();
	hero.coin = new Decimal(hero.coin).plus(rewardCoin).ceil();
	hero.totalGainCoin = new Decimal(hero.totalGainCoin).plus(rewardCoin).ceil();
	addedCoin = true;
	dungeonBattleLog = '<img src="assets/images/coin.svg" class="image-size"></img>&nbsp;Success steal '+numberFormat(rewardCoin)+'&nbsp;'+dungeonBattleLog+'<img src="assets/images/coin.svg" class="image-size-2"></img><br/>';
	writeDungeonBattleLog(dungeonBattleLog,rewardCoin);
	updateHeroCoin();
  };
  
  var runGrimReaper = function (skillId) {
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	let maxHpEnemy = new Decimal(enemy.maxHp);
	let skillDamage = unlockSkill.damage;
	let randomPercentage = Math.random()*100;

	if(hero.floor % enemy.bossFloor == 0)skillDamage -= 10;
	
	if(randomPercentage <= skillDamage && hero.floor < hero.highestFloor){
	  currentEnemyHP = new Decimal(0);
	}else{
	  let slashDamage = formulaSlashDamage();
	  currentEnemyHP = currentEnemyHP.sub(slashDamage);
	}
	let newHPBarWidth = new Decimal(currentEnemyHP).div(maxHpEnemy).mul(100);
	componentAction ("current-enemy-hp", "replaceText", numberFormat(currentEnemyHP));
	componentAction ("progress-bar", "animate", newHPBarWidth);
	saveGame();
	checkAction(true);
  };
  
  var useSkill = function (skillId,useTicket=false){
	let runSkill = true;
	let unlockSkill = hero.unlockSkill.find(item => item.id === skillId);
	if(unlockSkill){
	  if(unlockSkill.isCooldown == false || useTicket == true){
		if(useTicket) unlockSkill.useTicket = true;
	  }else{
		if(unlockSkill.isActive == false) runSkill = false;
	  }
	  if(unlockSkill.isCooldown){
		let searchSkillInterval = skillCooldownInterval.find(item => item.id === skillId);
		clearInterval(searchSkillInterval.interval);
	  }
	}
	if(runSkill){
	    switch(skillId){
	      case 0:
	        startAutoClickerInterval(skillId,useTicket);
		    break;
	      case 1:
	        startPowerShotInterval(skillId,useTicket);
		    break;
	      case 2:
	        startSpecialForceInterval(skillId,useTicket);
		    break;
	      case 3:
	        startLuckyCoinInterval(skillId,useTicket);
		    break;
	      case 4:
	        startBillionaireInterval(skillId,useTicket);
		    break;
		  case 5:
	        startGrimReaperInterval(skillId,useTicket);
		    break;  
	    };
	    saveGame();
	}
  };
  
  var insertAvailableCompanion = function(){
	if(availableCompanion.length > 0) availableCompanion = [];
	let canInsert = false;
	for(let i=0;i < companion.length; i++){
	  let companionId = companion[i].id;
	  let unlockCompanion = hero.unlockCompanion.find(item => item.id === companionId);
	  let companionData = companion.find(item => item.id === companionId);
	  
	  if(!unlockCompanion) canInsert = true;
	  else if(unlockCompanion.level < companionData.maxLevel || companionData.maxLevel == 0) canInsert = true;
	  
	  if(canInsert){
		let companionChance = 6 - companionData.tier;
		for(let j=0; j<companionChance; j++){
		  availableCompanion.push(companionId);
		}
	  }
	}
  };
  
  var insertAutoSellEquipment = function(){
	if(hero.settingAutoSellEquipment.length < gradeEquipment.length){
	  for(let i=0;i<gradeEquipment.length;i++){
		let heroSettingAutoSellEquipment = hero.settingAutoSellEquipment.find(item => item.id === gradeEquipment[i].id);
		if(!heroSettingAutoSellEquipment){
		  let newObjAutoSellEquipment = {
			id: gradeEquipment[i].id,
			autoSell: false,
		  };
		  hero.settingAutoSellEquipment.push(newObjAutoSellEquipment);
		}
	  }
	}  
  };
  
  var insertAvailableGods = function(){
	if(availableGods.length > 0) availableGods = [];
	let canInsert = false;
	for(let i=0;i < gods.length; i++){
	  let godsId = gods[i].id;
	  let unlockGods = hero.unlockGods.find(item => item.id === godsId);
	  let godsData = gods.find(item => item.id === godsId);
	  
	  if(!unlockGods) canInsert = true;
	  else{
		let godsMaxLevel = unlockGods.awakeningLevel * godsData.maxLevel;  
		if(unlockGods.level < godsMaxLevel) canInsert = true;
	  }
	  if(canInsert){
		let godsChance = 7 - godsData.tier;
		for(let j=0; j<godsChance; j++){
		  availableGods.push(godsId);
		}
	  }
	}
  };
  
  var insertAvailableArtifact = function(){
	if(availableArtifact.length > 0) availableArtifact = [];
	let unlockNewFeatureData = unlockNewFeature.filter(item => item.unlockReqFloor > hero.highestFloor);
	let tempArtifact = artifact;
	for(let i=0;i<unlockNewFeatureData.length;i++){
	  tempArtifact = tempArtifact.filter(item => item.feature !== unlockNewFeatureData[i].name);
	}
	for(let i=0;i < tempArtifact.length; i++){
	  let artifactId = tempArtifact[i].id;
	  let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
	  let artifactData = artifact.find(item => item.id === artifactId);
	  
	  if(!unlockArtifact){
		let artifactChance = 5 - artifactData.tier;
		for(let j=0; j<artifactChance; j++){
		  availableArtifact.push(artifactId);
		}
	  }
	}
  };
  
  var insertAvailableArtifactForDebug = function(artifactArray){
	let artifactArrayId = artifactArray.split(",");
	if(availableArtifact.length > 0) availableArtifact = [];
	
	for(let i=0; i<artifactArrayId.length; i++){
	  let artifactId = parseInt(artifactArrayId[i],10);
	  let artifactData = artifact.find(item => item.id === artifactId);
	  let unlockArtifact = hero.unlockArtifact.find(item => item.id === artifactId);
	  
	  if(!unlockArtifact){
		let artifactChance = 5 - artifactData.tier;
		
		for(let j=0; j<artifactChance; j++){
		  availableArtifact.push(artifactId);
		}
	  }
	}
  };
  
  var insertSellArtifact = function(artifactId){
	let artifactData = artifact.find(item => item.id === artifactId);
	let loopInsert = 5 - artifactData.tier;
	for(let i=0;i<loopInsert;i++){
	  availableArtifact.push(artifactId);	
	}
  };
  
  var showRandomArtifact = function(isReroll=false){
	let rerollFee = new Decimal(calcNextUnlockArtifactFee()).div(2).mul(100-hero.bonusArtifactRerollFeePercentage).div(100).ceil();
    let tempAvailableArtifact = availableArtifact;
	let cleanArtifact = cleanDuplicateArray(availableArtifact);
	let randomArtifactId = [];
	let countRandomArtifact = 0;
	let heroOrbs = new Decimal(hero.orbs);
	
	if(isReroll && heroOrbs.greaterThanOrEqualTo(rerollFee)){
	  hero.randomArtifactId = [];
	  hero.orbs = new Decimal(hero.orbs).sub(rerollFee);
	  hero.totalSpentOrbs = new Decimal(hero.totalSpentOrbs).plus(rerollFee);
	}
	componentAction ("reroll-artifact-fee", "replaceText", numberFormat(rerollFee)+" Orbs");
	componentAction ("unlock-artifact-confirm", "replaceText", numberFormat(calcNextUnlockArtifactFee())+" Orbs");
	componentAction ("modal-orbs", "replaceText", numberFormat(hero.orbs));
	componentAction("list-artifact-div","clearText","");
	if(hero.randomArtifactId.length == 0){
	  randomArtifactId = [];
	  if(hero.totalCountPrestige == 1 && hero.tutorialGroupId == 3 && hero.countArtifact == 0){
		randomArtifactId.push(2);
		randomArtifactId.push(3);
		randomArtifactId.push(4);
		countRandomArtifact+=3;
		componentAction("footer-modal-random-artifact","updateClass","d-flex,d-none");
		componentAction("reroll-artifact-text","addClass","d-none");
	  }else{
	    while(randomArtifactId.length < setting.countArtifactForChoose && randomArtifactId.length < cleanArtifact.length){
	      let unlockArtifactId = tempAvailableArtifact[Math.floor(Math.random() * tempAvailableArtifact.length)];
	      let searchIndex = randomArtifactId.indexOf(unlockArtifactId);
	      if (searchIndex === -1){
		    randomArtifactId.push(unlockArtifactId);
		    countRandomArtifact++;
	      }
	    }
		componentAction("footer-modal-random-artifact","updateClass","d-none,d-flex");
		componentAction("reroll-artifact-text","removeClass","d-none");
	  }
	  hero.randomArtifactId = randomArtifactId;
	  saveGame();
	}else randomArtifactId = hero.randomArtifactId;
	
	for(let i=0;i<randomArtifactId.length;i++){
	  let artifactData = artifact.find(item => item.id === randomArtifactId[i]);
	  
	  let appendListArtifactDiv = '<div class="row border-top rounded-card m-1 p-1">';
	  appendListArtifactDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 v-center-flex middle-content"><img src="assets/images/'+artifactData.type.toLowerCase()+'.svg" title="'+artifactData.type+'" class="image-size"></img>&nbsp;' + artifactData.name +'</div>';
	  appendListArtifactDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">' + artifactData.description + ' ' + artifactData.baseDamage + artifactData.descDamage + ' / level</div>';		  
	  appendListArtifactDiv += '<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12">';
	  appendListArtifactDiv += '<button id="random-artifact-button-' + artifactData.id + '" class="upgrade-level-button" value="' + artifactData.id + '">Unlock - ' + artifactData.name + '</button>';
	  appendListArtifactDiv += '</div>';
	  appendListArtifactDiv += '</div>';

	  $("#list-artifact-div").append(appendListArtifactDiv).off('click','#random-artifact-button-'+artifactData.id).on('click','#random-artifact-button-'+artifactData.id,function(){
	    confirmUnlockNewArtifact(artifactData.id); 
	  });
	  showArtifactArea();
	}
  };
  
  var confirmUnlockNewArtifact = function(artifactId){
	let artifactData = artifact.find(item => item.id === artifactId);
	componentAction ("selected-unlock-artifact", "replaceText", artifactData.name);
	componentAction ("selected-unlock-fee", "replaceText", numberFormat(calcNextUnlockArtifactFee()));
	$("#modalRandomArtifactConfirm").modal('hide');
	$("#modalUnlockArtifactConfirm").modal("show");
	componentAction ("unlock-artifact-ok-button", "inputText", artifactId);
  };
  
  var unlockNewArtifact = function(artifactId=-1){
	let unlockArtifactId =  parseInt(artifactId,10);
	let unlockFee = new Decimal(calcNextUnlockArtifactFee()).mul(100-hero.bonusArtifactUnlockFeePercentage).div(100).ceil();
	let heroOrbs = new Decimal(hero.orbs);
	let artifactDamage = new Decimal(hero.artifactDamagePercentage);
	
	if(heroOrbs.greaterThanOrEqualTo(unlockFee)){
	  if(availableArtifact.length > 0){
	    let artifactData = artifact.find(item => item.id === unlockArtifactId);
		let unlockArtifact = hero.unlockArtifact.find(item => item.id === unlockArtifactId);
		if(!unlockArtifact){
	      let newObjArtifact = {
	        id: unlockArtifactId,
	        level: 1,
	        grade: 0,
	        damage: artifactData.baseDamage,
			type: artifactData.type,
			name: artifactData.name,
	      };
	      hero.unlockArtifact.push(newObjArtifact);
		  if(hero.totalArtifactUnlock < hero.countArtifact) hero.totalArtifactUnlock = hero.countArtifact;
	      hero.countArtifact++;	  
		  hero.totalSpentOrbs = new Decimal(hero.totalSpentOrbs).plus(unlockFee);
		  hero.totalArtifactUnlock++;	
		  hero.orbs = heroOrbs.sub(unlockFee);
		  hero.randomArtifactId = [];
		  calculateAllArtifactDamage();
		  saveGame();
		  initDisplay();
	      showArtifactArea();
		}
		removeArtifactId(unlockArtifactId);
	  }	
	}
	checkDuplicateArtifact();
  };
  
  var removeArtifactId = function(unlockArtifactId){
	let unlockIndex = availableArtifact.indexOf(unlockArtifactId);
	if (unlockIndex !== -1){
	  availableArtifact.splice(unlockIndex, 1);
	  removeArtifactId(unlockArtifactId);
	}
  };
  
  var calcReincarnateFreeFragment = function(awakeningLevel,maxLevel){
	let startLevel = ((awakeningLevel-1) * maxLevel) + 1;
	let endLevel = awakeningLevel * maxLevel;
	let totalFragment = 0;
	
	for(let i=startLevel;i<=endLevel;i++){
	  totalFragment += Math.ceil(i/5)*10;
	}
	return totalFragment;
  };
  
  var calcHighestLevel = function(unlockItem){
	switch(unlockItem.itemType.toLowerCase()){
	  case "weapon":
	  let gradeEquipmentData = gradeEquipment.find(item => item.id === unlockItem.gradeId);
	  let enhanceData = enhanceLevelEquipment.find(item => item.id === gradeEquipmentData.maxEnhanceLevel);
	  return gradeEquipmentData.maxEnhanceLevel+'='+enhanceData.maxLevel;
	  break;
	};
  };
  
  var calcHighestValue = function(unlockItem, type){
	switch(unlockItem.itemType.toLowerCase()){
	  case "weapon":
		let gradeEquipmentData = gradeEquipment.find(item => item.id === unlockItem.gradeId);
		let enhanceData = enhanceLevelEquipment.filter(item => item.id <= gradeEquipmentData.maxEnhanceLevel && item.id >= unlockItem.enhanceLevel);
		let value = new Decimal(0);
		
		if(type == "min") value = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.minValue);
		else if(type == "max") value = new Decimal(10).pow(unlockItem.exponentValue).mul(unlockItem.maxValue);

		for(let i=0;i<enhanceData.length;i++){
		  let upgradeBonusPercentage = enhanceData[i].upgradeBonusPercentage;
		  value = new Decimal(100+upgradeBonusPercentage).div(100).pow(enhanceData[i].maxLevel-unlockItem.upgradeLevel).mul(value);		  
		  if(unlockItem.enhanceLevel < enhanceData.maxLevel){
			let enhanceBonusPercentage = enhanceData[i].enhanceBonusPercentage;
			value = new Decimal(value).mul(100+enhanceBonusPercentage).div(100);			
		  }
		}
		return value;
		break;
	};
  };
  
  var confirmReincarnateGods = function(godsId){
	let godsData = gods.find(item => item.id === godsId);
	let unlockGods = hero.unlockGods.find(item => item.id === godsId);
	let unlockFragment = hero.unlockFragment.find(item => item.id === godsId);
	let targetFragment = setting.baseReincarnateFragment * unlockGods.awakeningLevel;
	let notifText = '';
	let godsGender = '';
	
	switch(godsData.gender){
	  case "M":
	    godsGender = "Gods";
		break;
	  case "F":
	    godsGender = "Goddesss";
		break;	
	}
	
	if(unlockGods.awakeningLevel >= godsData.maxReincarnateLevel){
	  notifText = 'Your '+godsData.name+" "+godsGender+" already reach max reincarnate level";
	}else if(unlockFragment.count < targetFragment){
	  notifText = 'Your '+godsData.name+" "+godsGender+" don't have enough fragment";
	}else{
	  let totalFragment = calcReincarnateFreeFragment(unlockGods.awakeningLevel, godsData.maxLevel);
	  let godsDesc = godsData.desc;
	  if(godsData.awakeningMultiplier > 0) godsDesc = godsDesc.replace("x",godsData.levelMultiplier).replace("z",numberFormat((unlockGods.awakeningLevel+1)*godsData.awakeningMultiplier));

	  notifText = "Your "+godsData.name+" "+godsGender+" will reincarnate to next level\n";
	  if(godsData.awakeningMultiplier > 0){
		notifText += "But your "+godsGender+" benefit will become :\n\n";
	    notifText += godsDesc;
	  }
	}
	componentAction("reincarnate-text", "replaceText", notifText);
	componentAction("reincarnate-ok-button", "inputText", godsId);
	$("#modalConfirmReincarnateGods").modal("show");
  };
  
  var reincarnateGods = function(e){
	let godsId = parseInt(e,10);
	let godsData = gods.find(item => item.id === godsId);
	let unlockGods = hero.unlockGods.find(item => item.id === godsId);
	let unlockFragment = hero.unlockFragment.find(item => item.id === godsId);
	let targetFragment = setting.baseReincarnateFragment * unlockGods.awakeningLevel;
	
	if(unlockGods.awakeningLevel < godsData.maxReincarnateLevel && unlockFragment.count >= targetFragment){
	  let totalFragment = calcReincarnateFreeFragment(unlockGods.awakeningLevel, godsData.maxLevel);
	  unlockFragment.count = unlockFragment.count - targetFragment;
	  unlockGods.awakeningLevel += 1;
	  unlockGods.level += 1;
	  if(godsData.awakeningMultiplier > 0) unlockGods.damage = godsData.levelMultiplier;
	  else unlockGods.damage += godsData.levelMultiplier;
	  saveGame();
	  calculateAllActiveGods();
	  showGodsArea(godsId);
	}
  };
  
  var summonGods = function(e){
	let innerText = e.innerText;
	let godsId = parseInt(e.value, 10);
	let unlockFragment = hero.unlockFragment.find(item => item.id === godsId);
	let godsData = gods.find(item => item.id === godsId);
	let unlockGods = hero.unlockGods.find(item => item.id === godsId);
	let godsLevel = 0;
	let godsMaxLevel = godsData.maxLevel;
	
	if(unlockGods){
	  godsLevel = unlockGods.level;
	  godsMaxLevel = unlockGods.awakeningLevel * godsData.maxLevel;
	}
	
	if(innerText.toLowerCase() == "reincarnate") confirmReincarnateGods(godsId);
	else{
	  let targetFragment = Math.ceil((godsLevel+1)/5)*10;
	  if(unlockFragment.count >= targetFragment){
	    if(unlockGods){
		  if(unlockGods.level < godsMaxLevel){
	        unlockGods.level++;
	        unlockGods.damage += godsData.levelMultiplier;
		  }
	    }else{
	      let newObjGods = {
	        id: godsId,
	        level: 1,
		    awakeningLevel: 1,
	        damage: godsData.levelMultiplier,
		    grade: 0,
		    isActive: false
	      };
	      hero.unlockGods.push(newObjGods);
	    }
	    unlockFragment.count -= targetFragment;
	    updateTask(24);
	  }
	  calculateAllActiveGods();
	  showGodsArea(godsId);
	}
  };
  
  var activateGods = function(e){
	let godsId = parseInt(e.value, 10);
	let unlockGods = hero.unlockGods.find(item => item.id === godsId);
	
	if(unlockGods){
	  let activeGodsCount = checkActiveGods();
	  let slotId = activeGodsCount - 1;
	  if(unlockGods.isActive){
		unlockGods.isActive = false;
		godsId = null;
		updateDwellersStatus("cleric", slotId, "complete");
	  }else{
		if(activeGodsCount < hero.activeGodsSlot){
		  unlockGods.isActive = true;
		  updateDwellersStatus("cleric", (slotId+1), "start");
		}else{
		  $("#modalNotification").modal('show');
	      $('#notification-ok-button').val(false);
	      componentAction ("notification-text", "replaceText", "You only have " + hero.activeGodsSlot + " Gods slot. Please deactive other gods first");
		}
	  }
	}
	saveGame();
	calculateAllActiveGods();
	showGodsArea(godsId);
  };
  
  var checkActiveGods = function(){
	let count = 0;
	for(let i=0;i<hero.unlockGods.length;i++){
	  if(hero.unlockGods[i].isActive) count++;
	  else hero.unlockGods[i].isActive = false;
	}
	return count;
  };
  
  var createDropDownList = function(arrayValueList, componentName){
	let backgroundClass = "";
	if(hero.settingBackground.toLowerCase() == "dark") backgroundClass = "dark-mode";
    let dropDownListDiv = '<select name="'+componentName+'" id="'+componentName+'" class="drop-down-list '+backgroundClass+'">';
	for(let i=0;i<arrayValueList.length;i++){
	  let valueList = arrayValueList[i].split("=");
	  dropDownListDiv += '<option value="'+valueList[0]+'">'+valueList[1]+'</option>';
	}
	dropDownListDiv += '</select>';
	return dropDownListDiv;
  };
  
  var createItemFilter = function(){
	let cleanItemFilter = removeDuplicateArray(hero.unlockItem, e => e.itemType);  
	let arrayItemFilter = [];
	arrayItemFilter.push("all=All");
	for(let i=0;i<cleanItemFilter.length;i++){
	  let itemType = cleanItemFilter[i].itemType;
	  arrayItemFilter.push(itemType+"="+firstLetterFormat(itemType,"uppercase"));
	}
	return createDropDownList(arrayItemFilter,"item-filter");
  };
  
  var filterItem = function(selectedFilterItem,tabName){
	if(selectedFilterItem==null) selectedFilterItem = $("#item-filter").val().toLowerCase();
	updateWarehouseArea();
  };
  
  var createItemSorting = function(){
	let arrayItemSorting = [];
	arrayItemSorting.push("enhance=Enhance Level");
	arrayItemSorting.push("grade=Grade");
	arrayItemSorting.push("min=Min Value");
	arrayItemSorting.push("max=Max Value");
	arrayItemSorting.push("name=Name");
	arrayItemSorting.push("partner=Partner");
	arrayItemSorting.push("upgrade=Upgrade Level");
	
	return createDropDownList(arrayItemSorting,"item-sorting");
  };
  
  var sortingItem = function(e){
	let selectedItemSorting = $("#item-sorting").val();
	switch(selectedItemSorting){
	  case "enhance":
	    hero.unlockItem.sort((a, b) => (a.enhanceLevel < b.enhanceLevel) ? 1 : (a.enhanceLevel === b.enhanceLevel) ? ((a.partnerType > b.partnerType) ? 1 : (a.partnerType === b.partnerType) ? ((a.id > b.id) ? 1 : -1) : -1) : -1);  
		break;
	  case "grade":
	    hero.unlockItem.sort((a, b) => (a.gradeId < b.gradeId) ? 1 : (a.gradeId === b.gradeId) ? ((a.partnerType > b.partnerType) ? 1 : (a.partnerType === b.partnerType) ? ((a.id > b.id) ? 1 : -1) : -1) : -1);  
		break;
	  case "min":
	    hero.unlockItem.sort((a, b) => (new Decimal(a.minValue).lessThan(new Decimal(b.minValue))) ? 1 : (new Decimal(a.minValue).equals(new Decimal(b.minValue))) ? ((a.partnerType > b.partnerType) ? 1 : -1) : -1);  
		break;
	  case "max":
	    hero.unlockItem.sort((a, b) => (new Decimal(a.maxValue).lessThan(new Decimal(b.maxValue))) ? 1 : (new Decimal(a.maxValue).equals(new Decimal(b.maxValue))) ? ((a.partnerType > b.partnerType) ? 1 : -1) : -1);  
		break;
	  case "name":
	    hero.unlockItem.sort((a, b) => (a.name > b.name) ? 1 : (a.name === b.name) ? ((a.partnerType > b.partnerType) ? 1 : -1) : -1);  
		break;
	  case "partner":
	    hero.unlockItem.sort((a, b) => (a.partnerType > b.partnerType) ? 1 : (a.partnerType === b.partnerType) ? ((a.gradeId < b.gradeId) ? 1 : -1) : -1);  
		break;
	  case "upgrade":
	    hero.unlockItem.sort((a, b) => (a.upgradeLevel < b.upgradeLevel) ? 1 : (a.upgradeLevel === b.upgradeLevel) ? ((a.partnerType > b.partnerType) ? 1 : -1) : -1);  
		break;
	};
	if(!$("#warehouse-div").hasClass("d-none")){
	  updateWarehouseArea();
	}
  };
  
  var createArtifactFilter = function(){
	let cleanArtifactFilter = removeDuplicateArray(hero.unlockArtifact, e => e.type);
	cleanArtifactFilter.sort((a, b) => (a.type > b.type) ? 1 : -1); 
	let arrayArtifactFilter = [];
	arrayArtifactFilter.push("all=All");
	for(let i=0;i<cleanArtifactFilter.length;i++){
	  let itemType = cleanArtifactFilter[i].type;
	  arrayArtifactFilter.push(itemType+"="+firstLetterFormat(itemType,"uppercase"));
	}
	return createDropDownList(arrayArtifactFilter,"artifact-filter");
  };
  
  var filterArtifact = function(selectedFilterArtifact){
	if(selectedFilterArtifact==null) selectedFilterArtifact = $("#artifact-filter").val().toLowerCase();
	updateArtifactArea();
  };
  
  var createArtifactSorting = function(){
	let arrayArtifactSorting = [];
	arrayArtifactSorting.push("name=Name");
	arrayArtifactSorting.push("type=Type");
	arrayArtifactSorting.push("price=Upgrade Fee");
	arrayArtifactSorting.push("upgrade=Upgrade Level");
	
	return createDropDownList(arrayArtifactSorting,"artifact-sorting");
  };
  
  var sortingArtifact = function(e){
	let selectedArtifactSorting = $("#artifact-sorting").val();
	if(selectedArtifactSorting == null || selectedArtifactSorting == undefined) selectedArtifactSorting = "type";
	switch(selectedArtifactSorting){
	  case "type":
	    hero.unlockArtifact.sort((a, b) => (a.type > b.type) ? 1 : (a.type === b.type) ? ((a.name > b.name) ? 1 : -1) : -1);  
		break;
	  case "price":
	    hero.unlockArtifact.sort((a, b) => (a.upgradeFee.greaterThan(b.upgradeFee)) ? 1 : (a.upgradeFee.equals(b.upgradeFee)) ? ((a.name > b.name) ? 1 : -1) : -1); 
		break;
	  case "name":
	    hero.unlockArtifact.sort((a, b) => (a.name > b.name) ? 1 : (a.name === b.name) ? ((a.type > b.type) ? 1 : -1) : -1);  
		break;
	  case "upgrade":
	    hero.unlockArtifact.sort((a, b) => (a.level < b.level) ? 1 : (a.level === b.level) ? ((a.type > b.type) ? 1 : -1) : -1);  
		break;
	};
	if(!$("#artifact-div").hasClass("d-none")){
	  updateArtifactArea();
	}
  };
  
  var switchTutorPage = function(tutorNumber){
	componentAction ("tutor-div-"+activeTutorNumber, "updateClass", "tab-button-active,tab-button-unactive");
	componentAction ("tutor-div-"+tutorNumber, "updateClass", "tab-button-unactive,tab-button-active");
	
	componentAction ("tutor-content-div-"+tutorNumber, "removeClass", "d-none");
	if(activeTutorNumber != tutorNumber) componentAction ("tutor-content-div-"+activeTutorNumber, "addClass", "d-none");
	
	if(tutorNumber == 1){
	  componentAction ("tutor-button-prev", "addClass", "d-none");
	  componentAction ("tutor-button-next", "removeClass", "d-none");
	}else if(tutorNumber == setting.maxTutorPage){
  	  componentAction ("tutor-button-prev", "removeClass", "d-none");
	  componentAction ("tutor-button-next", "addClass", "d-none");
	}else {
	  componentAction ("tutor-button-next", "removeClass", "d-none");
	  componentAction ("tutor-button-prev", "removeClass", "d-none");
	  componentAction ("tutor-button-prev", "inputText", (tutorNumber-1));
	}
	componentAction ("tutor-button-next", "inputText", (tutorNumber+1));
	
	activeTutorNumber = tutorNumber;
	checkCssSetting();
  };
  
  var removeDuplicateArray = function(data, key){
	return [
	  ...new Map(
	    data.map(x => [key(x), x])
	  ).values()
	]
	/*let seen = new Set();
	let cleanArray = inputArray.filter(el => {
	  let duplicate = seen.has(el.typeName);
	  seen.add(el.typeName);
	  return !duplicate;
	});  
	return cleanArray;*/
  };
  
  var numberFormat = function(x) {
	if(x == NaN || x == null) x = 0;
	let value = new Decimal(x);
	if(value.greaterThan(9999)){
	  if(hero.settingFormatNumber == "letter") return letterFormat(value);
	  else return value.toPrecision(3).toString();
	}
	else return roundFormat(value,2);
  };
  
  var letterFormat = function(e){
	let value = e.mantissa;
	let exponent = e.exponent;
	let letterUnit = "";
	
	let roundExponent = Math.floor(exponent/3);
	let restValue = value * Math.pow(10,exponent%3);
	if(roundExponent < 5){
	  let letterDictionary = ["", "K", "M", "B", "T"];
	  letterUnit = letterDictionary[roundExponent];
	  return roundFormat(restValue,2)+letterUnit
	}else if(roundExponent <= 680){
	  let letterDictionary = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
	  let countExponent = roundExponent - 5;
	  let secondLetter = countExponent % 26;
      let firstLetter = Math.floor(countExponent / 26);
	  return roundFormat(restValue,2)+letterDictionary[firstLetter]+letterDictionary[secondLetter];
	}else if(roundExponent <= 18256){
	  let letterDictionary = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
	  let countExponent = roundExponent - 681;
	  let firstLetter = Math.floor(countExponent / 676);
	  let secondLetter = Math.floor((countExponent - (firstLetter*676)) / 26);
	  let thirdLetter = countExponent % 26;
	  return roundFormat(restValue,2)+letterDictionary[firstLetter]+letterDictionary[secondLetter]+letterDictionary[thirdLetter];
	}
  };
  
  var ordinalNumber = function(number){
	let ordinalText = "";
	switch(number % 10){
	  case 1:
	    if(number==11) ordinalText = "th";
		else ordinalText = "st";
		break;
	  case 2:
	    ordinalText = "nd";
		break;
	  case 3:
	    ordinalText = "rd";
		break;
	  default:
	    ordinalText = "th";
		break;	
	};
	return number+""+ordinalText;
  };
  
  var timeNameFormat = function(hours){
	let timeName = "";
	switch(hours){
	  case 8:
		timeName = "morning";
		break;
	  case 16:
		timeName = "afternoon";
		break;
	  case 24:
	    timeName = "evening";
	    break;  
	};
	return timeName;
  };
  
  var roundFormat = function(value, decimals) {
	return Number(Math.round(value+'e'+decimals)+'e-'+decimals).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };
  
  var alphaNumericSpaceFormat = function(value){
	var reg_exp = /^[A-Za-z0-9 ]+$/;
	var is_valid = reg_exp.test(String.fromCharCode(value));
	
	return is_valid;  
  };
  
  var numericFormat = function(value){
	if(isNaN(value) === false) return true;
	else return false;
  };

  var dateFormat = function(milliseconds){
	let dateObject = new Date(milliseconds);
	let humanDateFormat = dateObject.toLocaleString();

	return humanDateFormat;
  };
  
  var firstLetterFormat = function(string,type,splitChar=""){
	switch(type.toLowerCase()){
	  case "uppercase":
	    if(splitChar != ''){
		  let arrayString = string.split(splitChar);
		  let resultString = [];
		  for(let i=0;i<arrayString.length;i++){
			resultString.push(arrayString[i].replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase()));
		  }
		  return resultString.join(' ');
		}else return string.replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase());
		break;
	  case "lowercase":
	    return string.replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toLowerCase());
	    break;
	};
  };
  
  var alertNumericFormat = function(modalName,textField){
	let initial = "";
	switch(modalName){
	  case "modalBuySell":
	    initial = "mbs";
		break;
	  case "modalConfirmActionItem":
		initial = "mcai";
		break;
	};		
	  
	$("#modalNotification").modal("show");
	componentAction("notification-ok-button","inputText",initial);
	componentAction ("notification-text", "replaceText", "You must input number only");
	$("#"+modalName).modal('hide');
	$("#"+textField).val(0);  
  };
  
  var randomBetweenNumber = function(min,max){
	min *= 1;
	max *= 1;
	return Math.floor(Math.random() * (max - min + 1) + min);  
  };
  
  var averageNumber = function(min,max){
	min *= 1;
	max *= 1;
	return (max + min) / 2;
  };
  
  var roundedBigValue = function(bigValue,roundedType=""){
	let exponent = Math.floor(Decimal.log10(bigValue));
	let multiplier = new Decimal(0);
	let staticExponent = 0;
	if(exponent >= 6){
	  switch(exponent%3){
	    case 0:
		  staticExponent = 2;
		  break;
	    case 1:
		  staticExponent = 3;
		  break;
	    case 2:
		  staticExponent = 4;
		  break;	
	  }
	  multiplier = new Decimal(10).pow(exponent-staticExponent);
	  bigValue = new Decimal(bigValue).div(multiplier);
	    
	  switch(roundedType){
		case "ceil":
		  bigValue = bigValue.ceil();
		  break;
		case "floor":
		  bigValue = bigValue.floor();
		  break;
	  };
	  exponent -= staticExponent;
	  return (bigValue*1)+"="+exponent;
	}else return bigValue;
  };
  
  var compareMinMaxValue = function(minValueArray,maxValueArray){
	let minValue = minValueArray[0] * 1;
	let maxValue = maxValueArray[0] * 1;
	let minExponent = minValueArray[1] * 1;
	let maxExponent = maxValueArray[1] * 1;
	if(minExponent < maxExponent){
	  maxValue = maxValue * (Math.pow(10,(maxExponent - minExponent)));
	  maxExponent = minExponent;
	}
	return minValue+"="+maxValue+"="+minExponent;
  };
  
  var isInViewport = function(elem,headerName) {
    let bounding = elem.getBoundingClientRect();
	let topBar = $("#sticky-topbar").height() + 10;
	let contentHeader = 0;
	if($("#"+headerName+"-header").length) contentHeader += $("#"+headerName+"-header").height() + 16;
	if($("#"+headerName+"-header2").length) contentHeader += $("#"+headerName+"-header2").height() + 16;
	if($("#"+headerName+"-header3").length) contentHeader += $("#"+headerName+"-header3").height() + 16;
	let footBar = $("#sticky-footbar").height() + 30;
    return (
        bounding.top >= (topBar + contentHeader) &&
        bounding.left >= 0 &&
        bounding.bottom <= ((window.innerHeight - footBar) || (document.documentElement.clientHeight - footBar)) &&
        bounding.right <= (document.documentElement.clientWidth || document.documentElement.clientWidth)
		
		/*window.innerWidth => document.documentElement.clientWidth*/
    );
  };
  
  var showAllMenu = function(){
	componentAction ("info-status-div", "updateClass", "hide-menu,show-menu");
	showMenu("info");
	
	componentAction ("gameplay-status-div", "updateClass", "hide-menu,show-menu");
	showMenu("gameplay");
	
	componentAction ("town-status-div", "updateClass", "hide-menu,show-menu");
	showMenu("town");
	
	componentAction ("other-status-div", "updateClass", "hide-menu,show-menu");
	showMenu("other");
  };

  var hideAllMenu = function(){
	if ($("#info-status-div").hasClass("show-menu") && hero.settingAutoCollapse) componentAction ("info-status-div", "updateClass", "show-menu,hide-menu");
	componentAction ("profile", "addClass", "d-none");
	componentAction ("statistic", "addClass", "d-none");
	componentAction ("achievement", "addClass", "d-none");
	
	if ($("#gameplay-status-div").hasClass("show-menu") && hero.settingAutoCollapse) componentAction ("gameplay-status-div", "updateClass", "show-menu,hide-menu");
	componentAction ("dungeon", "addClass", "d-none");
	componentAction ("cave", "addClass", "d-none");
	componentAction ("tower", "addClass", "d-none");
	componentAction ("daily-task", "addClass", "d-none");
	componentAction ("daily-check-in", "addClass", "d-none");
	componentAction ("artifact", "addClass", "d-none");
	
	if ($("#town-status-div").hasClass("show-menu") && hero.settingAutoCollapse) componentAction ("town-status-div", "updateClass", "show-menu,hide-menu");
	componentAction ("barracks", "addClass", "d-none");
	componentAction ("companion", "addClass", "d-none");
	componentAction ("house", "addClass", "d-none");
	componentAction ("bank", "addClass", "d-none");
	componentAction ("warehouse", "addClass", "d-none");
	componentAction ("tavern", "addClass", "d-none");
	componentAction ("gods", "addClass", "d-none");
	componentAction ("canteen", "addClass", "d-none");
	componentAction ("pet", "addClass", "d-none");
	
	if ($("#other-status-div").hasClass("show-menu") && hero.settingAutoCollapse) componentAction ("other-status-div", "updateClass", "show-menu,hide-menu");
	componentAction ("tutorial", "addClass", "d-none");
	componentAction ("setting", "addClass", "d-none");
	componentAction ("save-game", "addClass", "d-none");
	componentAction ("export-import", "addClass", "d-none");
	componentAction ("clear-game", "addClass", "d-none");
	componentAction ("contact-dev", "addClass", "d-none");
  };
  
  var showHeaderBar = function(){
	componentAction("sidebarToggleTop","removeClass","d-none");
  };
  
  var hideHeaderBar = function(){
	componentAction("sidebarToggleTop","addClass","d-none");
  };
  
  var showSideMenu = function(){
	componentAction("accordionSidebar","removeClass","d-none");
  };
  
  var hideSideMenu = function(){
	componentAction("accordionSidebar","addClass","d-none");
  };
  
  var hideAllContent = function(){
	componentAction ("first-story-div", "addClass", "d-none", true);  
	  
	componentAction ("profile-div", "addClass", "d-none", true);
	componentAction ("statistic-div", "addClass", "d-none", true);
	componentAction ("achievement-div", "addClass", "d-none", true);
	
	updateTab();
	componentAction ("dungeon-div", "addClass", "d-none", true);
	componentAction ("cave-div", "addClass", "d-none", true);
	componentAction ("tower-div", "addClass", "d-none", true);
	componentAction ("daily-task-div", "addClass", "d-none", true);
	componentAction ("artifact-div", "addClass", "d-none", true);
	
	componentAction ("barracks-div", "addClass", "d-none", true);
	componentAction ("companion-div", "addClass", "d-none", true);
	componentAction ("pet-div", "addClass", "d-none", true);
	componentAction ("house-div", "addClass", "d-none", true);
	componentAction ("bank-div", "addClass", "d-none", true);
	componentAction ("warehouse-div", "addClass", "d-none", true);
	componentAction ("tavern-div", "addClass", "d-none");
	componentAction ("canteen-div", "addClass", "d-none");
	componentAction ("gods-div", "addClass", "d-none", true);
	
	componentAction ("tutorial-div", "addClass", "d-none", true);
	componentAction ("setting-div", "addClass", "d-none", true);
	componentAction ("export-import-div", "addClass", "d-none", true);
	
	componentAction ("profile", "updateClass", "active,cursor-button");
	componentAction ("statistic", "updateClass", "active,cursor-button");
	componentAction ("achievement", "updateClass", "active,cursor-button");
	
	componentAction ("dungeon", "updateClass", "active,cursor-button");
	componentAction ("cave", "updateClass", "active,cursor-button");
	componentAction ("tower", "updateClass", "active,cursor-button");
	componentAction ("daily-task", "updateClass", "active,cursor-button");
	componentAction ("daily-check-in", "updateClass", "active,cursor-button");
	componentAction ("artifact", "updateClass", "active,cursor-button");
	
	componentAction ("barracks", "updateClass", "active,cursor-button");
	componentAction ("companion", "updateClass", "active,cursor-button");
	componentAction ("pet", "updateClass", "active,cursor-button");
	componentAction ("house", "updateClass", "active,cursor-button");
	componentAction ("bank", "updateClass", "active,cursor-button");
	componentAction ("warehouse", "updateClass", "active,cursor-button");
	componentAction ("tavern", "updateClass", "active,cursor-button");
	componentAction ("canteen", "updateClass", "active,cursor-button");
	componentAction ("gods", "updateClass", "active,cursor-button");
	
	componentAction ("tutorial", "updateClass", "active,cursor-button");
	componentAction ("setting", "updateClass", "active,cursor-button");
	componentAction ("export-import", "updateClass", "active,cursor-button");
  };
  
  var showLastContent = function(){  
	switch(lastActiveMenu.toLowerCase()){
	  case 'first-story':
		showFirstTimeStory();
		break;
	  case 'log':
	  case 'hero':
	  case 'partner':
	  case 'skill':
	  case 'labor':
	  case 'shop':
		showDungeonArea(lastActiveMenu.toLowerCase());
		break;
	  case 'profile':
	    showProfileArea();
		break;
	  case 'statistic':
		showStatisticArea();
		break;
	  case 'achievement':
		showAchievementArea();
		break;
	  case 'dungeon':
		showDungeonArea();
		break;
	  case 'cave':
		showCaveArea();
		break;	
	  case 'tower':
		showTowerArea();
		break;	
	  case 'daily-task':
		showDailyTaskArea();
		break;
	  case 'daily-check-in':
		showDailyCheckInArea();
		break;	
	  case 'weekly-task':
		showWeeklyTaskArea();
		break;
	  case 'monthly-task':
		showMonthlyTaskArea();
		break;	
	  case 'artifact':
	    updateArtifactArea();
		break;
	  case 'barracks':
		showBarracksArea();
		break;
	  case 'companion':
		showCompanionArea();
		break;	
	  case 'house':
	    if($("#dwellers-role").val() == "" && $("#dwellers-status").val() == "") showHouseArea();
		else showHouseArea($("#dwellers-role").val(),$("#dwellers-status").val());
		break;
	  case 'bank':
		showBankArea();
		break;
	  case 'tavern':
		showTavernArea();
		break;
	  case 'canteen':
		showTavernArea();
		break;	
	  case 'pet':
		showPetArea();
		break;
	  case 'warehouse':	
		updateWarehouseArea();
		break;
	  case 'gods':	
		showGodsArea(null,true);
		break;
	  case 'tutorial':
		showTutorialArea();
		break;
	  case 'setting':
		showSettingArea();
		break;
	  case 'export-import':
		showExportImportArea();
		break;
	};		
  };
  
  var showHideMenuIcon = function(){
	if(!hero.settingAutoCollapse){
	  componentAction("info-status-div","addClass","d-none");
	  componentAction("gameplay-status-div","addClass","d-none");
	  componentAction("town-status-div","addClass","d-none");
	  componentAction("other-status-div","addClass","d-none");
	}else{
	  componentAction("info-status-div","removeClass","d-none");
	  componentAction("gameplay-status-div","removeClass","d-none");
	  componentAction("town-status-div","removeClass","d-none");
	  componentAction("other-status-div","removeClass","d-none");
	}		
  };
  
  var refreshSidebarMenu = function(){
	if(!hero.settingAutoCollapse){
	  let heightScreen = calcHeightScreen();
	  let heightSidebarHeader = calcHeightSidebarHeader();
	  let scrollHeight = heightScreen - heightSidebarHeader - 32;
	  $('.sidebar-scrollable').css({"max-height":scrollHeight});
	  showAllMenu();
	}else{
	  hideAllMenu();
	  showMenu("other");
	}
	showHideMenuIcon();
  };
  
  var refreshMenu = function(){
	if (!$("#gameplay-status-div").hasClass("hide-menu")){
	  showMenu("gameplay");
	}
	if (!$("#town-status-div").hasClass("hide-menu")) showMenu("town");
	if (!$("#dungeon-div").hasClass("d-none") && !$("#hero-area-div").hasClass("d-none")) showDungeonArea();
	if (!$("#warehouse-div").hasClass("d-none")) showWarehouseHeader();
  };
  
  var showMenu = function(menuName){
	switch(menuName){
	  case 'info':
		componentAction ("info-status-div", "updateClass", "hide-menu,show-menu");
	    componentAction ("profile", "removeClass", "d-none");
		componentAction ("statistic", "removeClass", "d-none");
		componentAction ("achievement", "removeClass", "d-none");
		break;
	  case 'gameplay':
		componentAction ("gameplay-status-div", "updateClass", "hide-menu,show-menu");
		componentAction ("dungeon", "removeClass", "d-none");
	    if(hero.highestFloor >= unlockNewFeatureFloor("cave") || nextUnlockFeature == "cave,quest") componentAction ("cave", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("tower") || nextUnlockFeature == "tower") componentAction ("tower", "removeClass", "d-none");
		componentAction ("daily-task", "removeClass", "d-none");
		componentAction ("daily-check-in", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("artifact")) componentAction ("artifact", "removeClass", "d-none");
		break;
	  case 'town':
	    componentAction ("town-status-div", "updateClass", "hide-menu,show-menu");
		if(hero.highestFloor >= unlockNewFeatureFloor("warehouse") || nextUnlockFeature == "warehouse") componentAction ("warehouse", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("barracks") || nextUnlockFeature == "barracks") componentAction ("barracks", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("house") || nextUnlockFeature == "house,bank") componentAction ("house", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("bank") || nextUnlockFeature == "house,bank") componentAction ("bank", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("companion") || nextUnlockFeature == "companion") componentAction ("companion", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("tavern") || nextUnlockFeature == "camp,tavern") componentAction ("tavern", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("canteen") || nextUnlockFeature == "canteen") componentAction ("canteen", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("gods") || nextUnlockFeature == "gods") componentAction ("gods", "removeClass", "d-none");
		if(hero.highestFloor >= unlockNewFeatureFloor("cage") || nextUnlockFeature == "cage") componentAction ("pet", "removeClass", "d-none");
		break;
	  case 'other':
		componentAction ("other-status-div", "updateClass", "hide-menu,show-menu");
		componentAction ("tutorial", "removeClass", "d-none");
		componentAction ("setting", "removeClass", "d-none");
		componentAction ("save-game", "removeClass", "d-none");
		componentAction ("export-import", "removeClass", "d-none");
		componentAction ("clear-game", "removeClass", "d-none");
		componentAction ("contact-dev", "removeClass", "d-none");
		break;	
	}
	if(hero.highestFloor >= unlockNewFeatureFloor("companion") || nextUnlockFeature == "companion"){
	  componentAction ("companion-generate", "removeClass", "d-none");
	  if(nextUnlockFeature == "companion") componentAction ("hero-companion-unlock-div", "removeClass", "d-none");
	}
	if(hero.highestFloor >= unlockNewFeatureFloor("equipment") || nextUnlockFeature == "equipment") componentAction ("equipment-generate", "removeClass", "d-none");
	checkUnlockNewFeature();
  };

  initGame(); 
  
  $('#modalLoginForm').on('shown.bs.modal', function (e) {
    $('#user-name').focus();
  });
  
  $("#user-name").on('keydown', function(event) {
	if(this.value != "") componentAction("register-error","addClass","d-none");
	else componentAction("register-error","removeClass","d-none");
    if (event.key == "Enter") $("#play-button").click();
  });
  
  $("#gender-male").on('click', function() {
	componentAction("gender-male","updateClass","rounded-card,selected-rounded-card");
	componentAction("gender-female","updateClass","selected-rounded-card,rounded-card");
	componentAction("label-title","replaceText","King");
	componentAction("user-gender","inputText","male");
	$("#user-name").removeAttr('placeholder');
	componentAction("register-error","addClass","d-none");
  });
  
  $("#gender-female").on('click', function() {
	componentAction("gender-female","updateClass","rounded-card,selected-rounded-card");
	componentAction("gender-male","updateClass","selected-rounded-card,rounded-card");  
	componentAction("label-title","replaceText","Queen");
	componentAction("user-gender","inputText","female");
	$("#user-name").removeAttr('placeholder');
	componentAction("register-error","addClass","d-none");
  });
  
  $("#prev-story-button").on('click', function(e) {
	let arrayValue = $("#prev-story-button").val().split("=");
	showStory(arrayValue[0],parseInt(arrayValue[1],10));
  });
  
  $("#next-story-button").on('click', function(e) {
	let arrayValue = $("#next-story-button").val().split("=");
	showStory(arrayValue[0],arrayValue[1]);
  });
  
  $("#skip-story-button").on('click', function(e) {
	$("#modalConfirmSkipStory").modal("show");
  });
  
  $("#skip-story-ok-button").on('click', function(e) {
	$("#modalConfirmSkipStory").modal("hide");
	skipStory();
  });
  
  $("#skip-story-no-button").on('click', function(e) {
	$("#modalConfirmSkipStory").modal("hide");
  });

  $("#dpc-button").on('click', function(e) {
	clickDPC();  
  });
  
  $("#dpc-button").on('keydown', function(event) {
    if (event.key == "Enter" || event.key == " ") event.preventDefault();
  });
  
  $("#auto-progress-switch").on('click', function() {
	  setting.autoProgress = $("#auto-progress-switch").prop("checked");
	  hero.settingOnlineProgress = setting.autoProgress;
	  saveGame();
	  if(tutorialAnimation != ""){
	    nextTutorial();
	  }
  });
  
  $("#play-button").on('click', function() {
    let userID = $("#user-id").val();
	let userName = $("#user-name").val();
	let userGender = $("#user-gender").val();
	if(userName != "" && userGender != ""){
	  componentAction("register-error","addClass","d-none");
	  let canContinue = true;
	  switch(userGender){
		case "male":
		  if(userName.toLowerCase() == "king"){
			$("#modalNotification").modal("show");
			componentAction ("notification-text", "replaceText", 'You cannot use word "king" as your username');
			canContinue = false;
		  }
		  break;
		case "female":
		  if(userName.toLowerCase() == "queen"){
			$("#modalNotification").modal("show");
			componentAction ("notification-text", "replaceText", 'You cannot use word "queen" as your username');
			canContinue = false;
		  }
		  break;
	  };
	  if(canContinue){
	    hero.userId = userID;
	    hero.userName = userName;
		hero.userGender = userGender;
	    hero.firstPlayDateTime = Date.now(),
	    hero.firstGameVersion = setting.gameVersion,
	    showFirstTimeStory();
	    $("#modalLoginForm").modal('toggle');
	  }
	}else{
	  componentAction("register-error","removeClass","d-none");
	  if(userGender == ""){
	    componentAction("register-error","replaceText","You must choose the gender first");
	  }else if(userName == ""){
		componentAction("register-error","replaceText","You must fill the user name");
	  }
	}
  });
  
  $('#modalKingdomName').on('shown.bs.modal', function (e) {
    $('#kingdom-name').focus();
  });
  
  $("#kingdom-name").on('keydown', function(event) {
    if (event.key == "Enter") $("#save-kingdom-name-button").click();
  });
  
  $("#save-kingdom-name-button").on('click', function() {
    let kingdomName = $("#kingdom-name").val();
	if(kingdomName != ""){
	  if(kingdomName.toLowerCase() == "kingdom"){
		$("#modalNotification").modal("show");
		componentAction ("notification-text", "replaceText", 'You cannot use word "kingdom" as your kingdom name');
	  }else{
	    hero.kingdomName = kingdomName;
	    let arrayValue = $("#save-kingdom-name-button").val().split("=");
	    if(hero.totalGainOrbs == 0) showStory(arrayValue[0],parseInt(arrayValue[1],10));
	    $("#modalKingdomName").modal('hide');
	    updateUserName();
	  }
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "Please fill your kingdom name");
	  calcHeightScrollDiv("modal");
	}
  });
  
  $("#show-tutorial-button").on('click', function() {
	$("#modalDevLog").modal('hide');
	hideAllContent();
	if(hero.totalGainOrbs == 0 && hero.tutorialGroupId >= 0){
	  showDungeonArea();	
	  startTutorialAnimation("world1");
	  componentAction("auto-progress-div","addClass","d-none");
	}else showTutorialArea();
  });
  
  $("#play-normally-button").on('click', function() {
	$("#modalDevLog").modal('hide');
	hideAllContent();
	showDungeonArea();
	if(hero.tutorialGroupId == 0) hero.tutorialGroupId = 2;
  });
  
  $("#modalPrestigeForm").on('shown.bs.modal', function(){
    if(hero.totalCountPrestige == 1) startTutorialAnimation("artifact1");
  });
  
  $("#modalRandomArtifactConfirm").on('shown.bs.modal', function(){
    if(hero.totalCountPrestige == 1 && hero.tutorialGroupId == 3){
	  if(currentTutorialStep == 2) nextTutorial();
	  else if(currentTutorialStep == 4) prevTutorial();
	}
  });
  
  $("#modalUnlockArtifactConfirm").on('shown.bs.modal', function(){
    if(hero.totalCountPrestige == 1 && hero.tutorialGroupId == 3){
	  nextTutorial();
	}
  });
  
  $("#buy-sell-qty").keyup(function(e) {
	let itemName = $('#buy-sell-name').val();
	let actionQty = 0;
	let isNumeric = numericFormat(e.target.value);
	if(isNumeric){
	  actionQty = e.target.value * 1;
	  if(actionQty < 0) actionQty = 0;
	}else{
	  actionQty = 0;
	}
	
	if(actionQty >= 0){
	  $("#buy-sell-qty").val(actionQty);
	  let totalClover = calculateBuySellClover(itemName,actionQty);

	  if(actionQty > 1) componentAction("buy-sell-item","replaceText",itemName+"s");
	  else componentAction("buy-sell-item","replaceText",itemName);
	
	  componentAction("total-clover","replaceText",numberFormat(totalClover));
	}
  });

  $("#hero-coin-div").on('click', function() {
	if (tutorialAnimation != ""){
	  nextTutorial();
	}
  });
  
  $("#hero-dpc-div").on('click', function() {
	if (tutorialAnimation != ""){
	  nextTutorial();
	}
  });
  
  $("#hero-dps-div").on('click', function() {
	if (tutorialAnimation != ""){
	  nextTutorial();
	}
  });
  
  $("#detail-dps-info").on('click', function() {
	let averageDps = new Decimal(hero.totalMinDps).plus(hero.totalMaxDps).div(2);
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "Max Dps : "+numberFormat(hero.totalMaxDps)+"\n Average Dps : "+numberFormat(averageDps)+"\n Min Dps : "+numberFormat(hero.totalMinDps));
  });
  
  $("#tutor-menu-div-info").on('click', function() {
	showTutorialMenu("info");
  });
  
  $("#tutor-menu-div-adventure").on('click', function() {
	showTutorialMenu("adventure");
  });
  
  $("#tutor-menu-div-town").on('click', function() {
	showTutorialMenu("town");
  });
  
  $("#tutor-menu-div-other").on('click', function() {
	showTutorialMenu("other");
  });
  
  $("[id^=tutor-div-]").on('click', function(){
	let tutorMenu = $(this).attr("id").replace("tutor-div-","");
	showTutorialContent(tutorMenu);
  });
  
  $("#continue-button").on('click', function() {
	$("#modalOfflineForm").modal('hide');
	if(checkCollectDailyCheckIn()){
	  showDailyCheckInArea();
	}else{
	  if(hero.highestFloor >= unlockNewFeatureFloor("cave")) checkCooldownQuestTimer(true);
	  else if(hero.highestFloor >= unlockNewFeatureFloor("cage")) checkCooldownAdventureTimer(true);
	}
	saveGame();	
  });
  
  $("#daily-check-in-collect").on('click', function() {
	$("#modalDailyCheckIn").modal('toggle');
	if(checkCollectDailyCheckIn()) collectDailyCheckIn();
	saveGame();	
  });
  
  $("#continue-prestige-ok-button").on('click', function() {
	$("#modalPrestigeForm").modal('hide');
	hideAllContent();
	showArtifactArea();
	if(hero.totalCountPrestige == 1 && hero.tutorialGroupId == 3) nextTutorial();
  });
  
  $("#continue-prestige-no-button").on('click', function() {
	$("#modalPrestigeForm").modal('hide');	
  });
  
  $("#upgrade-level-button").on('click', function() {
    upgradeLevelHero();
  });
  
  $("#daily-tab-button").on('click', function() {
    showDailyTaskArea();
  });
  
  $("#weekly-tab-button").on('click', function() {
    showWeeklyTaskArea();
  });
  
  $("#monthly-tab-button").on('click', function() {
    showMonthlyTaskArea();
  });
  
  $("#log-tab-button").on('click', function() {
    updateTab("log");
  });
  
  $("#hero-tab-button").on('click', function() {
    updateTab("hero");
	showDungeonArea();
  });
  
  $("#partner-tab-button").on('click', function() {
    updateTab("partner");
  });
  
  $("#skill-tab-button").on('click', function(e) {
    updateTab("skill");
  });
  
  $("#labor-tab-button").on('click', function(e) {
    updateTab("labor");
  });
  
  $("#shop-tab-button").on('click', function() {
    updateTab("shop");
  });
  
  $("#bank-tab-button").on('click', function() {
    showBankArea();
  });
  
  $("#treasure-tab-button").on('click', function() {
    showTreasureArea();
  });
  
  $("#warehouse-tab-button").on('click', function() {
    showWarehouseArea("warehouse");
  });
  
  $("#backpack-tab-button").on('click', function() {
    showWarehouseArea("backpack");
  });
  
  $("#warehouse-info").on('click', function() {
    $("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "* Please click on the item image to view detail information \n * You can get gear from tower, sell equipment & daily check in prize \n * Gear are needed to upgrade the equipment \n * You can get blueprint from daily check in prize \n * Blueprint are needed to enhance the equipment \n * You can combine two maximum level of same grade equipment to the higher grade equipment \n * Some items can only be used if they are in a backpack");
  });
  
  $("#cave-info").on('click', function() {
    $("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "* Each cave will have attack, defence, agility and dexterity status \n * Each cave has a maximum of 3 slots that can be used to run 3 quests at once \n * Cave attack and defence status will be random among the displayed values \n * Your army will launch 0 damage if army attack status equal or less than cave defence status \n * Your army will miss the damage if army dexterity status equal or lower than cave agility status");
  });
  
  $("#pet-tab-button").on('click', function() {
    showPetArea();
  });
  
  $("#area-tab-button").on('click', function() {
    showAdventureArea();
  });
  
  $("#gods-tab-button").on('click', function() {
    showGodsArea(null,true);
  });
  
  $("#temple-tab-button").on('click', function() {
    showTempleArea();
  });
  
  $("#barracks-tab-button").on('click', function() {
    showBarracksArea(true);
  });
  
  $("#camp-tab-button").on('click', function() {
    showCampArea(true);
  });
  
  $("#training-tab-button").on('click', function() {
    showTrainingArea();
  });
  
  $("[id^=floor-number-div-]").on("click", function() {
	let floorNumber =  parseInt($(this).text().replace(",",""),10);
	if(floorNumber <= hero.maxFloor && floorNumber <= setting.limitFloor){
	  hero.floor = floorNumber;
	  componentAction ("progress-bar", "animate", 100);
	  currentEnemyHP = initDungeon();
	}
  });
  
  $("#floor-number-div-1").on('click', function() {
	if(tutorialAnimation != ""){
	  nextTutorial();
	}
  });
  
  $("#floor-number-div-2").on('click', function() {
	if(tutorialAnimation != ""){
	  nextTutorial();
	}
  });
  
  $("#max-floor-div").on('click', function() {
	let floorNumber =  parseInt($(this).text().replace(",",""),10);
	if(floorNumber <= hero.maxFloor && floorNumber <= setting.limitFloor && floorNumber != hero.floor){
	  hero.floor = floorNumber;
	  componentAction ("progress-bar", "animate", 100);
	  currentEnemyHP = initDungeon();
	  if (tutorialAnimation != ""){
	    nextTutorial(true);
	  }
	}
  });
  
  $("#upgrade-weapon-button").on('click', function() {
    upgradeLevelWeapon();
  });
  
  $("#buy-sell-ok-button").on('click', function() {
	let isNumeric = numericFormat($("#buy-sell-qty").val()*1);
	
	if(isNumeric){
	  let actionQty = ($("#buy-sell-qty").val() * 1);
	  let itemName = $('#buy-sell-name').val();
      let totalClover = new Decimal(calculateBuySellClover(itemName,actionQty));
	  let heroClover = new Decimal(hero.clover);
	  if(heroClover.lessThan(totalClover)){
	    $("#modalNotification").modal("show");
		componentAction("notification-ok-button","inputText","mbs");
	    componentAction ("notification-text", "replaceText", "You don't have enough clover");
	  }else{
	    hero.clover = (heroClover.sub(totalClover) * 1);
	    let materialData = material.find(item => item.name === itemName && item.inBackpack === true);
	    if(materialData) insertNewUnlockItem(materialData.id,actionQty,materialData.type,materialData.name,"all","backpack");
	    updateHeroClover();
	  }
	  saveGame();
	  $("#modalBuySell").modal('hide');
	}else{
	  alertNumericFormat("modalBuySell","buy-sell-qty");
	}
  });
  
  $("#buy-sell-no-button").on('click', function() {
	$("#modalBuySell").modal('hide');
  });  
  
  $("[id^=prestige-ok-button-]").on('click', function() {
	confirmRunPrestige($(this).val());
  });
  
  $("#prestige-ok-button").on('click', function() {
	runPrestige();
  });
  
  $("#prestige-no-button").on('click', function() {
	$("#modalPrestigeConfirm").modal('toggle');
  });
  
  $("#prestige-token-ok-button").on('click', function() {
	runPrestige($(this).val());
  });
  
  $("#prestige-token-no-button").on('click', function() {
	$("#modalPrestigeTokenConfirm").modal('hide');
	$("#modalPrestigeConfirm").modal('show');
  });
  
  $("#clear-ok-button").on('click', function() {
	$("#modalClearConfirm").modal('toggle');
	$("#modalAnotherClearConfirm").modal('show');
  });
  
  $("#clear-no-button").on('click', function() {
	$("#modalClearConfirm").modal('toggle');
  });
  
  $("#another-clear-ok-button").on('click', function() {
	stopAllTimer();
	if(setting.devPage) localStorage.removeItem("hero-dev");
	else localStorage.removeItem("hero");
	hero = null;
	location.reload();
  });
  
  $("#another-clear-no-button").on('click', function() {
	$("#modalAnotherClearConfirm").modal('toggle');
  });
  
  $("#sell-artifact-ok-button").on('click', function() {
	let artifactId = parseInt($('#sell-artifact-ok-button').val(),10);
	sellArtifact(artifactId);
	$("#modalSellArtifactConfirm").modal('toggle');
  });
  
  $("#sell-artifact-no-button").on('click', function() {
	$("#modalSellArtifactConfirm").modal('toggle');
  });
  
  $("#notif-prestige-ok-button").on('click', function() {
	$("#modalNotifPrestige").modal('toggle');
	startPrestige();
  });
  
  $("#notif-prestige-no-button").on('click', function() {
	$("#modalNotifPrestige").modal('toggle');  
  });
  
  $("#withdraw-token-ok-button").on('click', function() {
	$("#modalWithdrawToken").modal('toggle');
	withdrawTokenInBank();
  });
  
  $("#withdraw-token-no-button").on('click', function() {
	$("#modalWithdrawToken").modal('toggle');  
  });
  
  $("#use-item-ok-button").on('click', function() {
	if(!$("#modal-heal-army").hasClass("d-none")){
	  let arrayValue = $("#use-item-ok-button").val().split("=");
	  if(arrayValue[1] == undefined){
		$("#modalNotification").modal("show");
	    componentAction ("notification-text", "replaceText", "You must select army to heal");
	    $('#notification-ok-button').val("mcui");
	  }else{
		useItem($("#use-item-ok-button").val());
	  }
	}else{
	  useItem($("#use-item-ok-button").val());	
	}
	$("#modalConfirmUseItem").modal("hide");  
  });
  
  $("#use-item-no-button").on('click', function() {
	$("#modalConfirmUseItem").modal('toggle');  
  });
  
  $("#notif-shop-ok-button").on('click', function() {
	$("#modalNotifShop").modal('toggle');
	hideAllContent();
	showWarehouseArea($("#notif-shop-ok-button").val());
	hideAllMenu();
	showMenu('town');
  });
  
  $("#notif-shop-no-button").on('click', function() {
	$("#modalNotifShop").modal('toggle');  
  });
  
  $("#notif-pet-ok-button").on('click', function() {
	$("#modalNotifPet").modal('toggle');
	hideAllContent();
	showPetArea();
  });
  
  $("#notif-pet-no-button").on('click', function() {
	$("#modalNotifPet").modal('toggle');  
  });
  
  $("#notif-features-ok-button").on('click', function() {
	let featureName = $("#notif-features-ok-button").val();
	$("#modalNotifNewFeatures").modal('hide');
	hideAllContent();
	if(hero.settingAutoCollapse) hideAllMenu();
	if(featureName == "tower" || featureName == "cave") showMenu("gameplay");
	else showMenu("town");
	switch(featureName){
	  case "labor":
	    showDungeonArea("labor");
		break;
	  case "tower":
	    showTowerArea();
		break;	
	  case "barracks":
	    showBarracksArea(true);
		break;	
	  case "pet":
	    showPetArea();
		break;
	  case "companion":
	    showCompanionArea();
		break;
	  case "house & dwellers":
	    showHouseArea();
		break;	
	  case "equipment":
	    showWarehouseArea();
		break;
	  case "tavern":
	    showTavernArea();
		break;
	  case "cave":
	    showCaveArea();
		break;	
	  case "gods":
	    showTempleArea();
		break;
	};
  });
  
  $("#notif-features-no-button").on('click', function() {
	let featureName = $("#notif-features-ok-button").val();  
	$("#modalNotifNewFeatures").modal('hide');
	switch(featureName){
	  case "labor":
	    showNotifIcon("labor-tab-button");
		break;
	  case "tower":
	    showNotifIcon("gameplay-div");
	    showNotifIcon("tower");
		break;	
	  case "barracks":
	    showNotifIcon("town-div");
	    showNotifIcon("barracks");
		break;	
	  case "pet":
	    showNotifIcon("town-div");
	    showNotifIcon("pet");
		break;
	  case "companion":
	    showNotifIcon("town-div");
	    showNotifIcon("companion");
		break;
	  case "house & dwellers":
	    showNotifIcon("town-div");
	    showNotifIcon("house");
		showNotifIcon("bank");
		break;	
	  case "equipment":
	    showNotifIcon("town-div");
	    showNotifIcon("warehouse");
		break;	
	  case "gods":
	    showNotifIcon("town-div");
	    showNotifIcon("gods");
		break;
	  case "tavern":
	    showNotifIcon("town-div");
	    showNotifIcon("tavern");
		break;
	};
  });
  
  $("#start-quest-ok-button").on('click', function() {
	$("#modalConfirmStartQuest").modal('hide');
	if(parseInt($("#start-quest-army-id").val(),10) >= 0){
	  startQuest($("#start-quest-cave-id").val(),$("#start-quest-army-id").val());
	  calcDefaultModalWidth();
	}else{
	  $("#modalNotification").modal("show");
	  componentAction ("notification-text", "replaceText", "You must choose the army before start the quest.");
	  componentAction("notification-ok-button","inputText","sq="+$("#start-quest-cave-id").val());
	}
	cancelQuest = false;
  });
  
  $("#start-quest-no-button").on('click', function() {
	$("#modalConfirmStartQuest").modal('hide');
	cancelQuest = true;
  });
  
  $('#modalConfirmStartQuest').on('hidden.bs.modal', function () {
    if(cancelQuest) calcDefaultModalWidth();
  });
  
  
  $("#unlock-cave-slot-ok-button").on('click', function() {
	$("#modalConfirmUnlockCaveSlot").modal('hide');
	unlockCaveNewSlot($("#unlock-cave-slot-ok-button").val());
  });
  
  $("#unlock-cave-slot-no-button").on('click', function() {
	$("#modalConfirmUnlockCaveSlot").modal('hide');
  });
  
  $("#quest-reward-ok-button").on('click', function(){
	$("#modalRewardQuest").modal('hide');
  });
  
  $("#user-name").keypress(function (e) {
	var value = e.keyCode || e.which;       
	return alphaNumericSpaceFormat(value);
  });
  
  $("#profile").on('click', function() {
	hideAllContent();
	showProfileArea();
  });
  
  $("#profile-user-name").keypress(function (e) {
	var value = e.keyCode || e.which;       
	return alphaNumericSpaceFormat(value);
  });
  
  $("#update-profile-button").on('click', function() {
	let userName = $("#profile-user-name").val();
	if(userName != ""){
	  hero.userName = userName;
	  componentAction ("view-username", "replaceText", hero.userName);
	  saveGame();
	  $("#modalSaveForm").modal('show');
	  componentAction("save-text", "replaceText", "Update Profile Success");
	  
      let intervalModalSaveForm = setTimeout (function() {
	    $("#modalSaveForm").modal('toggle');
	  },2000);	  
	}
  });
  
  $("#statistic").on('click', function() {
	hideAllContent();
	showStatisticArea();
  });
  
  $("#achievement").on('click', function() {
	hideAllContent();
	showAchievementArea();
  });
  
  $("#dungeon").on('click', function() {
	showDungeonArea();
  });
  
  $("#close-detail-tower-div").on('click', function() {
	if ($("#tower-battle-log-div").length > 0) $("#modalConfirmExitTowerBattle").modal("show");
	else showTowerArea();
  });
  
  $("#exit-tower-battle-ok-button").on('click', function() {
	showTowerArea();
	$("#modalConfirmExitTowerBattle").modal("hide"); 
  });
  
  $("#exit-tower-battle-no-button").on('click', function() {
	$("#modalConfirmExitTowerBattle").modal("hide");  
  });
  
  $("#home").on('click', function() {
	if(hero.settingAutoCollapse){
	  hideAllMenu();
	  hideAllContent();
	  showMenu("gameplay");
	}
	showDungeonArea();
  });
  
  $("[id^=button-buy-multiplier-]").on("click", function() {
	setting.levelUpgradeMultiplier = parseInt(this.value,10);
	isMultiplierChange = true;
	initDisplay();
  });
  
  $("#artifact").on('click', function() {
	hideAllContent();
	showArtifactArea();
  });
  
  $("#artifact-multiplier").on('click', function() {
	updateArtifactMultiplier();
  });
  
  $("#tavern").on('click', function() {
	hideAllContent();
	showTavernArea();
  });
  
  $("#canteen").on('click', function() {
	hideAllContent();
	showCanteenArea();
  });
  
  $("#pet").on('click', function() {
	hideAllContent();
	showPetArea();
  });
  
  $("#barracks").on('click', function() {
	hideAllContent();
	showBarracksArea(true);
  });
  
  $("#companion").on('click', function() {
	hideAllContent();
	showCompanionArea();
  });
  
  $("#hero-companion-area-div").on('click', function(){
	hideAllContent();
	hideAllMenu();
	showMenu("town");
	showCompanionArea();
  });
  
  $("#hero-companion-activate-div").on('click', function(){
	hideAllContent();
	hideAllMenu();
	showMenu("town");
	showCompanionArea();
  });
  
  $("#cave").on('click', function() {
	hideAllContent();
	showCaveArea();
  });
  
  $("#tower").on('click', function() {
	hideAllContent();
	showTowerArea();
  });
  
  $("#daily-task").on('click', function() {
	hideAllContent();
	showDailyTaskArea();
  });
  
  $("#daily-check-in").on('click', function() {
	showDailyCheckInArea();
  });
  
  $("#gods").on('click', function() {
	hideAllContent();
	showTempleArea();
  });
  
  $("#warehouse").on('click', function() {
	hideAllContent();
	showWarehouseArea();
  });
  
  $("#house").on('click', function() {
	hideAllContent();
	showHouseArea();
  });
  
  $("#bank").on('click', function() {
	hideAllContent();
	showBankArea();
  });
  
  $("#tutorial").on('click', function() {
	hideAllContent();
	showTutorialArea();
  });
  
  $("#setting").on('click', function() {
	hideAllContent();
	showSettingArea();
  });
  
  $("[id^=partner-sequence-]").on('click', function() {
	hero.settingOrderPartner = $(this).val();
	saveGame();
	componentAction("partner-area-div","clearText","");
	componentAction("barracks-area-div","clearText","");
	checkCssSetting();
  });
  
  $("[id^=labor-sequence-]").on('click', function() {
	hero.settingOrderLabor = $(this).val();
	saveGame();
	componentAction("labor-area-div","clearText","");
	componentAction("labor-area-div","clearText","");
	checkCssSetting();
  });
  
  $("[id^=show-icon-]").on('click', function() {
	if($(this).val() == "true") hero.settingShowIcon = true;
	else hero.settingShowIcon = false;
	saveGame();
	checkCssSetting();
  });
  
  $("[id^=setting-format-]").on('click', function() {
	hero.settingFormatNumber = $(this).val();
	saveGame();
	componentAction ("max-enemy-hp", "replaceText", numberFormat(enemy.maxHp));
  });
  
  $("[id^=setting-rounded-upgrade-]").on('click', function() {
	if($(this).val() == "true"){
	  hero.settingRoundedUpgrade = true;
	  /*componentAction("max-rounded-upgrade-div","removeClass","d-none");*/
	}else{
	  hero.settingRoundedUpgrade = false;
	  componentAction("max-rounded-upgrade-div","addClass","d-none");
	}
	saveGame();
  });
  
  $("[id^=setting-max-rounded-upgrade-]").on('click', function() {
	if($(this).val() == "true") hero.settingMaxRoundedUpgrade = true;
	else hero.settingMaxRoundedUpgrade = false;
	saveGame();
  });
  
  $("[id^=setting-ability-training-]").on('click', function() {
	if($(this).val() == "true") hero.settingAutoAbilityTraining = true;
	else hero.settingAutoAbilityTraining = false;
	saveGame();
  });
  
  $("[id^=setting-offline-]").on('click', function() {
	if($(this).val() == "true") hero.settingOfflineProgress = true;
	else hero.settingOfflineProgress = false;
	saveGame();
  });
  
  $("[id^=setting-background-]").on('click', function() {
	hero.settingBackground = $(this).val();
	if(hero.settingBackground.toLowerCase() == "light") $(".dark-mode").removeClass("dark-mode");
	saveGame();
	checkCssSetting();
  });
  
  $("#setting-confirm-use-item").on('click', function() {
	if($(this).is(":checked")) hero.settingConfirmUseItem = true;
	else hero.settingConfirmUseItem = false;
	saveGame();
  });
  
  $("#setting-confirm-use-token").on('click', function() {
	if($(this).is(":checked")) hero.settingConfirmUseToken = true;
	else hero.settingConfirmUseToken = false;
	saveGame();
  });
  
  $("#setting-confirm-sell-upgrade-equipment").on('click', function() {
	if($(this).is(":checked")) hero.settingConfirmSellUpgrade = true;
	else hero.settingConfirmSellUpgrade = false;
	saveGame();
  });
  
  $("[id^=setting-partner-detail-damage-]").on('click', function() {
	if($(this).val() == "true") hero.settingShowDetailDamage = true;
	else hero.settingShowDetailDamage = false;
	updateHeroDps();
	saveGame();
  });
  
  $("[id^=setting-auto-collapse-]").on('click', function() {
	if($(this).val() == "true") hero.settingAutoCollapse = true;
	else hero.settingAutoCollapse = false;
	refreshSidebarMenu();
	saveGame();
  });
  
  $("#setting-warning-percentage-hp").on('keyup', function() {
	var isNumeric = numericFormat($(this).val());
	if(isNumeric){
	  hero.settingWarningPercentageHP = parseInt($(this).val(),10);
	  saveGame();
	}else $(this).val(hero.settingWarningPercentageHP)
  });
  
  $("#setting-danger-percentage-hp").on('keyup', function() {
	var isNumeric = numericFormat($(this).val());
	if(isNumeric){
	  hero.settingDangerPercentageHP = parseInt($(this).val(),10);
	  saveGame();
	}else $(this).val(hero.settingDangerPercentageHP)
  });
  
  $("#real-time-info").on("click",function(){
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "If you enable this setting, you will see the real time elite DPS value. \n If you disable it, it will display the minimum elite DPS value, but the total DPS still real time");
  });
  
  $("#army-hp-info").on("click",function(){
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "If army hp less than warning limit, it will show warning icon beside it. \n If army hp less than danger limit, it will show danger icon beside it");
  });
  
  $("[id^=tutor-div-]").on("click", function() {
	let tutorNumber =  parseInt($(this).text(),10);
	switchTutorPage(tutorNumber);
  });
  
  $("[id^=tutor-button-]").on("click", function() {
	let tutorNumber = $(this).val() * 1;  
	switchTutorPage(tutorNumber);
  });
  
  $("[id^=tutor-div-]").on("click", function() {
	let tutorNumber = parseInt($(this).text(),10);
	switchTutorPage(tutorNumber);
  });
  
  $("#companion-generate").on("click",function(){
	if(hero.filledCompanionSlot > 0) insertNewUnlockCompanion(true);
	showGenerationTimer();
  });
  
  $("#equipment-generate").on("click",function(){
	if(hero.filledEquipmentSlot > 0) insertNewUnlockEquipment(true);
	showGenerationTimer();
  });
  
  $("#tutor-button-finish").on("click",function (){
	showDungeonArea();  
  });
  
  $("#unlock-artifact-button").on('click', function() {
	let unlockFee = new Decimal(calcNextUnlockArtifactFee()).mul(100-hero.bonusArtifactUnlockFeePercentage).div(100).ceil();
	let heroOrbs = new Decimal(hero.orbs);
	
	if(heroOrbs.greaterThanOrEqualTo(unlockFee)){
	  $("#modalRandomArtifactConfirm").modal('show');
	  showRandomArtifact();
	}else $("#modalUnlockArtifactFailed").modal('show');
  });
  
  $("#random-artifact-ok-button").on('click', function() {
	let rerollFee = new Decimal(calcNextUnlockArtifactFee()).div(2).mul(100-hero.bonusArtifactRerollFeePercentage).div(100).ceil();
	let heroOrbs = new Decimal(hero.orbs);
	$("#modalRandomArtifactConfirm").modal('toggle');
	if(heroOrbs.greaterThanOrEqualTo(rerollFee)){
	  $("#modalRerollArtifactConfirm").modal('show');
	  componentAction ("confirm-reroll-artifact-fee", "replaceText", rerollFee);
	}else{
	  $("#modalNotification").modal('show');
	  $('#notification-ok-button').val(false);
	  componentAction ("notification-text", "replaceText", "You don't have enough orbs to reroll artifact.");
	}
  });
  
  $("#random-artifact-no-button").on('click', function() {
	$("#modalRandomArtifactConfirm").modal('toggle');
  });
  
  $("#reroll-artifact-ok-button").on('click', function() {
	$("#modalRerollArtifactConfirm").modal('toggle');
    $("#modalRandomArtifactConfirm").modal('show');
	showRandomArtifact(true);
	showArtifactArea();
  });
  
  $("#reroll-artifact-no-button").on('click', function() {
    $("#modalRerollArtifactConfirm").modal('toggle');
    $("#modalRandomArtifactConfirm").modal('show');
  });
  
  $("#unlock-artifact-ok-button").on('click', function() {
	$("#modalUnlockArtifactConfirm").modal("hide");
	unlockNewArtifact($('#unlock-artifact-ok-button').val());
	if(hero.totalCountPrestige == 1 && hero.tutorialGroupId == 3) nextTutorial(true);
  });
  
  $("#unlock-artifact-no-button").on('click', function() {
	$("#modalUnlockArtifactConfirm").modal("hide");
	$("#modalRandomArtifactConfirm").modal('show');
  });
  
  $("#continue-failed-unlock-artifact-button").on('click', function() {
	$("#modalUnlockArtifactFailed").modal('toggle'); 
  });
  
  $("#confirm-adventure-ok-button").on('click', function() {
	$("#modalStartAdventureConfirm").modal('toggle');
	startAdventurePet($('#confirm-adventure-ok-button').val());
  });
  
  $("#confirm-adventure-no-button").on('click', function() {
	$("#modalStartAdventureConfirm").modal('toggle');
  });
  
  $("#cancel-adventure-ok-button").on('click', function() {
	$("#modalCancelAdventureConfirm").modal('toggle');
	cancelAdventurePet($('#cancel-adventure-ok-button').val());
  });
  
  $("#cancel-adventure-no-button").on('click', function() {
	$("#modalCancelAdventureConfirm").modal('toggle');
  });
  
  $("#collect-reward-adventure-ok-button").on('click', function() {
	$("#modalCollectRewardAdventureConfirm").modal('toggle');
	confirmCollectRewardAdventurePet($('#collect-reward-adventure-ok-button').val());
  });
  
  $("#collect-reward-adventure-no-button").on('click', function() {
	$("#modalCollectRewardAdventureConfirm").modal('toggle');
  });
  
  $("#confirm-reward-adventure-ok-button").on('click', function() {
	$("#modalRewardAdventureConfirm").modal('toggle');
	confirmCollectRewardAdventurePet($('#confirm-reward-adventure-ok-button').val());
  });
  
  $("#confirm-reward-adventure-no-button").on('click', function() {
	$("#modalRewardAdventureConfirm").modal('toggle');
	confirmCollectRewardAdventurePet($('#confirm-reward-adventure-ok-button').val(),true);
  });
  
  $("#confirm-list-reward-adventure-ok-button").on('click', function() {
	$("#modalListRewardAdventureConfirm").modal('toggle');
	$("#modalRewardAdventureConfirm").modal('hide');
	confirmCollectRewardAdventurePet('complete');
  });
  
  $("#confirm-list-reward-adventure-no-button").on('click', function() {
	$("#modalListRewardAdventureConfirm").modal('toggle');
	$("#modalRewardAdventureConfirm").modal('hide');
	confirmCollectRewardAdventurePet('complete',true);
  });
  
  $("#shop-ok-button").on('click', function() {
	$("#modalShopForm").modal('toggle');
	runShop($("#shop-ok-button").val());
  });
  
  $("#shop-no-button").on('click', function() {
	$("#modalShopForm").modal('toggle');
  });
  
  $("#trade-soul-ok-button").on('click', function() {
	$("#modalConfirmTradeSoul").modal('toggle');
	tradeGodsFragment($("#trade-soul-ok-button").val());
  });
  
  $("#trade-soul-no-button").on('click', function() {
	$("#modalConfirmTradeSoul").modal('toggle');
  });
  
  $("#save-ability-ok-button").on('click', function() {
	$("#modalConfirmSaveAbility").modal('toggle');
	saveAbilityPartner($("#save-ability-ok-button").val());
  });
  
  $("#save-ability-no-button").on('click', function() {
	$("#modalConfirmSaveAbility").modal('toggle');
  });
  
  $("#activate-ability-ok-button").on('click', function() {
	$("#modalConfirmActivateAbility").modal('toggle');
	activateAbilityPartner($("#activate-ability-ok-button").val());
  });
  
  $("#activate-ability-no-button").on('click', function() {
	$("#modalConfirmActivateAbility").modal('toggle');
  });
  
  $("#training-ability-ok-button").on('click', function() {
	$("#modalConfirmStartTrainingAbility").modal('toggle');
	startTrainingAbility($("#training-ability-ok-button").val());
  });
  
  $("#training-ability-no-button").on('click', function() {
	$("#modalConfirmStartTrainingAbility").modal('toggle');
  });
  
  $("#stop-training-ability-ok-button").on('click', function() {
	$("#modalConfirmStopTrainingAbility").modal('toggle');
	stopTrainingAbility($("#stop-training-ability-ok-button").val());
  });
  
  $("#stop-training-ability-no-button").on('click', function() {
	$("#modalConfirmStopTrainingAbility").modal('toggle');
  });
  
  $("#show-modal-item-ok-button").on('click', function() {
	$("#modalShowDetailItem").modal('toggle');
  });
  
  $("#action-item-ok-button").on('click', function() {	
	$("#modalConfirmActionItem").modal('hide');		
	let arrayValue = $("#action-item-ok-button").val().split("=");
	let actionType = arrayValue[1];
	let sellQty = 1;
	if($("#modal-sell-qty-"+arrayValue[0]).length) sellQty = $("#modal-sell-qty-"+arrayValue[0]).val();
	let isNumeric = numericFormat(sellQty);
	
	if(isNumeric){
	  switch(actionType){
	    case "sell":
		  sellItem(arrayValue[0],sellQty);
		  break;
	    default:
		  actionItem($("#action-item-ok-button").val());
		  break;
	  };
	}else{
	  componentAction("action-detail-text","replaceText","Gain: 0 clover");
	  alertNumericFormat("modalConfirmActionItem","modal-sell-qty-"+arrayValue[0]);
	}
  });
  
  $("#action-item-no-button").on('click', function() {
	$("#modalConfirmActionItem").modal('hide');
  });
  
  $("#modalConfirmActionItem").on('hidden.bs.modal', function() {
	$('.modal-dialog').css({"max-width":(defaultModalWidth)});
	$('.modal-dialog').css({"width":(defaultModalWidth)});
  });
  
  $('#modalBuyTowerKey').on('shown.bs.modal', function (e) {
    componentAction("current-tower-token","replaceText",numberFormat(hero.token));
  });
  
  /*$("#buy-tower-key").change(function() {
	let towerKey = parseInt(this.value,10);
	let maxDailyLimitBuyTowerKey = calcMaxDailyLimitBuyTowerKey();
	if((hero.dailyBuyTowerKey+towerKey) > maxDailyLimitBuyTowerKey) towerKey = maxDailyLimitBuyTowerKey - hero.dailyBuyTowerKey;
	
	let totalToken = new Decimal(calculateTokenTowerKey(towerKey));
	let heroToken = new Decimal(hero.token);

	if(totalToken.greaterThan(heroToken)){
	  let maxTokenTowerKey = calculateTokenTowerKey(0,true).split("=");

	  componentAction("token-buy-tower-key","replaceText",numberFormat(maxTokenTowerKey[0]));
	  componentAction("buy-tower-key","inputText",maxTokenTowerKey[1]);
	}else{
	  componentAction("token-buy-tower-key","replaceText",numberFormat(totalToken));
	  componentAction("buy-tower-key","inputText",towerKey);
	}
  });*/
  
  $("#buy-tower-all-minus").on('click', function() {
	componentAction("buy-tower-key","inputText","1");
	componentAction("token-buy-tower-key","replaceText",numberFormat(calculateTokenTowerKey(1,true)));
  });
  
  $("#buy-tower-minus").on('click', function() {
	let currentValue =  parseInt($("#buy-tower-key").val(),10);
	if(currentValue > 1) currentValue -= 1;
	componentAction("buy-tower-key","inputText",currentValue);
	componentAction("token-buy-tower-key","replaceText",numberFormat(calculateTokenTowerKey(currentValue,true)));
  });
  
  $("#buy-tower-plus").on('click', function() {
	let currentValue =  parseInt($("#buy-tower-key").val(),10);
	let availableKey = calcMaxDailyLimitBuyTowerKey() - hero.dailyBuyTowerKey;
	if(currentValue < availableKey) currentValue += 1;
	componentAction("buy-tower-key","inputText",currentValue);
	componentAction("token-buy-tower-key","replaceText",numberFormat(calculateTokenTowerKey(currentValue,true)));
  });
  
  $("#buy-tower-all-plus").on('click', function() {
	let availableKey = calcMaxDailyLimitBuyTowerKey() - hero.dailyBuyTowerKey;  
	componentAction("buy-tower-key","inputText",availableKey);
	componentAction("token-buy-tower-key","replaceText",numberFormat(calculateTokenTowerKey(availableKey,true)));
  });
  
  $("#buy-tower-key-ok-button").on('click', function() {
	if(hero.settingConfirmUseToken){
	  confirmBuyTowerKey($("#buy-tower-key").val());
	}else{
	  buyTowerKey($("#buy-tower-key").val(),"");
	  $("#modalBuyTowerKey").modal('hide');
	}
  });
  
  $("#buy-tower-key-no-button").on('click', function() {
	buyTowerKeyId = -1;
	$("#modalBuyTowerKey").modal('hide');
  });
  
  $("#confirm-buy-tower-key-ok-button").on('click', function() {
	buyTowerKey($("#buy-tower-key").val());
	$("#modalConfirmBuyTowerKey").modal('hide');
  });
  
  $("#confirm-buy-tower-key-no-button").on('click', function() {
	$("#modalConfirmBuyTowerKey").modal('hide');
	$("#modalBuyTowerKey").modal('show');
  });
  
  $("#save-game").on('click', function() {
    saveGame();
	componentAction ("save-text", "replaceText", "Save Data Success");
	$("#modalSaveForm").modal('show');
	let intervalModalSaveForm = setTimeout (function() {
	  $("#modalSaveForm").modal('toggle');
	},2000);
  });
  
  $("#export-import").on('click', function() {
	hideAllContent();
	showExportImportArea();
  });
  
  $("#export-data-button").on('click', function() {
	exportData();
  });
  
  $("#download-data-button").on('click', function() {
	exportData(true);
  });
  
  $("#import-data-button").on('click', function() {
	let importData = $("#import-data").val().trim();
	if(importData != '') $("#modalImportDataForm").modal('show');
  });
  
  $("#import-data-ok-button").on('click', function() {
	$("#modalImportDataForm").modal('toggle');
	importData();
  });
  
  $("#import-data-no-button").on('click', function() {
	$("#modalImportDataForm").modal('toggle');
  });
  
  $("#reincarnate-ok-button").on('click', function() {
	$("#modalConfirmReincarnateGods").modal('toggle');
	reincarnateGods($("#reincarnate-ok-button").val());
  });
  
  $("#reincarnate-no-button").on('click', function() {
	$("#modalConfirmReincarnateGods").modal('toggle');
  });
  
  $("#notification-ok-button").on('click', function() {
	$("#modalNotification").modal('hide');
	let notifValue = $("#notification-ok-button").val().split("=");
	switch(notifValue[0]){
	  case "true":
	    location.reload();
		break;
	  case "checkIn":
	    if(hero.highestFloor >= unlockNewFeatureFloor("cave")) checkCooldownQuestTimer(true);
	    else if(hero.highestFloor >= unlockNewFeatureFloor("cage")) checkCooldownAdventureTimer(true);
		break;
	  case "btk":
	    $("#modalBuyTowerKey").modal("show");
		break;
	  case "sq":
	    componentAction("start-quest-cave-id","inputText",notifValue[1]);
	    $("#modalConfirmStartQuest").modal("show");
		cancelQuest = false;
		setSizeModalStartQuest();
		break;
	  case "mcui":
	    $("#modalConfirmUseItem").modal("show");
	    break;
	  case "mbs":
	    $("#modalBuySell").modal("show");
		break;
	  case "mcai":
	    $("#modalConfirmActionItem").modal("show");
	    break;
	};
	componentAction("notification-ok-button","clearArea","");
	saveGame();
  });
  
  $("#information-ok-button").on('click', function() {
	$("#modalInformation").modal('hide');
  });
  
  $("#tower-information-ok-button").on('click', function() {
	$("#modalActionTower").modal('hide');
  });
  
  $("#clear-game").on('click', function() {
	$("#modalClearConfirm").modal('show');
  });
  
  $("#tower-image-info").on('click', function(e) {
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "* Tower damage is the total amount of level 1 dps for every battling elite that has been unlocked plus DPC from watch tower  \n * Tower key will reset daily at 00.00am \n * You can repeatedly grind the cleared tower floor \n * You can buy tower key with token (click + beside available key)");
  });
  
  $("#clear-tower-ok-button").on('click', function() {
	$("#modalClearTower").modal('hide');
	let towerId = parseInt($("#ti").val(),10);
	let towerFloor = parseInt($("#fn").val(),10);
	let usedKey =  parseInt($("#used-key").val(),10);
	let unlockTower = hero.unlockTower.find(item => item.id === towerId);
	unlockTower.availableKey -= usedKey;
	let currentReward = checkTowerReward(towerId, towerFloor);
	getTowerReward(towerId,currentReward,usedKey);
  });
  
  $("#clear-tower-no-button").on('click', function() {
	$("#modalClearTower").modal('hide');
  });
  
  $("#tower-all-minus").on('click', function() {
	componentAction("used-key","inputText","1");
  });
  
  $("#tower-minus").on('click', function() {
	let currentValue =  parseInt($("#used-key").val(),10);
	if(currentValue > 1) currentValue -= 1;
	componentAction("used-key","inputText",currentValue);
  });
  
  $("#tower-plus").on('click', function() {
	let currentValue =  parseInt($("#used-key").val(),10);
	let towerId = parseInt($("#ti").val(),10);
	let unlockTower = hero.unlockTower.find(item => item.id === towerId);
	if(unlockTower){
	  if(currentValue < unlockTower.availableKey) currentValue += 1;
	}else currentValue = 0;
	componentAction("used-key","inputText",currentValue);
  });
  
  $("#tower-all-plus").on('click', function() {
	let towerId = parseInt($("#ti").val(),10);
	let unlockTower = hero.unlockTower.find(item => item.id === towerId);
	if(unlockTower){
	  componentAction("used-key","inputText",unlockTower.availableKey);
	}else componentAction("used-key","inputText",0);
  });
  
  $("#artifact-damage-info").on('click', function(e) {
	$("#modalNotification").modal("show");
	componentAction ("notification-text", "replaceText", "* Each artifact will produce artifact power \n * Artifact power will increase the power of DPC, DPS and Gold Drop from killing monster \n * Artifact power will depend on total number of unlocked artifacts and total artifact level");
  });
  
  $("#gods-image-info").on('click', function(e) {
	$("#modalNotification").modal("show");
	let countActiveGods = checkActiveGods();
	let notifText = "* You have max "+hero.activeGodsSlot+" gods slot. ";
	if(countActiveGods < hero.activeGodsSlot) notifText += "You can activate another "+(hero.activeGodsSlot-countActiveGods)+" gods.";
	notifText += "\n* You can add more gods slot at the shop\n* Gods must be at least level 1 to activate and you'll get the Gods buff";
	componentAction ("notification-text", "replaceText", notifText);
  });
  
  $("#clover-image-info").on('click', function(e) {
	$("#modalNotification").modal("show");
	let notifText = "* Clover is currency that are used in the "+hero.kingdomName+" Kingdom\n* Clover can be used for buy and sell goods";
	componentAction ("notification-text", "replaceText", notifText);
  });
  
  $("#contact-dev").on('click', function() {
	let bodyEmail = 'KuroIdleDungeon v'+setting.gameVersion+'\r\n';
	bodyEmail += 'UserID : '+hero.userId+'\r\n';
	bodyEmail += 'UserName : '+hero.userName+'\r\n';
	window.open('mailto:kuropone.solodev@gmail.com?subject=Kuro Idle Dungeon Contact Dev&body='+encodeURIComponent(bodyEmail));
  });
  
  $("#info-div").on('click', function() {
	if ($("#info-status-div").hasClass("hide-menu")){
	  hideAllMenu();
	  showMenu('info');
	}
  });
  
  $("#gameplay-div").on('click', function() {
	if ($("#gameplay-status-div").hasClass("hide-menu")){
	  hideAllMenu();
	  showMenu('gameplay');
	}
  });
  
  $("#town-div").on('click', function() {
	if ($("#town-status-div").hasClass("hide-menu")){
	  hideAllMenu();
	  showMenu('town');
	}
  });
  
  $("#other-div").on('click', function() {
	if ($("#other-status-div").hasClass("hide-menu")){
	  hideAllMenu();
	  showMenu('other');
	}
  });
})(jQuery);